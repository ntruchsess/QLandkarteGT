// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "CWMSResponse.h"

namespace wms
{
  // OperationType
  //

  const OperationType::Format_sequence& OperationType::
  Format () const
  {
    return this->Format_;
  }

  OperationType::Format_sequence& OperationType::
  Format ()
  {
    return this->Format_;
  }

  void OperationType::
  Format (const Format_sequence& s)
  {
    this->Format_ = s;
  }

  const OperationType::DCPType_sequence& OperationType::
  DCPType () const
  {
    return this->DCPType_;
  }

  OperationType::DCPType_sequence& OperationType::
  DCPType ()
  {
    return this->DCPType_;
  }

  void OperationType::
  DCPType (const DCPType_sequence& s)
  {
    this->DCPType_ = s;
  }


  // longitudeType
  //


  // latitudeType
  //


  // WMS_Capabilities
  //

  const WMS_Capabilities::Service_type& WMS_Capabilities::
  Service () const
  {
    return this->Service_.get ();
  }

  WMS_Capabilities::Service_type& WMS_Capabilities::
  Service ()
  {
    return this->Service_.get ();
  }

  void WMS_Capabilities::
  Service (const Service_type& x)
  {
    this->Service_.set (x);
  }

  void WMS_Capabilities::
  Service (::std::auto_ptr< Service_type > x)
  {
    this->Service_.set (x);
  }

  const WMS_Capabilities::Capability_type& WMS_Capabilities::
  Capability () const
  {
    return this->Capability_.get ();
  }

  WMS_Capabilities::Capability_type& WMS_Capabilities::
  Capability ()
  {
    return this->Capability_.get ();
  }

  void WMS_Capabilities::
  Capability (const Capability_type& x)
  {
    this->Capability_.set (x);
  }

  void WMS_Capabilities::
  Capability (::std::auto_ptr< Capability_type > x)
  {
    this->Capability_.set (x);
  }

  const WMS_Capabilities::version_type& WMS_Capabilities::
  version () const
  {
    return this->version_.get ();
  }

  const WMS_Capabilities::version_type& WMS_Capabilities::
  version_default_value ()
  {
    return version_default_value_;
  }

  const WMS_Capabilities::updateSequence_optional& WMS_Capabilities::
  updateSequence () const
  {
    return this->updateSequence_;
  }

  WMS_Capabilities::updateSequence_optional& WMS_Capabilities::
  updateSequence ()
  {
    return this->updateSequence_;
  }

  void WMS_Capabilities::
  updateSequence (const updateSequence_type& x)
  {
    this->updateSequence_.set (x);
  }

  void WMS_Capabilities::
  updateSequence (const updateSequence_optional& x)
  {
    this->updateSequence_ = x;
  }

  void WMS_Capabilities::
  updateSequence (::std::auto_ptr< updateSequence_type > x)
  {
    this->updateSequence_.set (x);
  }


  // KeywordList
  //

  const KeywordList::Keyword_sequence& KeywordList::
  Keyword () const
  {
    return this->Keyword_;
  }

  KeywordList::Keyword_sequence& KeywordList::
  Keyword ()
  {
    return this->Keyword_;
  }

  void KeywordList::
  Keyword (const Keyword_sequence& s)
  {
    this->Keyword_ = s;
  }


  // Keyword
  //

  const Keyword::vocabulary_optional& Keyword::
  vocabulary () const
  {
    return this->vocabulary_;
  }

  Keyword::vocabulary_optional& Keyword::
  vocabulary ()
  {
    return this->vocabulary_;
  }

  void Keyword::
  vocabulary (const vocabulary_type& x)
  {
    this->vocabulary_.set (x);
  }

  void Keyword::
  vocabulary (const vocabulary_optional& x)
  {
    this->vocabulary_ = x;
  }

  void Keyword::
  vocabulary (::std::auto_ptr< vocabulary_type > x)
  {
    this->vocabulary_.set (x);
  }


  // OnlineResource
  //

  const OnlineResource::type_type& OnlineResource::
  type () const
  {
    return this->type_.get ();
  }

  const OnlineResource::type_type& OnlineResource::
  type_default_value ()
  {
    return type_default_value_;
  }

  const OnlineResource::href_optional& OnlineResource::
  href () const
  {
    return this->href_;
  }

  OnlineResource::href_optional& OnlineResource::
  href ()
  {
    return this->href_;
  }

  void OnlineResource::
  href (const href_type& x)
  {
    this->href_.set (x);
  }

  void OnlineResource::
  href (const href_optional& x)
  {
    this->href_ = x;
  }

  void OnlineResource::
  href (::std::auto_ptr< href_type > x)
  {
    this->href_.set (x);
  }

  const OnlineResource::role_optional& OnlineResource::
  role () const
  {
    return this->role_;
  }

  OnlineResource::role_optional& OnlineResource::
  role ()
  {
    return this->role_;
  }

  void OnlineResource::
  role (const role_type& x)
  {
    this->role_.set (x);
  }

  void OnlineResource::
  role (const role_optional& x)
  {
    this->role_ = x;
  }

  void OnlineResource::
  role (::std::auto_ptr< role_type > x)
  {
    this->role_.set (x);
  }

  const OnlineResource::arcrole_optional& OnlineResource::
  arcrole () const
  {
    return this->arcrole_;
  }

  OnlineResource::arcrole_optional& OnlineResource::
  arcrole ()
  {
    return this->arcrole_;
  }

  void OnlineResource::
  arcrole (const arcrole_type& x)
  {
    this->arcrole_.set (x);
  }

  void OnlineResource::
  arcrole (const arcrole_optional& x)
  {
    this->arcrole_ = x;
  }

  void OnlineResource::
  arcrole (::std::auto_ptr< arcrole_type > x)
  {
    this->arcrole_.set (x);
  }

  const OnlineResource::title_optional& OnlineResource::
  title () const
  {
    return this->title_;
  }

  OnlineResource::title_optional& OnlineResource::
  title ()
  {
    return this->title_;
  }

  void OnlineResource::
  title (const title_type& x)
  {
    this->title_.set (x);
  }

  void OnlineResource::
  title (const title_optional& x)
  {
    this->title_ = x;
  }

  void OnlineResource::
  title (::std::auto_ptr< title_type > x)
  {
    this->title_.set (x);
  }

  const OnlineResource::show_optional& OnlineResource::
  show () const
  {
    return this->show_;
  }

  OnlineResource::show_optional& OnlineResource::
  show ()
  {
    return this->show_;
  }

  void OnlineResource::
  show (const show_type& x)
  {
    this->show_.set (x);
  }

  void OnlineResource::
  show (const show_optional& x)
  {
    this->show_ = x;
  }

  void OnlineResource::
  show (::std::auto_ptr< show_type > x)
  {
    this->show_.set (x);
  }

  const OnlineResource::actuate_optional& OnlineResource::
  actuate () const
  {
    return this->actuate_;
  }

  OnlineResource::actuate_optional& OnlineResource::
  actuate ()
  {
    return this->actuate_;
  }

  void OnlineResource::
  actuate (const actuate_type& x)
  {
    this->actuate_.set (x);
  }

  void OnlineResource::
  actuate (const actuate_optional& x)
  {
    this->actuate_ = x;
  }

  void OnlineResource::
  actuate (::std::auto_ptr< actuate_type > x)
  {
    this->actuate_.set (x);
  }


  // Service
  //

  const Service::Name_type& Service::
  Name () const
  {
    return this->Name_.get ();
  }

  Service::Name_type& Service::
  Name ()
  {
    return this->Name_.get ();
  }

  void Service::
  Name (const Name_type& x)
  {
    this->Name_.set (x);
  }

  void Service::
  Name (::std::auto_ptr< Name_type > x)
  {
    this->Name_.set (x);
  }

  const Service::Title_type& Service::
  Title () const
  {
    return this->Title_.get ();
  }

  Service::Title_type& Service::
  Title ()
  {
    return this->Title_.get ();
  }

  void Service::
  Title (const Title_type& x)
  {
    this->Title_.set (x);
  }

  void Service::
  Title (::std::auto_ptr< Title_type > x)
  {
    this->Title_.set (x);
  }

  const Service::Abstract_optional& Service::
  Abstract () const
  {
    return this->Abstract_;
  }

  Service::Abstract_optional& Service::
  Abstract ()
  {
    return this->Abstract_;
  }

  void Service::
  Abstract (const Abstract_type& x)
  {
    this->Abstract_.set (x);
  }

  void Service::
  Abstract (const Abstract_optional& x)
  {
    this->Abstract_ = x;
  }

  void Service::
  Abstract (::std::auto_ptr< Abstract_type > x)
  {
    this->Abstract_.set (x);
  }

  const Service::KeywordList_optional& Service::
  KeywordList () const
  {
    return this->KeywordList_;
  }

  Service::KeywordList_optional& Service::
  KeywordList ()
  {
    return this->KeywordList_;
  }

  void Service::
  KeywordList (const KeywordList_type& x)
  {
    this->KeywordList_.set (x);
  }

  void Service::
  KeywordList (const KeywordList_optional& x)
  {
    this->KeywordList_ = x;
  }

  void Service::
  KeywordList (::std::auto_ptr< KeywordList_type > x)
  {
    this->KeywordList_.set (x);
  }

  const Service::OnlineResource_type& Service::
  OnlineResource () const
  {
    return this->OnlineResource_.get ();
  }

  Service::OnlineResource_type& Service::
  OnlineResource ()
  {
    return this->OnlineResource_.get ();
  }

  void Service::
  OnlineResource (const OnlineResource_type& x)
  {
    this->OnlineResource_.set (x);
  }

  void Service::
  OnlineResource (::std::auto_ptr< OnlineResource_type > x)
  {
    this->OnlineResource_.set (x);
  }

  const Service::ContactInformation_optional& Service::
  ContactInformation () const
  {
    return this->ContactInformation_;
  }

  Service::ContactInformation_optional& Service::
  ContactInformation ()
  {
    return this->ContactInformation_;
  }

  void Service::
  ContactInformation (const ContactInformation_type& x)
  {
    this->ContactInformation_.set (x);
  }

  void Service::
  ContactInformation (const ContactInformation_optional& x)
  {
    this->ContactInformation_ = x;
  }

  void Service::
  ContactInformation (::std::auto_ptr< ContactInformation_type > x)
  {
    this->ContactInformation_.set (x);
  }

  const Service::Fees_optional& Service::
  Fees () const
  {
    return this->Fees_;
  }

  Service::Fees_optional& Service::
  Fees ()
  {
    return this->Fees_;
  }

  void Service::
  Fees (const Fees_type& x)
  {
    this->Fees_.set (x);
  }

  void Service::
  Fees (const Fees_optional& x)
  {
    this->Fees_ = x;
  }

  void Service::
  Fees (::std::auto_ptr< Fees_type > x)
  {
    this->Fees_.set (x);
  }

  const Service::AccessConstraints_optional& Service::
  AccessConstraints () const
  {
    return this->AccessConstraints_;
  }

  Service::AccessConstraints_optional& Service::
  AccessConstraints ()
  {
    return this->AccessConstraints_;
  }

  void Service::
  AccessConstraints (const AccessConstraints_type& x)
  {
    this->AccessConstraints_.set (x);
  }

  void Service::
  AccessConstraints (const AccessConstraints_optional& x)
  {
    this->AccessConstraints_ = x;
  }

  void Service::
  AccessConstraints (::std::auto_ptr< AccessConstraints_type > x)
  {
    this->AccessConstraints_.set (x);
  }

  const Service::LayerLimit_optional& Service::
  LayerLimit () const
  {
    return this->LayerLimit_;
  }

  Service::LayerLimit_optional& Service::
  LayerLimit ()
  {
    return this->LayerLimit_;
  }

  void Service::
  LayerLimit (const LayerLimit_type& x)
  {
    this->LayerLimit_.set (x);
  }

  void Service::
  LayerLimit (const LayerLimit_optional& x)
  {
    this->LayerLimit_ = x;
  }

  const Service::MaxWidth_optional& Service::
  MaxWidth () const
  {
    return this->MaxWidth_;
  }

  Service::MaxWidth_optional& Service::
  MaxWidth ()
  {
    return this->MaxWidth_;
  }

  void Service::
  MaxWidth (const MaxWidth_type& x)
  {
    this->MaxWidth_.set (x);
  }

  void Service::
  MaxWidth (const MaxWidth_optional& x)
  {
    this->MaxWidth_ = x;
  }

  const Service::MaxHeight_optional& Service::
  MaxHeight () const
  {
    return this->MaxHeight_;
  }

  Service::MaxHeight_optional& Service::
  MaxHeight ()
  {
    return this->MaxHeight_;
  }

  void Service::
  MaxHeight (const MaxHeight_type& x)
  {
    this->MaxHeight_.set (x);
  }

  void Service::
  MaxHeight (const MaxHeight_optional& x)
  {
    this->MaxHeight_ = x;
  }


  // ContactInformation
  //

  const ContactInformation::ContactPersonPrimary_optional& ContactInformation::
  ContactPersonPrimary () const
  {
    return this->ContactPersonPrimary_;
  }

  ContactInformation::ContactPersonPrimary_optional& ContactInformation::
  ContactPersonPrimary ()
  {
    return this->ContactPersonPrimary_;
  }

  void ContactInformation::
  ContactPersonPrimary (const ContactPersonPrimary_type& x)
  {
    this->ContactPersonPrimary_.set (x);
  }

  void ContactInformation::
  ContactPersonPrimary (const ContactPersonPrimary_optional& x)
  {
    this->ContactPersonPrimary_ = x;
  }

  void ContactInformation::
  ContactPersonPrimary (::std::auto_ptr< ContactPersonPrimary_type > x)
  {
    this->ContactPersonPrimary_.set (x);
  }

  const ContactInformation::ContactPosition_optional& ContactInformation::
  ContactPosition () const
  {
    return this->ContactPosition_;
  }

  ContactInformation::ContactPosition_optional& ContactInformation::
  ContactPosition ()
  {
    return this->ContactPosition_;
  }

  void ContactInformation::
  ContactPosition (const ContactPosition_type& x)
  {
    this->ContactPosition_.set (x);
  }

  void ContactInformation::
  ContactPosition (const ContactPosition_optional& x)
  {
    this->ContactPosition_ = x;
  }

  void ContactInformation::
  ContactPosition (::std::auto_ptr< ContactPosition_type > x)
  {
    this->ContactPosition_.set (x);
  }

  const ContactInformation::ContactAddress_optional& ContactInformation::
  ContactAddress () const
  {
    return this->ContactAddress_;
  }

  ContactInformation::ContactAddress_optional& ContactInformation::
  ContactAddress ()
  {
    return this->ContactAddress_;
  }

  void ContactInformation::
  ContactAddress (const ContactAddress_type& x)
  {
    this->ContactAddress_.set (x);
  }

  void ContactInformation::
  ContactAddress (const ContactAddress_optional& x)
  {
    this->ContactAddress_ = x;
  }

  void ContactInformation::
  ContactAddress (::std::auto_ptr< ContactAddress_type > x)
  {
    this->ContactAddress_.set (x);
  }

  const ContactInformation::ContactVoiceTelephone_optional& ContactInformation::
  ContactVoiceTelephone () const
  {
    return this->ContactVoiceTelephone_;
  }

  ContactInformation::ContactVoiceTelephone_optional& ContactInformation::
  ContactVoiceTelephone ()
  {
    return this->ContactVoiceTelephone_;
  }

  void ContactInformation::
  ContactVoiceTelephone (const ContactVoiceTelephone_type& x)
  {
    this->ContactVoiceTelephone_.set (x);
  }

  void ContactInformation::
  ContactVoiceTelephone (const ContactVoiceTelephone_optional& x)
  {
    this->ContactVoiceTelephone_ = x;
  }

  void ContactInformation::
  ContactVoiceTelephone (::std::auto_ptr< ContactVoiceTelephone_type > x)
  {
    this->ContactVoiceTelephone_.set (x);
  }

  const ContactInformation::ContactFacsimileTelephone_optional& ContactInformation::
  ContactFacsimileTelephone () const
  {
    return this->ContactFacsimileTelephone_;
  }

  ContactInformation::ContactFacsimileTelephone_optional& ContactInformation::
  ContactFacsimileTelephone ()
  {
    return this->ContactFacsimileTelephone_;
  }

  void ContactInformation::
  ContactFacsimileTelephone (const ContactFacsimileTelephone_type& x)
  {
    this->ContactFacsimileTelephone_.set (x);
  }

  void ContactInformation::
  ContactFacsimileTelephone (const ContactFacsimileTelephone_optional& x)
  {
    this->ContactFacsimileTelephone_ = x;
  }

  void ContactInformation::
  ContactFacsimileTelephone (::std::auto_ptr< ContactFacsimileTelephone_type > x)
  {
    this->ContactFacsimileTelephone_.set (x);
  }

  const ContactInformation::ContactElectronicMailAddress_optional& ContactInformation::
  ContactElectronicMailAddress () const
  {
    return this->ContactElectronicMailAddress_;
  }

  ContactInformation::ContactElectronicMailAddress_optional& ContactInformation::
  ContactElectronicMailAddress ()
  {
    return this->ContactElectronicMailAddress_;
  }

  void ContactInformation::
  ContactElectronicMailAddress (const ContactElectronicMailAddress_type& x)
  {
    this->ContactElectronicMailAddress_.set (x);
  }

  void ContactInformation::
  ContactElectronicMailAddress (const ContactElectronicMailAddress_optional& x)
  {
    this->ContactElectronicMailAddress_ = x;
  }

  void ContactInformation::
  ContactElectronicMailAddress (::std::auto_ptr< ContactElectronicMailAddress_type > x)
  {
    this->ContactElectronicMailAddress_.set (x);
  }


  // ContactPersonPrimary
  //

  const ContactPersonPrimary::ContactPerson_type& ContactPersonPrimary::
  ContactPerson () const
  {
    return this->ContactPerson_.get ();
  }

  ContactPersonPrimary::ContactPerson_type& ContactPersonPrimary::
  ContactPerson ()
  {
    return this->ContactPerson_.get ();
  }

  void ContactPersonPrimary::
  ContactPerson (const ContactPerson_type& x)
  {
    this->ContactPerson_.set (x);
  }

  void ContactPersonPrimary::
  ContactPerson (::std::auto_ptr< ContactPerson_type > x)
  {
    this->ContactPerson_.set (x);
  }

  const ContactPersonPrimary::ContactOrganization_type& ContactPersonPrimary::
  ContactOrganization () const
  {
    return this->ContactOrganization_.get ();
  }

  ContactPersonPrimary::ContactOrganization_type& ContactPersonPrimary::
  ContactOrganization ()
  {
    return this->ContactOrganization_.get ();
  }

  void ContactPersonPrimary::
  ContactOrganization (const ContactOrganization_type& x)
  {
    this->ContactOrganization_.set (x);
  }

  void ContactPersonPrimary::
  ContactOrganization (::std::auto_ptr< ContactOrganization_type > x)
  {
    this->ContactOrganization_.set (x);
  }


  // ContactAddress
  //

  const ContactAddress::AddressType_type& ContactAddress::
  AddressType () const
  {
    return this->AddressType_.get ();
  }

  ContactAddress::AddressType_type& ContactAddress::
  AddressType ()
  {
    return this->AddressType_.get ();
  }

  void ContactAddress::
  AddressType (const AddressType_type& x)
  {
    this->AddressType_.set (x);
  }

  void ContactAddress::
  AddressType (::std::auto_ptr< AddressType_type > x)
  {
    this->AddressType_.set (x);
  }

  const ContactAddress::Address_type& ContactAddress::
  Address () const
  {
    return this->Address_.get ();
  }

  ContactAddress::Address_type& ContactAddress::
  Address ()
  {
    return this->Address_.get ();
  }

  void ContactAddress::
  Address (const Address_type& x)
  {
    this->Address_.set (x);
  }

  void ContactAddress::
  Address (::std::auto_ptr< Address_type > x)
  {
    this->Address_.set (x);
  }

  const ContactAddress::City_type& ContactAddress::
  City () const
  {
    return this->City_.get ();
  }

  ContactAddress::City_type& ContactAddress::
  City ()
  {
    return this->City_.get ();
  }

  void ContactAddress::
  City (const City_type& x)
  {
    this->City_.set (x);
  }

  void ContactAddress::
  City (::std::auto_ptr< City_type > x)
  {
    this->City_.set (x);
  }

  const ContactAddress::StateOrProvince_type& ContactAddress::
  StateOrProvince () const
  {
    return this->StateOrProvince_.get ();
  }

  ContactAddress::StateOrProvince_type& ContactAddress::
  StateOrProvince ()
  {
    return this->StateOrProvince_.get ();
  }

  void ContactAddress::
  StateOrProvince (const StateOrProvince_type& x)
  {
    this->StateOrProvince_.set (x);
  }

  void ContactAddress::
  StateOrProvince (::std::auto_ptr< StateOrProvince_type > x)
  {
    this->StateOrProvince_.set (x);
  }

  const ContactAddress::PostCode_type& ContactAddress::
  PostCode () const
  {
    return this->PostCode_.get ();
  }

  ContactAddress::PostCode_type& ContactAddress::
  PostCode ()
  {
    return this->PostCode_.get ();
  }

  void ContactAddress::
  PostCode (const PostCode_type& x)
  {
    this->PostCode_.set (x);
  }

  void ContactAddress::
  PostCode (::std::auto_ptr< PostCode_type > x)
  {
    this->PostCode_.set (x);
  }

  const ContactAddress::Country_type& ContactAddress::
  Country () const
  {
    return this->Country_.get ();
  }

  ContactAddress::Country_type& ContactAddress::
  Country ()
  {
    return this->Country_.get ();
  }

  void ContactAddress::
  Country (const Country_type& x)
  {
    this->Country_.set (x);
  }

  void ContactAddress::
  Country (::std::auto_ptr< Country_type > x)
  {
    this->Country_.set (x);
  }


  // Capability
  //

  const Capability::Request_type& Capability::
  Request () const
  {
    return this->Request_.get ();
  }

  Capability::Request_type& Capability::
  Request ()
  {
    return this->Request_.get ();
  }

  void Capability::
  Request (const Request_type& x)
  {
    this->Request_.set (x);
  }

  void Capability::
  Request (::std::auto_ptr< Request_type > x)
  {
    this->Request_.set (x);
  }

  const Capability::Exception_type& Capability::
  Exception () const
  {
    return this->Exception_.get ();
  }

  Capability::Exception_type& Capability::
  Exception ()
  {
    return this->Exception_.get ();
  }

  void Capability::
  Exception (const Exception_type& x)
  {
    this->Exception_.set (x);
  }

  void Capability::
  Exception (::std::auto_ptr< Exception_type > x)
  {
    this->Exception_.set (x);
  }

  const Capability::_ExtendedCapabilities_sequence& Capability::
  _ExtendedCapabilities () const
  {
    return this->_ExtendedCapabilities_;
  }

  Capability::_ExtendedCapabilities_sequence& Capability::
  _ExtendedCapabilities ()
  {
    return this->_ExtendedCapabilities_;
  }

  void Capability::
  _ExtendedCapabilities (const _ExtendedCapabilities_sequence& s)
  {
    this->_ExtendedCapabilities_ = s;
  }

  const Capability::Layer_optional& Capability::
  Layer () const
  {
    return this->Layer_;
  }

  Capability::Layer_optional& Capability::
  Layer ()
  {
    return this->Layer_;
  }

  void Capability::
  Layer (const Layer_type& x)
  {
    this->Layer_.set (x);
  }

  void Capability::
  Layer (const Layer_optional& x)
  {
    this->Layer_ = x;
  }

  void Capability::
  Layer (::std::auto_ptr< Layer_type > x)
  {
    this->Layer_.set (x);
  }


  // Request
  //

  const Request::GetCapabilities_type& Request::
  GetCapabilities () const
  {
    return this->GetCapabilities_.get ();
  }

  Request::GetCapabilities_type& Request::
  GetCapabilities ()
  {
    return this->GetCapabilities_.get ();
  }

  void Request::
  GetCapabilities (const GetCapabilities_type& x)
  {
    this->GetCapabilities_.set (x);
  }

  void Request::
  GetCapabilities (::std::auto_ptr< GetCapabilities_type > x)
  {
    this->GetCapabilities_.set (x);
  }

  const Request::GetMap_type& Request::
  GetMap () const
  {
    return this->GetMap_.get ();
  }

  Request::GetMap_type& Request::
  GetMap ()
  {
    return this->GetMap_.get ();
  }

  void Request::
  GetMap (const GetMap_type& x)
  {
    this->GetMap_.set (x);
  }

  void Request::
  GetMap (::std::auto_ptr< GetMap_type > x)
  {
    this->GetMap_.set (x);
  }

  const Request::GetFeatureInfo_optional& Request::
  GetFeatureInfo () const
  {
    return this->GetFeatureInfo_;
  }

  Request::GetFeatureInfo_optional& Request::
  GetFeatureInfo ()
  {
    return this->GetFeatureInfo_;
  }

  void Request::
  GetFeatureInfo (const GetFeatureInfo_type& x)
  {
    this->GetFeatureInfo_.set (x);
  }

  void Request::
  GetFeatureInfo (const GetFeatureInfo_optional& x)
  {
    this->GetFeatureInfo_ = x;
  }

  void Request::
  GetFeatureInfo (::std::auto_ptr< GetFeatureInfo_type > x)
  {
    this->GetFeatureInfo_.set (x);
  }

  const Request::_ExtendedOperation_sequence& Request::
  _ExtendedOperation () const
  {
    return this->_ExtendedOperation_;
  }

  Request::_ExtendedOperation_sequence& Request::
  _ExtendedOperation ()
  {
    return this->_ExtendedOperation_;
  }

  void Request::
  _ExtendedOperation (const _ExtendedOperation_sequence& s)
  {
    this->_ExtendedOperation_ = s;
  }


  // DCPType
  //

  const DCPType::HTTP_type& DCPType::
  HTTP () const
  {
    return this->HTTP_.get ();
  }

  DCPType::HTTP_type& DCPType::
  HTTP ()
  {
    return this->HTTP_.get ();
  }

  void DCPType::
  HTTP (const HTTP_type& x)
  {
    this->HTTP_.set (x);
  }

  void DCPType::
  HTTP (::std::auto_ptr< HTTP_type > x)
  {
    this->HTTP_.set (x);
  }


  // HTTP
  //

  const HTTP::Get_type& HTTP::
  Get () const
  {
    return this->Get_.get ();
  }

  HTTP::Get_type& HTTP::
  Get ()
  {
    return this->Get_.get ();
  }

  void HTTP::
  Get (const Get_type& x)
  {
    this->Get_.set (x);
  }

  void HTTP::
  Get (::std::auto_ptr< Get_type > x)
  {
    this->Get_.set (x);
  }

  const HTTP::Post_optional& HTTP::
  Post () const
  {
    return this->Post_;
  }

  HTTP::Post_optional& HTTP::
  Post ()
  {
    return this->Post_;
  }

  void HTTP::
  Post (const Post_type& x)
  {
    this->Post_.set (x);
  }

  void HTTP::
  Post (const Post_optional& x)
  {
    this->Post_ = x;
  }

  void HTTP::
  Post (::std::auto_ptr< Post_type > x)
  {
    this->Post_.set (x);
  }


  // Get
  //

  const Get::OnlineResource_type& Get::
  OnlineResource () const
  {
    return this->OnlineResource_.get ();
  }

  Get::OnlineResource_type& Get::
  OnlineResource ()
  {
    return this->OnlineResource_.get ();
  }

  void Get::
  OnlineResource (const OnlineResource_type& x)
  {
    this->OnlineResource_.set (x);
  }

  void Get::
  OnlineResource (::std::auto_ptr< OnlineResource_type > x)
  {
    this->OnlineResource_.set (x);
  }


  // Post
  //

  const Post::OnlineResource_type& Post::
  OnlineResource () const
  {
    return this->OnlineResource_.get ();
  }

  Post::OnlineResource_type& Post::
  OnlineResource ()
  {
    return this->OnlineResource_.get ();
  }

  void Post::
  OnlineResource (const OnlineResource_type& x)
  {
    this->OnlineResource_.set (x);
  }

  void Post::
  OnlineResource (::std::auto_ptr< OnlineResource_type > x)
  {
    this->OnlineResource_.set (x);
  }


  // Exception
  //

  const Exception::Format_sequence& Exception::
  Format () const
  {
    return this->Format_;
  }

  Exception::Format_sequence& Exception::
  Format ()
  {
    return this->Format_;
  }

  void Exception::
  Format (const Format_sequence& s)
  {
    this->Format_ = s;
  }


  // Layer
  //

  const Layer::Name_optional& Layer::
  Name () const
  {
    return this->Name_;
  }

  Layer::Name_optional& Layer::
  Name ()
  {
    return this->Name_;
  }

  void Layer::
  Name (const Name_type& x)
  {
    this->Name_.set (x);
  }

  void Layer::
  Name (const Name_optional& x)
  {
    this->Name_ = x;
  }

  void Layer::
  Name (::std::auto_ptr< Name_type > x)
  {
    this->Name_.set (x);
  }

  const Layer::Title_type& Layer::
  Title () const
  {
    return this->Title_.get ();
  }

  Layer::Title_type& Layer::
  Title ()
  {
    return this->Title_.get ();
  }

  void Layer::
  Title (const Title_type& x)
  {
    this->Title_.set (x);
  }

  void Layer::
  Title (::std::auto_ptr< Title_type > x)
  {
    this->Title_.set (x);
  }

  const Layer::Abstract_optional& Layer::
  Abstract () const
  {
    return this->Abstract_;
  }

  Layer::Abstract_optional& Layer::
  Abstract ()
  {
    return this->Abstract_;
  }

  void Layer::
  Abstract (const Abstract_type& x)
  {
    this->Abstract_.set (x);
  }

  void Layer::
  Abstract (const Abstract_optional& x)
  {
    this->Abstract_ = x;
  }

  void Layer::
  Abstract (::std::auto_ptr< Abstract_type > x)
  {
    this->Abstract_.set (x);
  }

  const Layer::KeywordList_optional& Layer::
  KeywordList () const
  {
    return this->KeywordList_;
  }

  Layer::KeywordList_optional& Layer::
  KeywordList ()
  {
    return this->KeywordList_;
  }

  void Layer::
  KeywordList (const KeywordList_type& x)
  {
    this->KeywordList_.set (x);
  }

  void Layer::
  KeywordList (const KeywordList_optional& x)
  {
    this->KeywordList_ = x;
  }

  void Layer::
  KeywordList (::std::auto_ptr< KeywordList_type > x)
  {
    this->KeywordList_.set (x);
  }

  const Layer::CRS_sequence& Layer::
  CRS () const
  {
    return this->CRS_;
  }

  Layer::CRS_sequence& Layer::
  CRS ()
  {
    return this->CRS_;
  }

  void Layer::
  CRS (const CRS_sequence& s)
  {
    this->CRS_ = s;
  }

  const Layer::EX_GeographicBoundingBox_optional& Layer::
  EX_GeographicBoundingBox () const
  {
    return this->EX_GeographicBoundingBox_;
  }

  Layer::EX_GeographicBoundingBox_optional& Layer::
  EX_GeographicBoundingBox ()
  {
    return this->EX_GeographicBoundingBox_;
  }

  void Layer::
  EX_GeographicBoundingBox (const EX_GeographicBoundingBox_type& x)
  {
    this->EX_GeographicBoundingBox_.set (x);
  }

  void Layer::
  EX_GeographicBoundingBox (const EX_GeographicBoundingBox_optional& x)
  {
    this->EX_GeographicBoundingBox_ = x;
  }

  void Layer::
  EX_GeographicBoundingBox (::std::auto_ptr< EX_GeographicBoundingBox_type > x)
  {
    this->EX_GeographicBoundingBox_.set (x);
  }

  const Layer::BoundingBox_sequence& Layer::
  BoundingBox () const
  {
    return this->BoundingBox_;
  }

  Layer::BoundingBox_sequence& Layer::
  BoundingBox ()
  {
    return this->BoundingBox_;
  }

  void Layer::
  BoundingBox (const BoundingBox_sequence& s)
  {
    this->BoundingBox_ = s;
  }

  const Layer::Dimension_sequence& Layer::
  Dimension () const
  {
    return this->Dimension_;
  }

  Layer::Dimension_sequence& Layer::
  Dimension ()
  {
    return this->Dimension_;
  }

  void Layer::
  Dimension (const Dimension_sequence& s)
  {
    this->Dimension_ = s;
  }

  const Layer::Attribution_optional& Layer::
  Attribution () const
  {
    return this->Attribution_;
  }

  Layer::Attribution_optional& Layer::
  Attribution ()
  {
    return this->Attribution_;
  }

  void Layer::
  Attribution (const Attribution_type& x)
  {
    this->Attribution_.set (x);
  }

  void Layer::
  Attribution (const Attribution_optional& x)
  {
    this->Attribution_ = x;
  }

  void Layer::
  Attribution (::std::auto_ptr< Attribution_type > x)
  {
    this->Attribution_.set (x);
  }

  const Layer::AuthorityURL_sequence& Layer::
  AuthorityURL () const
  {
    return this->AuthorityURL_;
  }

  Layer::AuthorityURL_sequence& Layer::
  AuthorityURL ()
  {
    return this->AuthorityURL_;
  }

  void Layer::
  AuthorityURL (const AuthorityURL_sequence& s)
  {
    this->AuthorityURL_ = s;
  }

  const Layer::Identifier_sequence& Layer::
  Identifier () const
  {
    return this->Identifier_;
  }

  Layer::Identifier_sequence& Layer::
  Identifier ()
  {
    return this->Identifier_;
  }

  void Layer::
  Identifier (const Identifier_sequence& s)
  {
    this->Identifier_ = s;
  }

  const Layer::MetadataURL_sequence& Layer::
  MetadataURL () const
  {
    return this->MetadataURL_;
  }

  Layer::MetadataURL_sequence& Layer::
  MetadataURL ()
  {
    return this->MetadataURL_;
  }

  void Layer::
  MetadataURL (const MetadataURL_sequence& s)
  {
    this->MetadataURL_ = s;
  }

  const Layer::DataURL_sequence& Layer::
  DataURL () const
  {
    return this->DataURL_;
  }

  Layer::DataURL_sequence& Layer::
  DataURL ()
  {
    return this->DataURL_;
  }

  void Layer::
  DataURL (const DataURL_sequence& s)
  {
    this->DataURL_ = s;
  }

  const Layer::FeatureListURL_sequence& Layer::
  FeatureListURL () const
  {
    return this->FeatureListURL_;
  }

  Layer::FeatureListURL_sequence& Layer::
  FeatureListURL ()
  {
    return this->FeatureListURL_;
  }

  void Layer::
  FeatureListURL (const FeatureListURL_sequence& s)
  {
    this->FeatureListURL_ = s;
  }

  const Layer::Style_sequence& Layer::
  Style () const
  {
    return this->Style_;
  }

  Layer::Style_sequence& Layer::
  Style ()
  {
    return this->Style_;
  }

  void Layer::
  Style (const Style_sequence& s)
  {
    this->Style_ = s;
  }

  const Layer::MinScaleDenominator_optional& Layer::
  MinScaleDenominator () const
  {
    return this->MinScaleDenominator_;
  }

  Layer::MinScaleDenominator_optional& Layer::
  MinScaleDenominator ()
  {
    return this->MinScaleDenominator_;
  }

  void Layer::
  MinScaleDenominator (const MinScaleDenominator_type& x)
  {
    this->MinScaleDenominator_.set (x);
  }

  void Layer::
  MinScaleDenominator (const MinScaleDenominator_optional& x)
  {
    this->MinScaleDenominator_ = x;
  }

  const Layer::MaxScaleDenominator_optional& Layer::
  MaxScaleDenominator () const
  {
    return this->MaxScaleDenominator_;
  }

  Layer::MaxScaleDenominator_optional& Layer::
  MaxScaleDenominator ()
  {
    return this->MaxScaleDenominator_;
  }

  void Layer::
  MaxScaleDenominator (const MaxScaleDenominator_type& x)
  {
    this->MaxScaleDenominator_.set (x);
  }

  void Layer::
  MaxScaleDenominator (const MaxScaleDenominator_optional& x)
  {
    this->MaxScaleDenominator_ = x;
  }

  const Layer::Layer1_sequence& Layer::
  Layer1 () const
  {
    return this->Layer1_;
  }

  Layer::Layer1_sequence& Layer::
  Layer1 ()
  {
    return this->Layer1_;
  }

  void Layer::
  Layer1 (const Layer1_sequence& s)
  {
    this->Layer1_ = s;
  }

  const Layer::queryable_type& Layer::
  queryable () const
  {
    return this->queryable_.get ();
  }

  Layer::queryable_type& Layer::
  queryable ()
  {
    return this->queryable_.get ();
  }

  void Layer::
  queryable (const queryable_type& x)
  {
    this->queryable_.set (x);
  }

  const Layer::queryable_type& Layer::
  queryable_default_value ()
  {
    return queryable_default_value_;
  }

  const Layer::cascaded_optional& Layer::
  cascaded () const
  {
    return this->cascaded_;
  }

  Layer::cascaded_optional& Layer::
  cascaded ()
  {
    return this->cascaded_;
  }

  void Layer::
  cascaded (const cascaded_type& x)
  {
    this->cascaded_.set (x);
  }

  void Layer::
  cascaded (const cascaded_optional& x)
  {
    this->cascaded_ = x;
  }

  const Layer::opaque_type& Layer::
  opaque () const
  {
    return this->opaque_.get ();
  }

  Layer::opaque_type& Layer::
  opaque ()
  {
    return this->opaque_.get ();
  }

  void Layer::
  opaque (const opaque_type& x)
  {
    this->opaque_.set (x);
  }

  const Layer::opaque_type& Layer::
  opaque_default_value ()
  {
    return opaque_default_value_;
  }

  const Layer::noSubsets_type& Layer::
  noSubsets () const
  {
    return this->noSubsets_.get ();
  }

  Layer::noSubsets_type& Layer::
  noSubsets ()
  {
    return this->noSubsets_.get ();
  }

  void Layer::
  noSubsets (const noSubsets_type& x)
  {
    this->noSubsets_.set (x);
  }

  const Layer::noSubsets_type& Layer::
  noSubsets_default_value ()
  {
    return noSubsets_default_value_;
  }

  const Layer::fixedWidth_optional& Layer::
  fixedWidth () const
  {
    return this->fixedWidth_;
  }

  Layer::fixedWidth_optional& Layer::
  fixedWidth ()
  {
    return this->fixedWidth_;
  }

  void Layer::
  fixedWidth (const fixedWidth_type& x)
  {
    this->fixedWidth_.set (x);
  }

  void Layer::
  fixedWidth (const fixedWidth_optional& x)
  {
    this->fixedWidth_ = x;
  }

  const Layer::fixedHeight_optional& Layer::
  fixedHeight () const
  {
    return this->fixedHeight_;
  }

  Layer::fixedHeight_optional& Layer::
  fixedHeight ()
  {
    return this->fixedHeight_;
  }

  void Layer::
  fixedHeight (const fixedHeight_type& x)
  {
    this->fixedHeight_.set (x);
  }

  void Layer::
  fixedHeight (const fixedHeight_optional& x)
  {
    this->fixedHeight_ = x;
  }


  // EX_GeographicBoundingBox
  //

  const EX_GeographicBoundingBox::westBoundLongitude_type& EX_GeographicBoundingBox::
  westBoundLongitude () const
  {
    return this->westBoundLongitude_.get ();
  }

  EX_GeographicBoundingBox::westBoundLongitude_type& EX_GeographicBoundingBox::
  westBoundLongitude ()
  {
    return this->westBoundLongitude_.get ();
  }

  void EX_GeographicBoundingBox::
  westBoundLongitude (const westBoundLongitude_type& x)
  {
    this->westBoundLongitude_.set (x);
  }

  void EX_GeographicBoundingBox::
  westBoundLongitude (::std::auto_ptr< westBoundLongitude_type > x)
  {
    this->westBoundLongitude_.set (x);
  }

  const EX_GeographicBoundingBox::eastBoundLongitude_type& EX_GeographicBoundingBox::
  eastBoundLongitude () const
  {
    return this->eastBoundLongitude_.get ();
  }

  EX_GeographicBoundingBox::eastBoundLongitude_type& EX_GeographicBoundingBox::
  eastBoundLongitude ()
  {
    return this->eastBoundLongitude_.get ();
  }

  void EX_GeographicBoundingBox::
  eastBoundLongitude (const eastBoundLongitude_type& x)
  {
    this->eastBoundLongitude_.set (x);
  }

  void EX_GeographicBoundingBox::
  eastBoundLongitude (::std::auto_ptr< eastBoundLongitude_type > x)
  {
    this->eastBoundLongitude_.set (x);
  }

  const EX_GeographicBoundingBox::southBoundLatitude_type& EX_GeographicBoundingBox::
  southBoundLatitude () const
  {
    return this->southBoundLatitude_.get ();
  }

  EX_GeographicBoundingBox::southBoundLatitude_type& EX_GeographicBoundingBox::
  southBoundLatitude ()
  {
    return this->southBoundLatitude_.get ();
  }

  void EX_GeographicBoundingBox::
  southBoundLatitude (const southBoundLatitude_type& x)
  {
    this->southBoundLatitude_.set (x);
  }

  void EX_GeographicBoundingBox::
  southBoundLatitude (::std::auto_ptr< southBoundLatitude_type > x)
  {
    this->southBoundLatitude_.set (x);
  }

  const EX_GeographicBoundingBox::northBoundLatitude_type& EX_GeographicBoundingBox::
  northBoundLatitude () const
  {
    return this->northBoundLatitude_.get ();
  }

  EX_GeographicBoundingBox::northBoundLatitude_type& EX_GeographicBoundingBox::
  northBoundLatitude ()
  {
    return this->northBoundLatitude_.get ();
  }

  void EX_GeographicBoundingBox::
  northBoundLatitude (const northBoundLatitude_type& x)
  {
    this->northBoundLatitude_.set (x);
  }

  void EX_GeographicBoundingBox::
  northBoundLatitude (::std::auto_ptr< northBoundLatitude_type > x)
  {
    this->northBoundLatitude_.set (x);
  }


  // BoundingBox
  //

  const BoundingBox::CRS_type& BoundingBox::
  CRS () const
  {
    return this->CRS_.get ();
  }

  BoundingBox::CRS_type& BoundingBox::
  CRS ()
  {
    return this->CRS_.get ();
  }

  void BoundingBox::
  CRS (const CRS_type& x)
  {
    this->CRS_.set (x);
  }

  void BoundingBox::
  CRS (::std::auto_ptr< CRS_type > x)
  {
    this->CRS_.set (x);
  }

  const BoundingBox::minx_type& BoundingBox::
  minx () const
  {
    return this->minx_.get ();
  }

  BoundingBox::minx_type& BoundingBox::
  minx ()
  {
    return this->minx_.get ();
  }

  void BoundingBox::
  minx (const minx_type& x)
  {
    this->minx_.set (x);
  }

  const BoundingBox::miny_type& BoundingBox::
  miny () const
  {
    return this->miny_.get ();
  }

  BoundingBox::miny_type& BoundingBox::
  miny ()
  {
    return this->miny_.get ();
  }

  void BoundingBox::
  miny (const miny_type& x)
  {
    this->miny_.set (x);
  }

  const BoundingBox::maxx_type& BoundingBox::
  maxx () const
  {
    return this->maxx_.get ();
  }

  BoundingBox::maxx_type& BoundingBox::
  maxx ()
  {
    return this->maxx_.get ();
  }

  void BoundingBox::
  maxx (const maxx_type& x)
  {
    this->maxx_.set (x);
  }

  const BoundingBox::maxy_type& BoundingBox::
  maxy () const
  {
    return this->maxy_.get ();
  }

  BoundingBox::maxy_type& BoundingBox::
  maxy ()
  {
    return this->maxy_.get ();
  }

  void BoundingBox::
  maxy (const maxy_type& x)
  {
    this->maxy_.set (x);
  }

  const BoundingBox::resx_optional& BoundingBox::
  resx () const
  {
    return this->resx_;
  }

  BoundingBox::resx_optional& BoundingBox::
  resx ()
  {
    return this->resx_;
  }

  void BoundingBox::
  resx (const resx_type& x)
  {
    this->resx_.set (x);
  }

  void BoundingBox::
  resx (const resx_optional& x)
  {
    this->resx_ = x;
  }

  const BoundingBox::resy_optional& BoundingBox::
  resy () const
  {
    return this->resy_;
  }

  BoundingBox::resy_optional& BoundingBox::
  resy ()
  {
    return this->resy_;
  }

  void BoundingBox::
  resy (const resy_type& x)
  {
    this->resy_.set (x);
  }

  void BoundingBox::
  resy (const resy_optional& x)
  {
    this->resy_ = x;
  }


  // Dimension
  //

  const Dimension::name_type& Dimension::
  name () const
  {
    return this->name_.get ();
  }

  Dimension::name_type& Dimension::
  name ()
  {
    return this->name_.get ();
  }

  void Dimension::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void Dimension::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const Dimension::units_type& Dimension::
  units () const
  {
    return this->units_.get ();
  }

  Dimension::units_type& Dimension::
  units ()
  {
    return this->units_.get ();
  }

  void Dimension::
  units (const units_type& x)
  {
    this->units_.set (x);
  }

  void Dimension::
  units (::std::auto_ptr< units_type > x)
  {
    this->units_.set (x);
  }

  const Dimension::unitSymbol_optional& Dimension::
  unitSymbol () const
  {
    return this->unitSymbol_;
  }

  Dimension::unitSymbol_optional& Dimension::
  unitSymbol ()
  {
    return this->unitSymbol_;
  }

  void Dimension::
  unitSymbol (const unitSymbol_type& x)
  {
    this->unitSymbol_.set (x);
  }

  void Dimension::
  unitSymbol (const unitSymbol_optional& x)
  {
    this->unitSymbol_ = x;
  }

  void Dimension::
  unitSymbol (::std::auto_ptr< unitSymbol_type > x)
  {
    this->unitSymbol_.set (x);
  }

  const Dimension::default_optional& Dimension::
  default_ () const
  {
    return this->default__;
  }

  Dimension::default_optional& Dimension::
  default_ ()
  {
    return this->default__;
  }

  void Dimension::
  default_ (const default_type& x)
  {
    this->default__.set (x);
  }

  void Dimension::
  default_ (const default_optional& x)
  {
    this->default__ = x;
  }

  void Dimension::
  default_ (::std::auto_ptr< default_type > x)
  {
    this->default__.set (x);
  }

  const Dimension::multipleValues_optional& Dimension::
  multipleValues () const
  {
    return this->multipleValues_;
  }

  Dimension::multipleValues_optional& Dimension::
  multipleValues ()
  {
    return this->multipleValues_;
  }

  void Dimension::
  multipleValues (const multipleValues_type& x)
  {
    this->multipleValues_.set (x);
  }

  void Dimension::
  multipleValues (const multipleValues_optional& x)
  {
    this->multipleValues_ = x;
  }

  const Dimension::nearestValue_optional& Dimension::
  nearestValue () const
  {
    return this->nearestValue_;
  }

  Dimension::nearestValue_optional& Dimension::
  nearestValue ()
  {
    return this->nearestValue_;
  }

  void Dimension::
  nearestValue (const nearestValue_type& x)
  {
    this->nearestValue_.set (x);
  }

  void Dimension::
  nearestValue (const nearestValue_optional& x)
  {
    this->nearestValue_ = x;
  }

  const Dimension::current_optional& Dimension::
  current () const
  {
    return this->current_;
  }

  Dimension::current_optional& Dimension::
  current ()
  {
    return this->current_;
  }

  void Dimension::
  current (const current_type& x)
  {
    this->current_.set (x);
  }

  void Dimension::
  current (const current_optional& x)
  {
    this->current_ = x;
  }


  // Attribution
  //

  const Attribution::Title_optional& Attribution::
  Title () const
  {
    return this->Title_;
  }

  Attribution::Title_optional& Attribution::
  Title ()
  {
    return this->Title_;
  }

  void Attribution::
  Title (const Title_type& x)
  {
    this->Title_.set (x);
  }

  void Attribution::
  Title (const Title_optional& x)
  {
    this->Title_ = x;
  }

  void Attribution::
  Title (::std::auto_ptr< Title_type > x)
  {
    this->Title_.set (x);
  }

  const Attribution::OnlineResource_optional& Attribution::
  OnlineResource () const
  {
    return this->OnlineResource_;
  }

  Attribution::OnlineResource_optional& Attribution::
  OnlineResource ()
  {
    return this->OnlineResource_;
  }

  void Attribution::
  OnlineResource (const OnlineResource_type& x)
  {
    this->OnlineResource_.set (x);
  }

  void Attribution::
  OnlineResource (const OnlineResource_optional& x)
  {
    this->OnlineResource_ = x;
  }

  void Attribution::
  OnlineResource (::std::auto_ptr< OnlineResource_type > x)
  {
    this->OnlineResource_.set (x);
  }

  const Attribution::LogoURL_optional& Attribution::
  LogoURL () const
  {
    return this->LogoURL_;
  }

  Attribution::LogoURL_optional& Attribution::
  LogoURL ()
  {
    return this->LogoURL_;
  }

  void Attribution::
  LogoURL (const LogoURL_type& x)
  {
    this->LogoURL_.set (x);
  }

  void Attribution::
  LogoURL (const LogoURL_optional& x)
  {
    this->LogoURL_ = x;
  }

  void Attribution::
  LogoURL (::std::auto_ptr< LogoURL_type > x)
  {
    this->LogoURL_.set (x);
  }


  // LogoURL
  //

  const LogoURL::Format_type& LogoURL::
  Format () const
  {
    return this->Format_.get ();
  }

  LogoURL::Format_type& LogoURL::
  Format ()
  {
    return this->Format_.get ();
  }

  void LogoURL::
  Format (const Format_type& x)
  {
    this->Format_.set (x);
  }

  void LogoURL::
  Format (::std::auto_ptr< Format_type > x)
  {
    this->Format_.set (x);
  }

  const LogoURL::OnlineResource_type& LogoURL::
  OnlineResource () const
  {
    return this->OnlineResource_.get ();
  }

  LogoURL::OnlineResource_type& LogoURL::
  OnlineResource ()
  {
    return this->OnlineResource_.get ();
  }

  void LogoURL::
  OnlineResource (const OnlineResource_type& x)
  {
    this->OnlineResource_.set (x);
  }

  void LogoURL::
  OnlineResource (::std::auto_ptr< OnlineResource_type > x)
  {
    this->OnlineResource_.set (x);
  }

  const LogoURL::width_optional& LogoURL::
  width () const
  {
    return this->width_;
  }

  LogoURL::width_optional& LogoURL::
  width ()
  {
    return this->width_;
  }

  void LogoURL::
  width (const width_type& x)
  {
    this->width_.set (x);
  }

  void LogoURL::
  width (const width_optional& x)
  {
    this->width_ = x;
  }

  const LogoURL::height_optional& LogoURL::
  height () const
  {
    return this->height_;
  }

  LogoURL::height_optional& LogoURL::
  height ()
  {
    return this->height_;
  }

  void LogoURL::
  height (const height_type& x)
  {
    this->height_.set (x);
  }

  void LogoURL::
  height (const height_optional& x)
  {
    this->height_ = x;
  }


  // MetadataURL
  //

  const MetadataURL::Format_type& MetadataURL::
  Format () const
  {
    return this->Format_.get ();
  }

  MetadataURL::Format_type& MetadataURL::
  Format ()
  {
    return this->Format_.get ();
  }

  void MetadataURL::
  Format (const Format_type& x)
  {
    this->Format_.set (x);
  }

  void MetadataURL::
  Format (::std::auto_ptr< Format_type > x)
  {
    this->Format_.set (x);
  }

  const MetadataURL::OnlineResource_type& MetadataURL::
  OnlineResource () const
  {
    return this->OnlineResource_.get ();
  }

  MetadataURL::OnlineResource_type& MetadataURL::
  OnlineResource ()
  {
    return this->OnlineResource_.get ();
  }

  void MetadataURL::
  OnlineResource (const OnlineResource_type& x)
  {
    this->OnlineResource_.set (x);
  }

  void MetadataURL::
  OnlineResource (::std::auto_ptr< OnlineResource_type > x)
  {
    this->OnlineResource_.set (x);
  }

  const MetadataURL::type_type& MetadataURL::
  type () const
  {
    return this->type_.get ();
  }

  MetadataURL::type_type& MetadataURL::
  type ()
  {
    return this->type_.get ();
  }

  void MetadataURL::
  type (const type_type& x)
  {
    this->type_.set (x);
  }

  void MetadataURL::
  type (::std::auto_ptr< type_type > x)
  {
    this->type_.set (x);
  }


  // AuthorityURL
  //

  const AuthorityURL::OnlineResource_type& AuthorityURL::
  OnlineResource () const
  {
    return this->OnlineResource_.get ();
  }

  AuthorityURL::OnlineResource_type& AuthorityURL::
  OnlineResource ()
  {
    return this->OnlineResource_.get ();
  }

  void AuthorityURL::
  OnlineResource (const OnlineResource_type& x)
  {
    this->OnlineResource_.set (x);
  }

  void AuthorityURL::
  OnlineResource (::std::auto_ptr< OnlineResource_type > x)
  {
    this->OnlineResource_.set (x);
  }

  const AuthorityURL::name_type& AuthorityURL::
  name () const
  {
    return this->name_.get ();
  }

  AuthorityURL::name_type& AuthorityURL::
  name ()
  {
    return this->name_.get ();
  }

  void AuthorityURL::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void AuthorityURL::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }


  // Identifier
  //

  const Identifier::authority_type& Identifier::
  authority () const
  {
    return this->authority_.get ();
  }

  Identifier::authority_type& Identifier::
  authority ()
  {
    return this->authority_.get ();
  }

  void Identifier::
  authority (const authority_type& x)
  {
    this->authority_.set (x);
  }

  void Identifier::
  authority (::std::auto_ptr< authority_type > x)
  {
    this->authority_.set (x);
  }


  // DataURL
  //

  const DataURL::Format_type& DataURL::
  Format () const
  {
    return this->Format_.get ();
  }

  DataURL::Format_type& DataURL::
  Format ()
  {
    return this->Format_.get ();
  }

  void DataURL::
  Format (const Format_type& x)
  {
    this->Format_.set (x);
  }

  void DataURL::
  Format (::std::auto_ptr< Format_type > x)
  {
    this->Format_.set (x);
  }

  const DataURL::OnlineResource_type& DataURL::
  OnlineResource () const
  {
    return this->OnlineResource_.get ();
  }

  DataURL::OnlineResource_type& DataURL::
  OnlineResource ()
  {
    return this->OnlineResource_.get ();
  }

  void DataURL::
  OnlineResource (const OnlineResource_type& x)
  {
    this->OnlineResource_.set (x);
  }

  void DataURL::
  OnlineResource (::std::auto_ptr< OnlineResource_type > x)
  {
    this->OnlineResource_.set (x);
  }


  // FeatureListURL
  //

  const FeatureListURL::Format_type& FeatureListURL::
  Format () const
  {
    return this->Format_.get ();
  }

  FeatureListURL::Format_type& FeatureListURL::
  Format ()
  {
    return this->Format_.get ();
  }

  void FeatureListURL::
  Format (const Format_type& x)
  {
    this->Format_.set (x);
  }

  void FeatureListURL::
  Format (::std::auto_ptr< Format_type > x)
  {
    this->Format_.set (x);
  }

  const FeatureListURL::OnlineResource_type& FeatureListURL::
  OnlineResource () const
  {
    return this->OnlineResource_.get ();
  }

  FeatureListURL::OnlineResource_type& FeatureListURL::
  OnlineResource ()
  {
    return this->OnlineResource_.get ();
  }

  void FeatureListURL::
  OnlineResource (const OnlineResource_type& x)
  {
    this->OnlineResource_.set (x);
  }

  void FeatureListURL::
  OnlineResource (::std::auto_ptr< OnlineResource_type > x)
  {
    this->OnlineResource_.set (x);
  }


  // Style
  //

  const Style::Name_type& Style::
  Name () const
  {
    return this->Name_.get ();
  }

  Style::Name_type& Style::
  Name ()
  {
    return this->Name_.get ();
  }

  void Style::
  Name (const Name_type& x)
  {
    this->Name_.set (x);
  }

  void Style::
  Name (::std::auto_ptr< Name_type > x)
  {
    this->Name_.set (x);
  }

  const Style::Title_type& Style::
  Title () const
  {
    return this->Title_.get ();
  }

  Style::Title_type& Style::
  Title ()
  {
    return this->Title_.get ();
  }

  void Style::
  Title (const Title_type& x)
  {
    this->Title_.set (x);
  }

  void Style::
  Title (::std::auto_ptr< Title_type > x)
  {
    this->Title_.set (x);
  }

  const Style::Abstract_optional& Style::
  Abstract () const
  {
    return this->Abstract_;
  }

  Style::Abstract_optional& Style::
  Abstract ()
  {
    return this->Abstract_;
  }

  void Style::
  Abstract (const Abstract_type& x)
  {
    this->Abstract_.set (x);
  }

  void Style::
  Abstract (const Abstract_optional& x)
  {
    this->Abstract_ = x;
  }

  void Style::
  Abstract (::std::auto_ptr< Abstract_type > x)
  {
    this->Abstract_.set (x);
  }

  const Style::LegendURL_sequence& Style::
  LegendURL () const
  {
    return this->LegendURL_;
  }

  Style::LegendURL_sequence& Style::
  LegendURL ()
  {
    return this->LegendURL_;
  }

  void Style::
  LegendURL (const LegendURL_sequence& s)
  {
    this->LegendURL_ = s;
  }

  const Style::StyleSheetURL_optional& Style::
  StyleSheetURL () const
  {
    return this->StyleSheetURL_;
  }

  Style::StyleSheetURL_optional& Style::
  StyleSheetURL ()
  {
    return this->StyleSheetURL_;
  }

  void Style::
  StyleSheetURL (const StyleSheetURL_type& x)
  {
    this->StyleSheetURL_.set (x);
  }

  void Style::
  StyleSheetURL (const StyleSheetURL_optional& x)
  {
    this->StyleSheetURL_ = x;
  }

  void Style::
  StyleSheetURL (::std::auto_ptr< StyleSheetURL_type > x)
  {
    this->StyleSheetURL_.set (x);
  }

  const Style::StyleURL_optional& Style::
  StyleURL () const
  {
    return this->StyleURL_;
  }

  Style::StyleURL_optional& Style::
  StyleURL ()
  {
    return this->StyleURL_;
  }

  void Style::
  StyleURL (const StyleURL_type& x)
  {
    this->StyleURL_.set (x);
  }

  void Style::
  StyleURL (const StyleURL_optional& x)
  {
    this->StyleURL_ = x;
  }

  void Style::
  StyleURL (::std::auto_ptr< StyleURL_type > x)
  {
    this->StyleURL_.set (x);
  }


  // LegendURL
  //

  const LegendURL::Format_type& LegendURL::
  Format () const
  {
    return this->Format_.get ();
  }

  LegendURL::Format_type& LegendURL::
  Format ()
  {
    return this->Format_.get ();
  }

  void LegendURL::
  Format (const Format_type& x)
  {
    this->Format_.set (x);
  }

  void LegendURL::
  Format (::std::auto_ptr< Format_type > x)
  {
    this->Format_.set (x);
  }

  const LegendURL::OnlineResource_type& LegendURL::
  OnlineResource () const
  {
    return this->OnlineResource_.get ();
  }

  LegendURL::OnlineResource_type& LegendURL::
  OnlineResource ()
  {
    return this->OnlineResource_.get ();
  }

  void LegendURL::
  OnlineResource (const OnlineResource_type& x)
  {
    this->OnlineResource_.set (x);
  }

  void LegendURL::
  OnlineResource (::std::auto_ptr< OnlineResource_type > x)
  {
    this->OnlineResource_.set (x);
  }

  const LegendURL::width_optional& LegendURL::
  width () const
  {
    return this->width_;
  }

  LegendURL::width_optional& LegendURL::
  width ()
  {
    return this->width_;
  }

  void LegendURL::
  width (const width_type& x)
  {
    this->width_.set (x);
  }

  void LegendURL::
  width (const width_optional& x)
  {
    this->width_ = x;
  }

  const LegendURL::height_optional& LegendURL::
  height () const
  {
    return this->height_;
  }

  LegendURL::height_optional& LegendURL::
  height ()
  {
    return this->height_;
  }

  void LegendURL::
  height (const height_type& x)
  {
    this->height_.set (x);
  }

  void LegendURL::
  height (const height_optional& x)
  {
    this->height_ = x;
  }


  // StyleSheetURL
  //

  const StyleSheetURL::Format_type& StyleSheetURL::
  Format () const
  {
    return this->Format_.get ();
  }

  StyleSheetURL::Format_type& StyleSheetURL::
  Format ()
  {
    return this->Format_.get ();
  }

  void StyleSheetURL::
  Format (const Format_type& x)
  {
    this->Format_.set (x);
  }

  void StyleSheetURL::
  Format (::std::auto_ptr< Format_type > x)
  {
    this->Format_.set (x);
  }

  const StyleSheetURL::OnlineResource_type& StyleSheetURL::
  OnlineResource () const
  {
    return this->OnlineResource_.get ();
  }

  StyleSheetURL::OnlineResource_type& StyleSheetURL::
  OnlineResource ()
  {
    return this->OnlineResource_.get ();
  }

  void StyleSheetURL::
  OnlineResource (const OnlineResource_type& x)
  {
    this->OnlineResource_.set (x);
  }

  void StyleSheetURL::
  OnlineResource (::std::auto_ptr< OnlineResource_type > x)
  {
    this->OnlineResource_.set (x);
  }


  // StyleURL
  //

  const StyleURL::Format_type& StyleURL::
  Format () const
  {
    return this->Format_.get ();
  }

  StyleURL::Format_type& StyleURL::
  Format ()
  {
    return this->Format_.get ();
  }

  void StyleURL::
  Format (const Format_type& x)
  {
    this->Format_.set (x);
  }

  void StyleURL::
  Format (::std::auto_ptr< Format_type > x)
  {
    this->Format_.set (x);
  }

  const StyleURL::OnlineResource_type& StyleURL::
  OnlineResource () const
  {
    return this->OnlineResource_.get ();
  }

  StyleURL::OnlineResource_type& StyleURL::
  OnlineResource ()
  {
    return this->OnlineResource_.get ();
  }

  void StyleURL::
  OnlineResource (const OnlineResource_type& x)
  {
    this->OnlineResource_.set (x);
  }

  void StyleURL::
  OnlineResource (::std::auto_ptr< OnlineResource_type > x)
  {
    this->OnlineResource_.set (x);
  }


  // Name
  //

  Name::
  Name (value v)
  : ::xml_schema::string (_xsd_Name_literals_[v])
  {
  }

  Name::
  Name (const char* v)
  : ::xml_schema::string (v)
  {
  }

  Name::
  Name (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  Name::
  Name (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  Name::
  Name (const Name& v,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  Name& Name::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) =
    ::xml_schema::string (_xsd_Name_literals_[v]);

    return *this;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace wms
{
  // OperationType
  //

  OperationType::
  OperationType ()
  : ::xml_schema::type (),
    Format_ (::xml_schema::flags (), this),
    DCPType_ (::xml_schema::flags (), this)
  {
  }

  OperationType::
  OperationType (const OperationType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Format_ (x.Format_, f, this),
    DCPType_ (x.DCPType_, f, this)
  {
  }

  OperationType::
  OperationType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Format_ (f, this),
    DCPType_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void OperationType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Format
      //
      if (n.name () == "Format" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Format_type > r (
          Format_traits::create (i, f, this));

        this->Format_.push_back (r);
        continue;
      }

      // DCPType
      //
      if (n.name () == "DCPType" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< DCPType_type > r (
          DCPType_traits::create (i, f, this));

        this->DCPType_.push_back (r);
        continue;
      }

      break;
    }
  }

  OperationType* OperationType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OperationType (*this, f, c);
  }

  OperationType::
  ~OperationType ()
  {
  }

  // longitudeType
  //

  longitudeType::
  longitudeType (const ::xml_schema::double_& _xsd_double__base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (_xsd_double__base)
  {
  }

  longitudeType::
  longitudeType (const longitudeType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (x, f, c)
  {
  }

  longitudeType::
  longitudeType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (e, f, c)
  {
  }

  longitudeType::
  longitudeType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (a, f, c)
  {
  }

  longitudeType::
  longitudeType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (s, e, f, c)
  {
  }

  longitudeType* longitudeType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class longitudeType (*this, f, c);
  }

  longitudeType::
  ~longitudeType ()
  {
  }

  // latitudeType
  //

  latitudeType::
  latitudeType (const ::xml_schema::double_& _xsd_double__base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (_xsd_double__base)
  {
  }

  latitudeType::
  latitudeType (const latitudeType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (x, f, c)
  {
  }

  latitudeType::
  latitudeType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (e, f, c)
  {
  }

  latitudeType::
  latitudeType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (a, f, c)
  {
  }

  latitudeType::
  latitudeType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (s, e, f, c)
  {
  }

  latitudeType* latitudeType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class latitudeType (*this, f, c);
  }

  latitudeType::
  ~latitudeType ()
  {
  }

  // WMS_Capabilities
  //

  const WMS_Capabilities::version_type WMS_Capabilities::version_default_value_ (
    ::std::string ("1.3.0"), 0, 0, 0);

  WMS_Capabilities::
  WMS_Capabilities (const Service_type& Service,
                    const Capability_type& Capability)
  : ::xml_schema::type (),
    Service_ (Service, ::xml_schema::flags (), this),
    Capability_ (Capability, ::xml_schema::flags (), this),
    version_ (version_default_value (), ::xml_schema::flags (), this),
    updateSequence_ (::xml_schema::flags (), this)
  {
  }

  WMS_Capabilities::
  WMS_Capabilities (::std::auto_ptr< Service_type >& Service,
                    ::std::auto_ptr< Capability_type >& Capability)
  : ::xml_schema::type (),
    Service_ (Service, ::xml_schema::flags (), this),
    Capability_ (Capability, ::xml_schema::flags (), this),
    version_ (version_default_value (), ::xml_schema::flags (), this),
    updateSequence_ (::xml_schema::flags (), this)
  {
  }

  WMS_Capabilities::
  WMS_Capabilities (const WMS_Capabilities& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Service_ (x.Service_, f, this),
    Capability_ (x.Capability_, f, this),
    version_ (x.version_, f, this),
    updateSequence_ (x.updateSequence_, f, this)
  {
  }

  WMS_Capabilities::
  WMS_Capabilities (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Service_ (f, this),
    Capability_ (f, this),
    version_ (f, this),
    updateSequence_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void WMS_Capabilities::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Service
      //
      if (n.name () == "Service" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Service_type > r (
          Service_traits::create (i, f, this));

        if (!Service_.present ())
        {
          this->Service_.set (r);
          continue;
        }
      }

      // Capability
      //
      if (n.name () == "Capability" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Capability_type > r (
          Capability_traits::create (i, f, this));

        if (!Capability_.present ())
        {
          this->Capability_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Service_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Service",
        "http://www.opengis.net/wms");
    }

    if (!Capability_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Capability",
        "http://www.opengis.net/wms");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "version" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< version_type > r (
          version_traits::create (i, f, this));

        this->version_.set (r);
        continue;
      }

      if (n.name () == "updateSequence" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< updateSequence_type > r (
          updateSequence_traits::create (i, f, this));

        this->updateSequence_.set (r);
        continue;
      }
    }

    if (!version_.present ())
    {
      this->version_.set (version_default_value ());
    }
  }

  WMS_Capabilities* WMS_Capabilities::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class WMS_Capabilities (*this, f, c);
  }

  WMS_Capabilities::
  ~WMS_Capabilities ()
  {
  }

  // KeywordList
  //

  KeywordList::
  KeywordList ()
  : ::xml_schema::type (),
    Keyword_ (::xml_schema::flags (), this)
  {
  }

  KeywordList::
  KeywordList (const KeywordList& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Keyword_ (x.Keyword_, f, this)
  {
  }

  KeywordList::
  KeywordList (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Keyword_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void KeywordList::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Keyword
      //
      if (n.name () == "Keyword" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Keyword_type > r (
          Keyword_traits::create (i, f, this));

        this->Keyword_.push_back (r);
        continue;
      }

      break;
    }
  }

  KeywordList* KeywordList::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class KeywordList (*this, f, c);
  }

  KeywordList::
  ~KeywordList ()
  {
  }

  // Keyword
  //

  Keyword::
  Keyword ()
  : ::xml_schema::string (),
    vocabulary_ (::xml_schema::flags (), this)
  {
  }

  Keyword::
  Keyword (const char* _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base),
    vocabulary_ (::xml_schema::flags (), this)
  {
  }

  Keyword::
  Keyword (const ::std::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base),
    vocabulary_ (::xml_schema::flags (), this)
  {
  }

  Keyword::
  Keyword (const ::xml_schema::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base),
    vocabulary_ (::xml_schema::flags (), this)
  {
  }

  Keyword::
  Keyword (const Keyword& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c),
    vocabulary_ (x.vocabulary_, f, this)
  {
  }

  Keyword::
  Keyword (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
    vocabulary_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void Keyword::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "vocabulary" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< vocabulary_type > r (
          vocabulary_traits::create (i, f, this));

        this->vocabulary_.set (r);
        continue;
      }
    }
  }

  Keyword* Keyword::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Keyword (*this, f, c);
  }

  Keyword::
  ~Keyword ()
  {
  }

  // OnlineResource
  //

  const OnlineResource::type_type OnlineResource::type_default_value_ (
    ::std::string ("simple"), 0, 0, 0);

  OnlineResource::
  OnlineResource ()
  : ::xml_schema::type (),
    type_ (type_default_value (), ::xml_schema::flags (), this),
    href_ (::xml_schema::flags (), this),
    role_ (::xml_schema::flags (), this),
    arcrole_ (::xml_schema::flags (), this),
    title_ (::xml_schema::flags (), this),
    show_ (::xml_schema::flags (), this),
    actuate_ (::xml_schema::flags (), this)
  {
  }

  OnlineResource::
  OnlineResource (const OnlineResource& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    type_ (x.type_, f, this),
    href_ (x.href_, f, this),
    role_ (x.role_, f, this),
    arcrole_ (x.arcrole_, f, this),
    title_ (x.title_, f, this),
    show_ (x.show_, f, this),
    actuate_ (x.actuate_, f, this)
  {
  }

  OnlineResource::
  OnlineResource (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    type_ (f, this),
    href_ (f, this),
    role_ (f, this),
    arcrole_ (f, this),
    title_ (f, this),
    show_ (f, this),
    actuate_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void OnlineResource::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/1999/xlink")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.set (r);
        continue;
      }

      if (n.name () == "href" && n.namespace_ () == "http://www.w3.org/1999/xlink")
      {
        ::std::auto_ptr< href_type > r (
          href_traits::create (i, f, this));

        this->href_.set (r);
        continue;
      }

      if (n.name () == "role" && n.namespace_ () == "http://www.w3.org/1999/xlink")
      {
        ::std::auto_ptr< role_type > r (
          role_traits::create (i, f, this));

        this->role_.set (r);
        continue;
      }

      if (n.name () == "arcrole" && n.namespace_ () == "http://www.w3.org/1999/xlink")
      {
        ::std::auto_ptr< arcrole_type > r (
          arcrole_traits::create (i, f, this));

        this->arcrole_.set (r);
        continue;
      }

      if (n.name () == "title" && n.namespace_ () == "http://www.w3.org/1999/xlink")
      {
        ::std::auto_ptr< title_type > r (
          title_traits::create (i, f, this));

        this->title_.set (r);
        continue;
      }

      if (n.name () == "show" && n.namespace_ () == "http://www.w3.org/1999/xlink")
      {
        ::std::auto_ptr< show_type > r (
          show_traits::create (i, f, this));

        this->show_.set (r);
        continue;
      }

      if (n.name () == "actuate" && n.namespace_ () == "http://www.w3.org/1999/xlink")
      {
        ::std::auto_ptr< actuate_type > r (
          actuate_traits::create (i, f, this));

        this->actuate_.set (r);
        continue;
      }
    }

    if (!type_.present ())
    {
      this->type_.set (type_default_value ());
    }
  }

  OnlineResource* OnlineResource::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class OnlineResource (*this, f, c);
  }

  OnlineResource::
  ~OnlineResource ()
  {
  }

  // Service
  //

  Service::
  Service (const Name_type& Name,
           const Title_type& Title,
           const OnlineResource_type& OnlineResource)
  : ::xml_schema::type (),
    Name_ (Name, ::xml_schema::flags (), this),
    Title_ (Title, ::xml_schema::flags (), this),
    Abstract_ (::xml_schema::flags (), this),
    KeywordList_ (::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this),
    ContactInformation_ (::xml_schema::flags (), this),
    Fees_ (::xml_schema::flags (), this),
    AccessConstraints_ (::xml_schema::flags (), this),
    LayerLimit_ (::xml_schema::flags (), this),
    MaxWidth_ (::xml_schema::flags (), this),
    MaxHeight_ (::xml_schema::flags (), this)
  {
  }

  Service::
  Service (const Name_type& Name,
           const Title_type& Title,
           ::std::auto_ptr< OnlineResource_type >& OnlineResource)
  : ::xml_schema::type (),
    Name_ (Name, ::xml_schema::flags (), this),
    Title_ (Title, ::xml_schema::flags (), this),
    Abstract_ (::xml_schema::flags (), this),
    KeywordList_ (::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this),
    ContactInformation_ (::xml_schema::flags (), this),
    Fees_ (::xml_schema::flags (), this),
    AccessConstraints_ (::xml_schema::flags (), this),
    LayerLimit_ (::xml_schema::flags (), this),
    MaxWidth_ (::xml_schema::flags (), this),
    MaxHeight_ (::xml_schema::flags (), this)
  {
  }

  Service::
  Service (const Service& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Name_ (x.Name_, f, this),
    Title_ (x.Title_, f, this),
    Abstract_ (x.Abstract_, f, this),
    KeywordList_ (x.KeywordList_, f, this),
    OnlineResource_ (x.OnlineResource_, f, this),
    ContactInformation_ (x.ContactInformation_, f, this),
    Fees_ (x.Fees_, f, this),
    AccessConstraints_ (x.AccessConstraints_, f, this),
    LayerLimit_ (x.LayerLimit_, f, this),
    MaxWidth_ (x.MaxWidth_, f, this),
    MaxHeight_ (x.MaxHeight_, f, this)
  {
  }

  Service::
  Service (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Name_ (f, this),
    Title_ (f, this),
    Abstract_ (f, this),
    KeywordList_ (f, this),
    OnlineResource_ (f, this),
    ContactInformation_ (f, this),
    Fees_ (f, this),
    AccessConstraints_ (f, this),
    LayerLimit_ (f, this),
    MaxWidth_ (f, this),
    MaxHeight_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Service::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Name
      //
      if (n.name () == "Name" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Name_type > r (
          Name_traits::create (i, f, this));

        if (!Name_.present ())
        {
          this->Name_.set (r);
          continue;
        }
      }

      // Title
      //
      if (n.name () == "Title" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Title_type > r (
          Title_traits::create (i, f, this));

        if (!Title_.present ())
        {
          this->Title_.set (r);
          continue;
        }
      }

      // Abstract
      //
      if (n.name () == "Abstract" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Abstract_type > r (
          Abstract_traits::create (i, f, this));

        if (!this->Abstract_)
        {
          this->Abstract_.set (r);
          continue;
        }
      }

      // KeywordList
      //
      if (n.name () == "KeywordList" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< KeywordList_type > r (
          KeywordList_traits::create (i, f, this));

        if (!this->KeywordList_)
        {
          this->KeywordList_.set (r);
          continue;
        }
      }

      // OnlineResource
      //
      if (n.name () == "OnlineResource" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< OnlineResource_type > r (
          OnlineResource_traits::create (i, f, this));

        if (!OnlineResource_.present ())
        {
          this->OnlineResource_.set (r);
          continue;
        }
      }

      // ContactInformation
      //
      if (n.name () == "ContactInformation" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< ContactInformation_type > r (
          ContactInformation_traits::create (i, f, this));

        if (!this->ContactInformation_)
        {
          this->ContactInformation_.set (r);
          continue;
        }
      }

      // Fees
      //
      if (n.name () == "Fees" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Fees_type > r (
          Fees_traits::create (i, f, this));

        if (!this->Fees_)
        {
          this->Fees_.set (r);
          continue;
        }
      }

      // AccessConstraints
      //
      if (n.name () == "AccessConstraints" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< AccessConstraints_type > r (
          AccessConstraints_traits::create (i, f, this));

        if (!this->AccessConstraints_)
        {
          this->AccessConstraints_.set (r);
          continue;
        }
      }

      // LayerLimit
      //
      if (n.name () == "LayerLimit" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        if (!this->LayerLimit_)
        {
          this->LayerLimit_.set (LayerLimit_traits::create (i, f, this));
          continue;
        }
      }

      // MaxWidth
      //
      if (n.name () == "MaxWidth" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        if (!this->MaxWidth_)
        {
          this->MaxWidth_.set (MaxWidth_traits::create (i, f, this));
          continue;
        }
      }

      // MaxHeight
      //
      if (n.name () == "MaxHeight" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        if (!this->MaxHeight_)
        {
          this->MaxHeight_.set (MaxHeight_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!Name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Name",
        "http://www.opengis.net/wms");
    }

    if (!Title_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Title",
        "http://www.opengis.net/wms");
    }

    if (!OnlineResource_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OnlineResource",
        "http://www.opengis.net/wms");
    }
  }

  Service* Service::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Service (*this, f, c);
  }

  Service::
  ~Service ()
  {
  }

  // ContactInformation
  //

  ContactInformation::
  ContactInformation ()
  : ::xml_schema::type (),
    ContactPersonPrimary_ (::xml_schema::flags (), this),
    ContactPosition_ (::xml_schema::flags (), this),
    ContactAddress_ (::xml_schema::flags (), this),
    ContactVoiceTelephone_ (::xml_schema::flags (), this),
    ContactFacsimileTelephone_ (::xml_schema::flags (), this),
    ContactElectronicMailAddress_ (::xml_schema::flags (), this)
  {
  }

  ContactInformation::
  ContactInformation (const ContactInformation& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    ContactPersonPrimary_ (x.ContactPersonPrimary_, f, this),
    ContactPosition_ (x.ContactPosition_, f, this),
    ContactAddress_ (x.ContactAddress_, f, this),
    ContactVoiceTelephone_ (x.ContactVoiceTelephone_, f, this),
    ContactFacsimileTelephone_ (x.ContactFacsimileTelephone_, f, this),
    ContactElectronicMailAddress_ (x.ContactElectronicMailAddress_, f, this)
  {
  }

  ContactInformation::
  ContactInformation (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    ContactPersonPrimary_ (f, this),
    ContactPosition_ (f, this),
    ContactAddress_ (f, this),
    ContactVoiceTelephone_ (f, this),
    ContactFacsimileTelephone_ (f, this),
    ContactElectronicMailAddress_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void ContactInformation::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ContactPersonPrimary
      //
      if (n.name () == "ContactPersonPrimary" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< ContactPersonPrimary_type > r (
          ContactPersonPrimary_traits::create (i, f, this));

        if (!this->ContactPersonPrimary_)
        {
          this->ContactPersonPrimary_.set (r);
          continue;
        }
      }

      // ContactPosition
      //
      if (n.name () == "ContactPosition" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< ContactPosition_type > r (
          ContactPosition_traits::create (i, f, this));

        if (!this->ContactPosition_)
        {
          this->ContactPosition_.set (r);
          continue;
        }
      }

      // ContactAddress
      //
      if (n.name () == "ContactAddress" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< ContactAddress_type > r (
          ContactAddress_traits::create (i, f, this));

        if (!this->ContactAddress_)
        {
          this->ContactAddress_.set (r);
          continue;
        }
      }

      // ContactVoiceTelephone
      //
      if (n.name () == "ContactVoiceTelephone" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< ContactVoiceTelephone_type > r (
          ContactVoiceTelephone_traits::create (i, f, this));

        if (!this->ContactVoiceTelephone_)
        {
          this->ContactVoiceTelephone_.set (r);
          continue;
        }
      }

      // ContactFacsimileTelephone
      //
      if (n.name () == "ContactFacsimileTelephone" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< ContactFacsimileTelephone_type > r (
          ContactFacsimileTelephone_traits::create (i, f, this));

        if (!this->ContactFacsimileTelephone_)
        {
          this->ContactFacsimileTelephone_.set (r);
          continue;
        }
      }

      // ContactElectronicMailAddress
      //
      if (n.name () == "ContactElectronicMailAddress" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< ContactElectronicMailAddress_type > r (
          ContactElectronicMailAddress_traits::create (i, f, this));

        if (!this->ContactElectronicMailAddress_)
        {
          this->ContactElectronicMailAddress_.set (r);
          continue;
        }
      }

      break;
    }
  }

  ContactInformation* ContactInformation::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ContactInformation (*this, f, c);
  }

  ContactInformation::
  ~ContactInformation ()
  {
  }

  // ContactPersonPrimary
  //

  ContactPersonPrimary::
  ContactPersonPrimary (const ContactPerson_type& ContactPerson,
                        const ContactOrganization_type& ContactOrganization)
  : ::xml_schema::type (),
    ContactPerson_ (ContactPerson, ::xml_schema::flags (), this),
    ContactOrganization_ (ContactOrganization, ::xml_schema::flags (), this)
  {
  }

  ContactPersonPrimary::
  ContactPersonPrimary (const ContactPersonPrimary& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    ContactPerson_ (x.ContactPerson_, f, this),
    ContactOrganization_ (x.ContactOrganization_, f, this)
  {
  }

  ContactPersonPrimary::
  ContactPersonPrimary (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    ContactPerson_ (f, this),
    ContactOrganization_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void ContactPersonPrimary::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ContactPerson
      //
      if (n.name () == "ContactPerson" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< ContactPerson_type > r (
          ContactPerson_traits::create (i, f, this));

        if (!ContactPerson_.present ())
        {
          this->ContactPerson_.set (r);
          continue;
        }
      }

      // ContactOrganization
      //
      if (n.name () == "ContactOrganization" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< ContactOrganization_type > r (
          ContactOrganization_traits::create (i, f, this));

        if (!ContactOrganization_.present ())
        {
          this->ContactOrganization_.set (r);
          continue;
        }
      }

      break;
    }

    if (!ContactPerson_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ContactPerson",
        "http://www.opengis.net/wms");
    }

    if (!ContactOrganization_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ContactOrganization",
        "http://www.opengis.net/wms");
    }
  }

  ContactPersonPrimary* ContactPersonPrimary::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ContactPersonPrimary (*this, f, c);
  }

  ContactPersonPrimary::
  ~ContactPersonPrimary ()
  {
  }

  // ContactAddress
  //

  ContactAddress::
  ContactAddress (const AddressType_type& AddressType,
                  const Address_type& Address,
                  const City_type& City,
                  const StateOrProvince_type& StateOrProvince,
                  const PostCode_type& PostCode,
                  const Country_type& Country)
  : ::xml_schema::type (),
    AddressType_ (AddressType, ::xml_schema::flags (), this),
    Address_ (Address, ::xml_schema::flags (), this),
    City_ (City, ::xml_schema::flags (), this),
    StateOrProvince_ (StateOrProvince, ::xml_schema::flags (), this),
    PostCode_ (PostCode, ::xml_schema::flags (), this),
    Country_ (Country, ::xml_schema::flags (), this)
  {
  }

  ContactAddress::
  ContactAddress (const ContactAddress& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    AddressType_ (x.AddressType_, f, this),
    Address_ (x.Address_, f, this),
    City_ (x.City_, f, this),
    StateOrProvince_ (x.StateOrProvince_, f, this),
    PostCode_ (x.PostCode_, f, this),
    Country_ (x.Country_, f, this)
  {
  }

  ContactAddress::
  ContactAddress (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    AddressType_ (f, this),
    Address_ (f, this),
    City_ (f, this),
    StateOrProvince_ (f, this),
    PostCode_ (f, this),
    Country_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void ContactAddress::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // AddressType
      //
      if (n.name () == "AddressType" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< AddressType_type > r (
          AddressType_traits::create (i, f, this));

        if (!AddressType_.present ())
        {
          this->AddressType_.set (r);
          continue;
        }
      }

      // Address
      //
      if (n.name () == "Address" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Address_type > r (
          Address_traits::create (i, f, this));

        if (!Address_.present ())
        {
          this->Address_.set (r);
          continue;
        }
      }

      // City
      //
      if (n.name () == "City" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< City_type > r (
          City_traits::create (i, f, this));

        if (!City_.present ())
        {
          this->City_.set (r);
          continue;
        }
      }

      // StateOrProvince
      //
      if (n.name () == "StateOrProvince" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< StateOrProvince_type > r (
          StateOrProvince_traits::create (i, f, this));

        if (!StateOrProvince_.present ())
        {
          this->StateOrProvince_.set (r);
          continue;
        }
      }

      // PostCode
      //
      if (n.name () == "PostCode" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< PostCode_type > r (
          PostCode_traits::create (i, f, this));

        if (!PostCode_.present ())
        {
          this->PostCode_.set (r);
          continue;
        }
      }

      // Country
      //
      if (n.name () == "Country" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Country_type > r (
          Country_traits::create (i, f, this));

        if (!Country_.present ())
        {
          this->Country_.set (r);
          continue;
        }
      }

      break;
    }

    if (!AddressType_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "AddressType",
        "http://www.opengis.net/wms");
    }

    if (!Address_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Address",
        "http://www.opengis.net/wms");
    }

    if (!City_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "City",
        "http://www.opengis.net/wms");
    }

    if (!StateOrProvince_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "StateOrProvince",
        "http://www.opengis.net/wms");
    }

    if (!PostCode_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "PostCode",
        "http://www.opengis.net/wms");
    }

    if (!Country_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Country",
        "http://www.opengis.net/wms");
    }
  }

  ContactAddress* ContactAddress::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ContactAddress (*this, f, c);
  }

  ContactAddress::
  ~ContactAddress ()
  {
  }

  // Capability
  //

  Capability::
  Capability (const Request_type& Request,
              const Exception_type& Exception)
  : ::xml_schema::type (),
    Request_ (Request, ::xml_schema::flags (), this),
    Exception_ (Exception, ::xml_schema::flags (), this),
    _ExtendedCapabilities_ (::xml_schema::flags (), this),
    Layer_ (::xml_schema::flags (), this)
  {
  }

  Capability::
  Capability (::std::auto_ptr< Request_type >& Request,
              ::std::auto_ptr< Exception_type >& Exception)
  : ::xml_schema::type (),
    Request_ (Request, ::xml_schema::flags (), this),
    Exception_ (Exception, ::xml_schema::flags (), this),
    _ExtendedCapabilities_ (::xml_schema::flags (), this),
    Layer_ (::xml_schema::flags (), this)
  {
  }

  Capability::
  Capability (const Capability& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Request_ (x.Request_, f, this),
    Exception_ (x.Exception_, f, this),
    _ExtendedCapabilities_ (x._ExtendedCapabilities_, f, this),
    Layer_ (x.Layer_, f, this)
  {
  }

  Capability::
  Capability (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Request_ (f, this),
    Exception_ (f, this),
    _ExtendedCapabilities_ (f, this),
    Layer_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Capability::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Request
      //
      if (n.name () == "Request" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Request_type > r (
          Request_traits::create (i, f, this));

        if (!Request_.present ())
        {
          this->Request_.set (r);
          continue;
        }
      }

      // Exception
      //
      if (n.name () == "Exception" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Exception_type > r (
          Exception_traits::create (i, f, this));

        if (!Exception_.present ())
        {
          this->Exception_.set (r);
          continue;
        }
      }

      // _ExtendedCapabilities
      //
      if (n.name () == "_ExtendedCapabilities" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< _ExtendedCapabilities_type > r (
          _ExtendedCapabilities_traits::create (i, f, this));

        this->_ExtendedCapabilities_.push_back (r);
        continue;
      }

      // Layer
      //
      if (n.name () == "Layer" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Layer_type > r (
          Layer_traits::create (i, f, this));

        if (!this->Layer_)
        {
          this->Layer_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Request_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Request",
        "http://www.opengis.net/wms");
    }

    if (!Exception_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Exception",
        "http://www.opengis.net/wms");
    }
  }

  Capability* Capability::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Capability (*this, f, c);
  }

  Capability::
  ~Capability ()
  {
  }

  // Request
  //

  Request::
  Request (const GetCapabilities_type& GetCapabilities,
           const GetMap_type& GetMap)
  : ::xml_schema::type (),
    GetCapabilities_ (GetCapabilities, ::xml_schema::flags (), this),
    GetMap_ (GetMap, ::xml_schema::flags (), this),
    GetFeatureInfo_ (::xml_schema::flags (), this),
    _ExtendedOperation_ (::xml_schema::flags (), this)
  {
  }

  Request::
  Request (::std::auto_ptr< GetCapabilities_type >& GetCapabilities,
           ::std::auto_ptr< GetMap_type >& GetMap)
  : ::xml_schema::type (),
    GetCapabilities_ (GetCapabilities, ::xml_schema::flags (), this),
    GetMap_ (GetMap, ::xml_schema::flags (), this),
    GetFeatureInfo_ (::xml_schema::flags (), this),
    _ExtendedOperation_ (::xml_schema::flags (), this)
  {
  }

  Request::
  Request (const Request& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    GetCapabilities_ (x.GetCapabilities_, f, this),
    GetMap_ (x.GetMap_, f, this),
    GetFeatureInfo_ (x.GetFeatureInfo_, f, this),
    _ExtendedOperation_ (x._ExtendedOperation_, f, this)
  {
  }

  Request::
  Request (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    GetCapabilities_ (f, this),
    GetMap_ (f, this),
    GetFeatureInfo_ (f, this),
    _ExtendedOperation_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // GetCapabilities
      //
      if (n.name () == "GetCapabilities" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< GetCapabilities_type > r (
          GetCapabilities_traits::create (i, f, this));

        if (!GetCapabilities_.present ())
        {
          this->GetCapabilities_.set (r);
          continue;
        }
      }

      // GetMap
      //
      if (n.name () == "GetMap" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< GetMap_type > r (
          GetMap_traits::create (i, f, this));

        if (!GetMap_.present ())
        {
          this->GetMap_.set (r);
          continue;
        }
      }

      // GetFeatureInfo
      //
      if (n.name () == "GetFeatureInfo" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< GetFeatureInfo_type > r (
          GetFeatureInfo_traits::create (i, f, this));

        if (!this->GetFeatureInfo_)
        {
          this->GetFeatureInfo_.set (r);
          continue;
        }
      }

      // _ExtendedOperation
      //
      if (n.name () == "_ExtendedOperation" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< _ExtendedOperation_type > r (
          _ExtendedOperation_traits::create (i, f, this));

        this->_ExtendedOperation_.push_back (r);
        continue;
      }

      break;
    }

    if (!GetCapabilities_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "GetCapabilities",
        "http://www.opengis.net/wms");
    }

    if (!GetMap_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "GetMap",
        "http://www.opengis.net/wms");
    }
  }

  Request* Request::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Request (*this, f, c);
  }

  Request::
  ~Request ()
  {
  }

  // DCPType
  //

  DCPType::
  DCPType (const HTTP_type& HTTP)
  : ::xml_schema::type (),
    HTTP_ (HTTP, ::xml_schema::flags (), this)
  {
  }

  DCPType::
  DCPType (::std::auto_ptr< HTTP_type >& HTTP)
  : ::xml_schema::type (),
    HTTP_ (HTTP, ::xml_schema::flags (), this)
  {
  }

  DCPType::
  DCPType (const DCPType& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    HTTP_ (x.HTTP_, f, this)
  {
  }

  DCPType::
  DCPType (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    HTTP_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void DCPType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // HTTP
      //
      if (n.name () == "HTTP" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< HTTP_type > r (
          HTTP_traits::create (i, f, this));

        if (!HTTP_.present ())
        {
          this->HTTP_.set (r);
          continue;
        }
      }

      break;
    }

    if (!HTTP_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "HTTP",
        "http://www.opengis.net/wms");
    }
  }

  DCPType* DCPType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class DCPType (*this, f, c);
  }

  DCPType::
  ~DCPType ()
  {
  }

  // HTTP
  //

  HTTP::
  HTTP (const Get_type& Get)
  : ::xml_schema::type (),
    Get_ (Get, ::xml_schema::flags (), this),
    Post_ (::xml_schema::flags (), this)
  {
  }

  HTTP::
  HTTP (::std::auto_ptr< Get_type >& Get)
  : ::xml_schema::type (),
    Get_ (Get, ::xml_schema::flags (), this),
    Post_ (::xml_schema::flags (), this)
  {
  }

  HTTP::
  HTTP (const HTTP& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Get_ (x.Get_, f, this),
    Post_ (x.Post_, f, this)
  {
  }

  HTTP::
  HTTP (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Get_ (f, this),
    Post_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void HTTP::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Get
      //
      if (n.name () == "Get" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Get_type > r (
          Get_traits::create (i, f, this));

        if (!Get_.present ())
        {
          this->Get_.set (r);
          continue;
        }
      }

      // Post
      //
      if (n.name () == "Post" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Post_type > r (
          Post_traits::create (i, f, this));

        if (!this->Post_)
        {
          this->Post_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Get_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Get",
        "http://www.opengis.net/wms");
    }
  }

  HTTP* HTTP::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class HTTP (*this, f, c);
  }

  HTTP::
  ~HTTP ()
  {
  }

  // Get
  //

  Get::
  Get (const OnlineResource_type& OnlineResource)
  : ::xml_schema::type (),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this)
  {
  }

  Get::
  Get (::std::auto_ptr< OnlineResource_type >& OnlineResource)
  : ::xml_schema::type (),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this)
  {
  }

  Get::
  Get (const Get& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    OnlineResource_ (x.OnlineResource_, f, this)
  {
  }

  Get::
  Get (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    OnlineResource_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Get::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // OnlineResource
      //
      if (n.name () == "OnlineResource" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< OnlineResource_type > r (
          OnlineResource_traits::create (i, f, this));

        if (!OnlineResource_.present ())
        {
          this->OnlineResource_.set (r);
          continue;
        }
      }

      break;
    }

    if (!OnlineResource_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OnlineResource",
        "http://www.opengis.net/wms");
    }
  }

  Get* Get::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Get (*this, f, c);
  }

  Get::
  ~Get ()
  {
  }

  // Post
  //

  Post::
  Post (const OnlineResource_type& OnlineResource)
  : ::xml_schema::type (),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this)
  {
  }

  Post::
  Post (::std::auto_ptr< OnlineResource_type >& OnlineResource)
  : ::xml_schema::type (),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this)
  {
  }

  Post::
  Post (const Post& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    OnlineResource_ (x.OnlineResource_, f, this)
  {
  }

  Post::
  Post (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    OnlineResource_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Post::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // OnlineResource
      //
      if (n.name () == "OnlineResource" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< OnlineResource_type > r (
          OnlineResource_traits::create (i, f, this));

        if (!OnlineResource_.present ())
        {
          this->OnlineResource_.set (r);
          continue;
        }
      }

      break;
    }

    if (!OnlineResource_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OnlineResource",
        "http://www.opengis.net/wms");
    }
  }

  Post* Post::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Post (*this, f, c);
  }

  Post::
  ~Post ()
  {
  }

  // Exception
  //

  Exception::
  Exception ()
  : ::xml_schema::type (),
    Format_ (::xml_schema::flags (), this)
  {
  }

  Exception::
  Exception (const Exception& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Format_ (x.Format_, f, this)
  {
  }

  Exception::
  Exception (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Format_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Exception::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Format
      //
      if (n.name () == "Format" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Format_type > r (
          Format_traits::create (i, f, this));

        this->Format_.push_back (r);
        continue;
      }

      break;
    }
  }

  Exception* Exception::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Exception (*this, f, c);
  }

  Exception::
  ~Exception ()
  {
  }

  // Layer
  //

  const Layer::queryable_type Layer::queryable_default_value_ (
    ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
      ::std::string ("0"), 0, 0, 0));

  const Layer::opaque_type Layer::opaque_default_value_ (
    ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
      ::std::string ("0"), 0, 0, 0));

  const Layer::noSubsets_type Layer::noSubsets_default_value_ (
    ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
      ::std::string ("0"), 0, 0, 0));

  Layer::
  Layer (const Title_type& Title)
  : ::xml_schema::type (),
    Name_ (::xml_schema::flags (), this),
    Title_ (Title, ::xml_schema::flags (), this),
    Abstract_ (::xml_schema::flags (), this),
    KeywordList_ (::xml_schema::flags (), this),
    CRS_ (::xml_schema::flags (), this),
    EX_GeographicBoundingBox_ (::xml_schema::flags (), this),
    BoundingBox_ (::xml_schema::flags (), this),
    Dimension_ (::xml_schema::flags (), this),
    Attribution_ (::xml_schema::flags (), this),
    AuthorityURL_ (::xml_schema::flags (), this),
    Identifier_ (::xml_schema::flags (), this),
    MetadataURL_ (::xml_schema::flags (), this),
    DataURL_ (::xml_schema::flags (), this),
    FeatureListURL_ (::xml_schema::flags (), this),
    Style_ (::xml_schema::flags (), this),
    MinScaleDenominator_ (::xml_schema::flags (), this),
    MaxScaleDenominator_ (::xml_schema::flags (), this),
    Layer1_ (::xml_schema::flags (), this),
    queryable_ (queryable_default_value (), ::xml_schema::flags (), this),
    cascaded_ (::xml_schema::flags (), this),
    opaque_ (opaque_default_value (), ::xml_schema::flags (), this),
    noSubsets_ (noSubsets_default_value (), ::xml_schema::flags (), this),
    fixedWidth_ (::xml_schema::flags (), this),
    fixedHeight_ (::xml_schema::flags (), this)
  {
  }

  Layer::
  Layer (const Layer& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Name_ (x.Name_, f, this),
    Title_ (x.Title_, f, this),
    Abstract_ (x.Abstract_, f, this),
    KeywordList_ (x.KeywordList_, f, this),
    CRS_ (x.CRS_, f, this),
    EX_GeographicBoundingBox_ (x.EX_GeographicBoundingBox_, f, this),
    BoundingBox_ (x.BoundingBox_, f, this),
    Dimension_ (x.Dimension_, f, this),
    Attribution_ (x.Attribution_, f, this),
    AuthorityURL_ (x.AuthorityURL_, f, this),
    Identifier_ (x.Identifier_, f, this),
    MetadataURL_ (x.MetadataURL_, f, this),
    DataURL_ (x.DataURL_, f, this),
    FeatureListURL_ (x.FeatureListURL_, f, this),
    Style_ (x.Style_, f, this),
    MinScaleDenominator_ (x.MinScaleDenominator_, f, this),
    MaxScaleDenominator_ (x.MaxScaleDenominator_, f, this),
    Layer1_ (x.Layer1_, f, this),
    queryable_ (x.queryable_, f, this),
    cascaded_ (x.cascaded_, f, this),
    opaque_ (x.opaque_, f, this),
    noSubsets_ (x.noSubsets_, f, this),
    fixedWidth_ (x.fixedWidth_, f, this),
    fixedHeight_ (x.fixedHeight_, f, this)
  {
  }

  Layer::
  Layer (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Name_ (f, this),
    Title_ (f, this),
    Abstract_ (f, this),
    KeywordList_ (f, this),
    CRS_ (f, this),
    EX_GeographicBoundingBox_ (f, this),
    BoundingBox_ (f, this),
    Dimension_ (f, this),
    Attribution_ (f, this),
    AuthorityURL_ (f, this),
    Identifier_ (f, this),
    MetadataURL_ (f, this),
    DataURL_ (f, this),
    FeatureListURL_ (f, this),
    Style_ (f, this),
    MinScaleDenominator_ (f, this),
    MaxScaleDenominator_ (f, this),
    Layer1_ (f, this),
    queryable_ (f, this),
    cascaded_ (f, this),
    opaque_ (f, this),
    noSubsets_ (f, this),
    fixedWidth_ (f, this),
    fixedHeight_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void Layer::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Name
      //
      if (n.name () == "Name" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Name_type > r (
          Name_traits::create (i, f, this));

        if (!this->Name_)
        {
          this->Name_.set (r);
          continue;
        }
      }

      // Title
      //
      if (n.name () == "Title" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Title_type > r (
          Title_traits::create (i, f, this));

        if (!Title_.present ())
        {
          this->Title_.set (r);
          continue;
        }
      }

      // Abstract
      //
      if (n.name () == "Abstract" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Abstract_type > r (
          Abstract_traits::create (i, f, this));

        if (!this->Abstract_)
        {
          this->Abstract_.set (r);
          continue;
        }
      }

      // KeywordList
      //
      if (n.name () == "KeywordList" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< KeywordList_type > r (
          KeywordList_traits::create (i, f, this));

        if (!this->KeywordList_)
        {
          this->KeywordList_.set (r);
          continue;
        }
      }

      // CRS
      //
      if (n.name () == "CRS" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< CRS_type > r (
          CRS_traits::create (i, f, this));

        this->CRS_.push_back (r);
        continue;
      }

      // EX_GeographicBoundingBox
      //
      if (n.name () == "EX_GeographicBoundingBox" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< EX_GeographicBoundingBox_type > r (
          EX_GeographicBoundingBox_traits::create (i, f, this));

        if (!this->EX_GeographicBoundingBox_)
        {
          this->EX_GeographicBoundingBox_.set (r);
          continue;
        }
      }

      // BoundingBox
      //
      if (n.name () == "BoundingBox" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< BoundingBox_type > r (
          BoundingBox_traits::create (i, f, this));

        this->BoundingBox_.push_back (r);
        continue;
      }

      // Dimension
      //
      if (n.name () == "Dimension" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Dimension_type > r (
          Dimension_traits::create (i, f, this));

        this->Dimension_.push_back (r);
        continue;
      }

      // Attribution
      //
      if (n.name () == "Attribution" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Attribution_type > r (
          Attribution_traits::create (i, f, this));

        if (!this->Attribution_)
        {
          this->Attribution_.set (r);
          continue;
        }
      }

      // AuthorityURL
      //
      if (n.name () == "AuthorityURL" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< AuthorityURL_type > r (
          AuthorityURL_traits::create (i, f, this));

        this->AuthorityURL_.push_back (r);
        continue;
      }

      // Identifier
      //
      if (n.name () == "Identifier" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Identifier_type > r (
          Identifier_traits::create (i, f, this));

        this->Identifier_.push_back (r);
        continue;
      }

      // MetadataURL
      //
      if (n.name () == "MetadataURL" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< MetadataURL_type > r (
          MetadataURL_traits::create (i, f, this));

        this->MetadataURL_.push_back (r);
        continue;
      }

      // DataURL
      //
      if (n.name () == "DataURL" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< DataURL_type > r (
          DataURL_traits::create (i, f, this));

        this->DataURL_.push_back (r);
        continue;
      }

      // FeatureListURL
      //
      if (n.name () == "FeatureListURL" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< FeatureListURL_type > r (
          FeatureListURL_traits::create (i, f, this));

        this->FeatureListURL_.push_back (r);
        continue;
      }

      // Style
      //
      if (n.name () == "Style" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Style_type > r (
          Style_traits::create (i, f, this));

        this->Style_.push_back (r);
        continue;
      }

      // MinScaleDenominator
      //
      if (n.name () == "MinScaleDenominator" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        if (!this->MinScaleDenominator_)
        {
          this->MinScaleDenominator_.set (MinScaleDenominator_traits::create (i, f, this));
          continue;
        }
      }

      // MaxScaleDenominator
      //
      if (n.name () == "MaxScaleDenominator" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        if (!this->MaxScaleDenominator_)
        {
          this->MaxScaleDenominator_.set (MaxScaleDenominator_traits::create (i, f, this));
          continue;
        }
      }

      // Layer
      //
      if (n.name () == "Layer" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Layer1_type > r (
          Layer1_traits::create (i, f, this));

        this->Layer1_.push_back (r);
        continue;
      }

      break;
    }

    if (!Title_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Title",
        "http://www.opengis.net/wms");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "queryable" && n.namespace_ ().empty ())
      {
        this->queryable_.set (queryable_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "cascaded" && n.namespace_ ().empty ())
      {
        this->cascaded_.set (cascaded_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "opaque" && n.namespace_ ().empty ())
      {
        this->opaque_.set (opaque_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "noSubsets" && n.namespace_ ().empty ())
      {
        this->noSubsets_.set (noSubsets_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "fixedWidth" && n.namespace_ ().empty ())
      {
        this->fixedWidth_.set (fixedWidth_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "fixedHeight" && n.namespace_ ().empty ())
      {
        this->fixedHeight_.set (fixedHeight_traits::create (i, f, this));
        continue;
      }
    }

    if (!queryable_.present ())
    {
      this->queryable_.set (queryable_default_value ());
    }

    if (!opaque_.present ())
    {
      this->opaque_.set (opaque_default_value ());
    }

    if (!noSubsets_.present ())
    {
      this->noSubsets_.set (noSubsets_default_value ());
    }
  }

  Layer* Layer::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Layer (*this, f, c);
  }

  Layer::
  ~Layer ()
  {
  }

  // EX_GeographicBoundingBox
  //

  EX_GeographicBoundingBox::
  EX_GeographicBoundingBox (const westBoundLongitude_type& westBoundLongitude,
                            const eastBoundLongitude_type& eastBoundLongitude,
                            const southBoundLatitude_type& southBoundLatitude,
                            const northBoundLatitude_type& northBoundLatitude)
  : ::xml_schema::type (),
    westBoundLongitude_ (westBoundLongitude, ::xml_schema::flags (), this),
    eastBoundLongitude_ (eastBoundLongitude, ::xml_schema::flags (), this),
    southBoundLatitude_ (southBoundLatitude, ::xml_schema::flags (), this),
    northBoundLatitude_ (northBoundLatitude, ::xml_schema::flags (), this)
  {
  }

  EX_GeographicBoundingBox::
  EX_GeographicBoundingBox (const EX_GeographicBoundingBox& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    westBoundLongitude_ (x.westBoundLongitude_, f, this),
    eastBoundLongitude_ (x.eastBoundLongitude_, f, this),
    southBoundLatitude_ (x.southBoundLatitude_, f, this),
    northBoundLatitude_ (x.northBoundLatitude_, f, this)
  {
  }

  EX_GeographicBoundingBox::
  EX_GeographicBoundingBox (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    westBoundLongitude_ (f, this),
    eastBoundLongitude_ (f, this),
    southBoundLatitude_ (f, this),
    northBoundLatitude_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void EX_GeographicBoundingBox::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // westBoundLongitude
      //
      if (n.name () == "westBoundLongitude" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< westBoundLongitude_type > r (
          westBoundLongitude_traits::create (i, f, this));

        if (!westBoundLongitude_.present ())
        {
          this->westBoundLongitude_.set (r);
          continue;
        }
      }

      // eastBoundLongitude
      //
      if (n.name () == "eastBoundLongitude" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< eastBoundLongitude_type > r (
          eastBoundLongitude_traits::create (i, f, this));

        if (!eastBoundLongitude_.present ())
        {
          this->eastBoundLongitude_.set (r);
          continue;
        }
      }

      // southBoundLatitude
      //
      if (n.name () == "southBoundLatitude" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< southBoundLatitude_type > r (
          southBoundLatitude_traits::create (i, f, this));

        if (!southBoundLatitude_.present ())
        {
          this->southBoundLatitude_.set (r);
          continue;
        }
      }

      // northBoundLatitude
      //
      if (n.name () == "northBoundLatitude" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< northBoundLatitude_type > r (
          northBoundLatitude_traits::create (i, f, this));

        if (!northBoundLatitude_.present ())
        {
          this->northBoundLatitude_.set (r);
          continue;
        }
      }

      break;
    }

    if (!westBoundLongitude_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "westBoundLongitude",
        "http://www.opengis.net/wms");
    }

    if (!eastBoundLongitude_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "eastBoundLongitude",
        "http://www.opengis.net/wms");
    }

    if (!southBoundLatitude_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "southBoundLatitude",
        "http://www.opengis.net/wms");
    }

    if (!northBoundLatitude_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "northBoundLatitude",
        "http://www.opengis.net/wms");
    }
  }

  EX_GeographicBoundingBox* EX_GeographicBoundingBox::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class EX_GeographicBoundingBox (*this, f, c);
  }

  EX_GeographicBoundingBox::
  ~EX_GeographicBoundingBox ()
  {
  }

  // BoundingBox
  //

  BoundingBox::
  BoundingBox (const CRS_type& CRS,
               const minx_type& minx,
               const miny_type& miny,
               const maxx_type& maxx,
               const maxy_type& maxy)
  : ::xml_schema::type (),
    CRS_ (CRS, ::xml_schema::flags (), this),
    minx_ (minx, ::xml_schema::flags (), this),
    miny_ (miny, ::xml_schema::flags (), this),
    maxx_ (maxx, ::xml_schema::flags (), this),
    maxy_ (maxy, ::xml_schema::flags (), this),
    resx_ (::xml_schema::flags (), this),
    resy_ (::xml_schema::flags (), this)
  {
  }

  BoundingBox::
  BoundingBox (const BoundingBox& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    CRS_ (x.CRS_, f, this),
    minx_ (x.minx_, f, this),
    miny_ (x.miny_, f, this),
    maxx_ (x.maxx_, f, this),
    maxy_ (x.maxy_, f, this),
    resx_ (x.resx_, f, this),
    resy_ (x.resy_, f, this)
  {
  }

  BoundingBox::
  BoundingBox (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    CRS_ (f, this),
    minx_ (f, this),
    miny_ (f, this),
    maxx_ (f, this),
    maxy_ (f, this),
    resx_ (f, this),
    resy_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void BoundingBox::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "CRS" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< CRS_type > r (
          CRS_traits::create (i, f, this));

        this->CRS_.set (r);
        continue;
      }

      if (n.name () == "minx" && n.namespace_ ().empty ())
      {
        this->minx_.set (minx_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "miny" && n.namespace_ ().empty ())
      {
        this->miny_.set (miny_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "maxx" && n.namespace_ ().empty ())
      {
        this->maxx_.set (maxx_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "maxy" && n.namespace_ ().empty ())
      {
        this->maxy_.set (maxy_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "resx" && n.namespace_ ().empty ())
      {
        this->resx_.set (resx_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "resy" && n.namespace_ ().empty ())
      {
        this->resy_.set (resy_traits::create (i, f, this));
        continue;
      }
    }

    if (!CRS_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "CRS",
        "");
    }

    if (!minx_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "minx",
        "");
    }

    if (!miny_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "miny",
        "");
    }

    if (!maxx_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "maxx",
        "");
    }

    if (!maxy_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "maxy",
        "");
    }
  }

  BoundingBox* BoundingBox::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class BoundingBox (*this, f, c);
  }

  BoundingBox::
  ~BoundingBox ()
  {
  }

  // Dimension
  //

  Dimension::
  Dimension (const name_type& name,
             const units_type& units)
  : ::xml_schema::string (),
    name_ (name, ::xml_schema::flags (), this),
    units_ (units, ::xml_schema::flags (), this),
    unitSymbol_ (::xml_schema::flags (), this),
    default__ (::xml_schema::flags (), this),
    multipleValues_ (::xml_schema::flags (), this),
    nearestValue_ (::xml_schema::flags (), this),
    current_ (::xml_schema::flags (), this)
  {
  }

  Dimension::
  Dimension (const char* _xsd_string_base,
             const name_type& name,
             const units_type& units)
  : ::xml_schema::string (_xsd_string_base),
    name_ (name, ::xml_schema::flags (), this),
    units_ (units, ::xml_schema::flags (), this),
    unitSymbol_ (::xml_schema::flags (), this),
    default__ (::xml_schema::flags (), this),
    multipleValues_ (::xml_schema::flags (), this),
    nearestValue_ (::xml_schema::flags (), this),
    current_ (::xml_schema::flags (), this)
  {
  }

  Dimension::
  Dimension (const ::std::string& _xsd_string_base,
             const name_type& name,
             const units_type& units)
  : ::xml_schema::string (_xsd_string_base),
    name_ (name, ::xml_schema::flags (), this),
    units_ (units, ::xml_schema::flags (), this),
    unitSymbol_ (::xml_schema::flags (), this),
    default__ (::xml_schema::flags (), this),
    multipleValues_ (::xml_schema::flags (), this),
    nearestValue_ (::xml_schema::flags (), this),
    current_ (::xml_schema::flags (), this)
  {
  }

  Dimension::
  Dimension (const ::xml_schema::string& _xsd_string_base,
             const name_type& name,
             const units_type& units)
  : ::xml_schema::string (_xsd_string_base),
    name_ (name, ::xml_schema::flags (), this),
    units_ (units, ::xml_schema::flags (), this),
    unitSymbol_ (::xml_schema::flags (), this),
    default__ (::xml_schema::flags (), this),
    multipleValues_ (::xml_schema::flags (), this),
    nearestValue_ (::xml_schema::flags (), this),
    current_ (::xml_schema::flags (), this)
  {
  }

  Dimension::
  Dimension (const Dimension& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c),
    name_ (x.name_, f, this),
    units_ (x.units_, f, this),
    unitSymbol_ (x.unitSymbol_, f, this),
    default__ (x.default__, f, this),
    multipleValues_ (x.multipleValues_, f, this),
    nearestValue_ (x.nearestValue_, f, this),
    current_ (x.current_, f, this)
  {
  }

  Dimension::
  Dimension (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
    name_ (f, this),
    units_ (f, this),
    unitSymbol_ (f, this),
    default__ (f, this),
    multipleValues_ (f, this),
    nearestValue_ (f, this),
    current_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void Dimension::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        this->name_.set (r);
        continue;
      }

      if (n.name () == "units" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< units_type > r (
          units_traits::create (i, f, this));

        this->units_.set (r);
        continue;
      }

      if (n.name () == "unitSymbol" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< unitSymbol_type > r (
          unitSymbol_traits::create (i, f, this));

        this->unitSymbol_.set (r);
        continue;
      }

      if (n.name () == "default" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< default_type > r (
          default_traits::create (i, f, this));

        this->default__.set (r);
        continue;
      }

      if (n.name () == "multipleValues" && n.namespace_ ().empty ())
      {
        this->multipleValues_.set (multipleValues_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "nearestValue" && n.namespace_ ().empty ())
      {
        this->nearestValue_.set (nearestValue_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "current" && n.namespace_ ().empty ())
      {
        this->current_.set (current_traits::create (i, f, this));
        continue;
      }
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "name",
        "");
    }

    if (!units_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "units",
        "");
    }
  }

  Dimension* Dimension::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Dimension (*this, f, c);
  }

  Dimension::
  ~Dimension ()
  {
  }

  // Attribution
  //

  Attribution::
  Attribution ()
  : ::xml_schema::type (),
    Title_ (::xml_schema::flags (), this),
    OnlineResource_ (::xml_schema::flags (), this),
    LogoURL_ (::xml_schema::flags (), this)
  {
  }

  Attribution::
  Attribution (const Attribution& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Title_ (x.Title_, f, this),
    OnlineResource_ (x.OnlineResource_, f, this),
    LogoURL_ (x.LogoURL_, f, this)
  {
  }

  Attribution::
  Attribution (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Title_ (f, this),
    OnlineResource_ (f, this),
    LogoURL_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Attribution::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Title
      //
      if (n.name () == "Title" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Title_type > r (
          Title_traits::create (i, f, this));

        if (!this->Title_)
        {
          this->Title_.set (r);
          continue;
        }
      }

      // OnlineResource
      //
      if (n.name () == "OnlineResource" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< OnlineResource_type > r (
          OnlineResource_traits::create (i, f, this));

        if (!this->OnlineResource_)
        {
          this->OnlineResource_.set (r);
          continue;
        }
      }

      // LogoURL
      //
      if (n.name () == "LogoURL" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< LogoURL_type > r (
          LogoURL_traits::create (i, f, this));

        if (!this->LogoURL_)
        {
          this->LogoURL_.set (r);
          continue;
        }
      }

      break;
    }
  }

  Attribution* Attribution::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Attribution (*this, f, c);
  }

  Attribution::
  ~Attribution ()
  {
  }

  // LogoURL
  //

  LogoURL::
  LogoURL (const Format_type& Format,
           const OnlineResource_type& OnlineResource)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this),
    width_ (::xml_schema::flags (), this),
    height_ (::xml_schema::flags (), this)
  {
  }

  LogoURL::
  LogoURL (const Format_type& Format,
           ::std::auto_ptr< OnlineResource_type >& OnlineResource)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this),
    width_ (::xml_schema::flags (), this),
    height_ (::xml_schema::flags (), this)
  {
  }

  LogoURL::
  LogoURL (const LogoURL& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Format_ (x.Format_, f, this),
    OnlineResource_ (x.OnlineResource_, f, this),
    width_ (x.width_, f, this),
    height_ (x.height_, f, this)
  {
  }

  LogoURL::
  LogoURL (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Format_ (f, this),
    OnlineResource_ (f, this),
    width_ (f, this),
    height_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void LogoURL::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Format
      //
      if (n.name () == "Format" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Format_type > r (
          Format_traits::create (i, f, this));

        if (!Format_.present ())
        {
          this->Format_.set (r);
          continue;
        }
      }

      // OnlineResource
      //
      if (n.name () == "OnlineResource" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< OnlineResource_type > r (
          OnlineResource_traits::create (i, f, this));

        if (!OnlineResource_.present ())
        {
          this->OnlineResource_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Format_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Format",
        "http://www.opengis.net/wms");
    }

    if (!OnlineResource_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OnlineResource",
        "http://www.opengis.net/wms");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "width" && n.namespace_ ().empty ())
      {
        this->width_.set (width_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "height" && n.namespace_ ().empty ())
      {
        this->height_.set (height_traits::create (i, f, this));
        continue;
      }
    }
  }

  LogoURL* LogoURL::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class LogoURL (*this, f, c);
  }

  LogoURL::
  ~LogoURL ()
  {
  }

  // MetadataURL
  //

  MetadataURL::
  MetadataURL (const Format_type& Format,
               const OnlineResource_type& OnlineResource,
               const type_type& type)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this),
    type_ (type, ::xml_schema::flags (), this)
  {
  }

  MetadataURL::
  MetadataURL (const Format_type& Format,
               ::std::auto_ptr< OnlineResource_type >& OnlineResource,
               const type_type& type)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this),
    type_ (type, ::xml_schema::flags (), this)
  {
  }

  MetadataURL::
  MetadataURL (const MetadataURL& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Format_ (x.Format_, f, this),
    OnlineResource_ (x.OnlineResource_, f, this),
    type_ (x.type_, f, this)
  {
  }

  MetadataURL::
  MetadataURL (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Format_ (f, this),
    OnlineResource_ (f, this),
    type_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void MetadataURL::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Format
      //
      if (n.name () == "Format" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Format_type > r (
          Format_traits::create (i, f, this));

        if (!Format_.present ())
        {
          this->Format_.set (r);
          continue;
        }
      }

      // OnlineResource
      //
      if (n.name () == "OnlineResource" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< OnlineResource_type > r (
          OnlineResource_traits::create (i, f, this));

        if (!OnlineResource_.present ())
        {
          this->OnlineResource_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Format_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Format",
        "http://www.opengis.net/wms");
    }

    if (!OnlineResource_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OnlineResource",
        "http://www.opengis.net/wms");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.set (r);
        continue;
      }
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "type",
        "");
    }
  }

  MetadataURL* MetadataURL::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class MetadataURL (*this, f, c);
  }

  MetadataURL::
  ~MetadataURL ()
  {
  }

  // AuthorityURL
  //

  AuthorityURL::
  AuthorityURL (const OnlineResource_type& OnlineResource,
                const name_type& name)
  : ::xml_schema::type (),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this),
    name_ (name, ::xml_schema::flags (), this)
  {
  }

  AuthorityURL::
  AuthorityURL (::std::auto_ptr< OnlineResource_type >& OnlineResource,
                const name_type& name)
  : ::xml_schema::type (),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this),
    name_ (name, ::xml_schema::flags (), this)
  {
  }

  AuthorityURL::
  AuthorityURL (const AuthorityURL& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    OnlineResource_ (x.OnlineResource_, f, this),
    name_ (x.name_, f, this)
  {
  }

  AuthorityURL::
  AuthorityURL (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    OnlineResource_ (f, this),
    name_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void AuthorityURL::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // OnlineResource
      //
      if (n.name () == "OnlineResource" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< OnlineResource_type > r (
          OnlineResource_traits::create (i, f, this));

        if (!OnlineResource_.present ())
        {
          this->OnlineResource_.set (r);
          continue;
        }
      }

      break;
    }

    if (!OnlineResource_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OnlineResource",
        "http://www.opengis.net/wms");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        this->name_.set (r);
        continue;
      }
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "name",
        "");
    }
  }

  AuthorityURL* AuthorityURL::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AuthorityURL (*this, f, c);
  }

  AuthorityURL::
  ~AuthorityURL ()
  {
  }

  // Identifier
  //

  Identifier::
  Identifier (const authority_type& authority)
  : ::xml_schema::string (),
    authority_ (authority, ::xml_schema::flags (), this)
  {
  }

  Identifier::
  Identifier (const char* _xsd_string_base,
              const authority_type& authority)
  : ::xml_schema::string (_xsd_string_base),
    authority_ (authority, ::xml_schema::flags (), this)
  {
  }

  Identifier::
  Identifier (const ::std::string& _xsd_string_base,
              const authority_type& authority)
  : ::xml_schema::string (_xsd_string_base),
    authority_ (authority, ::xml_schema::flags (), this)
  {
  }

  Identifier::
  Identifier (const ::xml_schema::string& _xsd_string_base,
              const authority_type& authority)
  : ::xml_schema::string (_xsd_string_base),
    authority_ (authority, ::xml_schema::flags (), this)
  {
  }

  Identifier::
  Identifier (const Identifier& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c),
    authority_ (x.authority_, f, this)
  {
  }

  Identifier::
  Identifier (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
    authority_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void Identifier::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "authority" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< authority_type > r (
          authority_traits::create (i, f, this));

        this->authority_.set (r);
        continue;
      }
    }

    if (!authority_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "authority",
        "");
    }
  }

  Identifier* Identifier::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Identifier (*this, f, c);
  }

  Identifier::
  ~Identifier ()
  {
  }

  // DataURL
  //

  DataURL::
  DataURL (const Format_type& Format,
           const OnlineResource_type& OnlineResource)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this)
  {
  }

  DataURL::
  DataURL (const Format_type& Format,
           ::std::auto_ptr< OnlineResource_type >& OnlineResource)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this)
  {
  }

  DataURL::
  DataURL (const DataURL& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Format_ (x.Format_, f, this),
    OnlineResource_ (x.OnlineResource_, f, this)
  {
  }

  DataURL::
  DataURL (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Format_ (f, this),
    OnlineResource_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void DataURL::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Format
      //
      if (n.name () == "Format" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Format_type > r (
          Format_traits::create (i, f, this));

        if (!Format_.present ())
        {
          this->Format_.set (r);
          continue;
        }
      }

      // OnlineResource
      //
      if (n.name () == "OnlineResource" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< OnlineResource_type > r (
          OnlineResource_traits::create (i, f, this));

        if (!OnlineResource_.present ())
        {
          this->OnlineResource_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Format_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Format",
        "http://www.opengis.net/wms");
    }

    if (!OnlineResource_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OnlineResource",
        "http://www.opengis.net/wms");
    }
  }

  DataURL* DataURL::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class DataURL (*this, f, c);
  }

  DataURL::
  ~DataURL ()
  {
  }

  // FeatureListURL
  //

  FeatureListURL::
  FeatureListURL (const Format_type& Format,
                  const OnlineResource_type& OnlineResource)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this)
  {
  }

  FeatureListURL::
  FeatureListURL (const Format_type& Format,
                  ::std::auto_ptr< OnlineResource_type >& OnlineResource)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this)
  {
  }

  FeatureListURL::
  FeatureListURL (const FeatureListURL& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Format_ (x.Format_, f, this),
    OnlineResource_ (x.OnlineResource_, f, this)
  {
  }

  FeatureListURL::
  FeatureListURL (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Format_ (f, this),
    OnlineResource_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void FeatureListURL::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Format
      //
      if (n.name () == "Format" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Format_type > r (
          Format_traits::create (i, f, this));

        if (!Format_.present ())
        {
          this->Format_.set (r);
          continue;
        }
      }

      // OnlineResource
      //
      if (n.name () == "OnlineResource" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< OnlineResource_type > r (
          OnlineResource_traits::create (i, f, this));

        if (!OnlineResource_.present ())
        {
          this->OnlineResource_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Format_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Format",
        "http://www.opengis.net/wms");
    }

    if (!OnlineResource_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OnlineResource",
        "http://www.opengis.net/wms");
    }
  }

  FeatureListURL* FeatureListURL::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class FeatureListURL (*this, f, c);
  }

  FeatureListURL::
  ~FeatureListURL ()
  {
  }

  // Style
  //

  Style::
  Style (const Name_type& Name,
         const Title_type& Title)
  : ::xml_schema::type (),
    Name_ (Name, ::xml_schema::flags (), this),
    Title_ (Title, ::xml_schema::flags (), this),
    Abstract_ (::xml_schema::flags (), this),
    LegendURL_ (::xml_schema::flags (), this),
    StyleSheetURL_ (::xml_schema::flags (), this),
    StyleURL_ (::xml_schema::flags (), this)
  {
  }

  Style::
  Style (const Style& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Name_ (x.Name_, f, this),
    Title_ (x.Title_, f, this),
    Abstract_ (x.Abstract_, f, this),
    LegendURL_ (x.LegendURL_, f, this),
    StyleSheetURL_ (x.StyleSheetURL_, f, this),
    StyleURL_ (x.StyleURL_, f, this)
  {
  }

  Style::
  Style (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Name_ (f, this),
    Title_ (f, this),
    Abstract_ (f, this),
    LegendURL_ (f, this),
    StyleSheetURL_ (f, this),
    StyleURL_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Style::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Name
      //
      if (n.name () == "Name" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Name_type > r (
          Name_traits::create (i, f, this));

        if (!Name_.present ())
        {
          this->Name_.set (r);
          continue;
        }
      }

      // Title
      //
      if (n.name () == "Title" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Title_type > r (
          Title_traits::create (i, f, this));

        if (!Title_.present ())
        {
          this->Title_.set (r);
          continue;
        }
      }

      // Abstract
      //
      if (n.name () == "Abstract" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Abstract_type > r (
          Abstract_traits::create (i, f, this));

        if (!this->Abstract_)
        {
          this->Abstract_.set (r);
          continue;
        }
      }

      // LegendURL
      //
      if (n.name () == "LegendURL" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< LegendURL_type > r (
          LegendURL_traits::create (i, f, this));

        this->LegendURL_.push_back (r);
        continue;
      }

      // StyleSheetURL
      //
      if (n.name () == "StyleSheetURL" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< StyleSheetURL_type > r (
          StyleSheetURL_traits::create (i, f, this));

        if (!this->StyleSheetURL_)
        {
          this->StyleSheetURL_.set (r);
          continue;
        }
      }

      // StyleURL
      //
      if (n.name () == "StyleURL" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< StyleURL_type > r (
          StyleURL_traits::create (i, f, this));

        if (!this->StyleURL_)
        {
          this->StyleURL_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Name",
        "http://www.opengis.net/wms");
    }

    if (!Title_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Title",
        "http://www.opengis.net/wms");
    }
  }

  Style* Style::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Style (*this, f, c);
  }

  Style::
  ~Style ()
  {
  }

  // LegendURL
  //

  LegendURL::
  LegendURL (const Format_type& Format,
             const OnlineResource_type& OnlineResource)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this),
    width_ (::xml_schema::flags (), this),
    height_ (::xml_schema::flags (), this)
  {
  }

  LegendURL::
  LegendURL (const Format_type& Format,
             ::std::auto_ptr< OnlineResource_type >& OnlineResource)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this),
    width_ (::xml_schema::flags (), this),
    height_ (::xml_schema::flags (), this)
  {
  }

  LegendURL::
  LegendURL (const LegendURL& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Format_ (x.Format_, f, this),
    OnlineResource_ (x.OnlineResource_, f, this),
    width_ (x.width_, f, this),
    height_ (x.height_, f, this)
  {
  }

  LegendURL::
  LegendURL (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Format_ (f, this),
    OnlineResource_ (f, this),
    width_ (f, this),
    height_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void LegendURL::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Format
      //
      if (n.name () == "Format" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Format_type > r (
          Format_traits::create (i, f, this));

        if (!Format_.present ())
        {
          this->Format_.set (r);
          continue;
        }
      }

      // OnlineResource
      //
      if (n.name () == "OnlineResource" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< OnlineResource_type > r (
          OnlineResource_traits::create (i, f, this));

        if (!OnlineResource_.present ())
        {
          this->OnlineResource_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Format_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Format",
        "http://www.opengis.net/wms");
    }

    if (!OnlineResource_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OnlineResource",
        "http://www.opengis.net/wms");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "width" && n.namespace_ ().empty ())
      {
        this->width_.set (width_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "height" && n.namespace_ ().empty ())
      {
        this->height_.set (height_traits::create (i, f, this));
        continue;
      }
    }
  }

  LegendURL* LegendURL::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class LegendURL (*this, f, c);
  }

  LegendURL::
  ~LegendURL ()
  {
  }

  // StyleSheetURL
  //

  StyleSheetURL::
  StyleSheetURL (const Format_type& Format,
                 const OnlineResource_type& OnlineResource)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this)
  {
  }

  StyleSheetURL::
  StyleSheetURL (const Format_type& Format,
                 ::std::auto_ptr< OnlineResource_type >& OnlineResource)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this)
  {
  }

  StyleSheetURL::
  StyleSheetURL (const StyleSheetURL& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Format_ (x.Format_, f, this),
    OnlineResource_ (x.OnlineResource_, f, this)
  {
  }

  StyleSheetURL::
  StyleSheetURL (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Format_ (f, this),
    OnlineResource_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void StyleSheetURL::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Format
      //
      if (n.name () == "Format" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Format_type > r (
          Format_traits::create (i, f, this));

        if (!Format_.present ())
        {
          this->Format_.set (r);
          continue;
        }
      }

      // OnlineResource
      //
      if (n.name () == "OnlineResource" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< OnlineResource_type > r (
          OnlineResource_traits::create (i, f, this));

        if (!OnlineResource_.present ())
        {
          this->OnlineResource_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Format_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Format",
        "http://www.opengis.net/wms");
    }

    if (!OnlineResource_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OnlineResource",
        "http://www.opengis.net/wms");
    }
  }

  StyleSheetURL* StyleSheetURL::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class StyleSheetURL (*this, f, c);
  }

  StyleSheetURL::
  ~StyleSheetURL ()
  {
  }

  // StyleURL
  //

  StyleURL::
  StyleURL (const Format_type& Format,
            const OnlineResource_type& OnlineResource)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this)
  {
  }

  StyleURL::
  StyleURL (const Format_type& Format,
            ::std::auto_ptr< OnlineResource_type >& OnlineResource)
  : ::xml_schema::type (),
    Format_ (Format, ::xml_schema::flags (), this),
    OnlineResource_ (OnlineResource, ::xml_schema::flags (), this)
  {
  }

  StyleURL::
  StyleURL (const StyleURL& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Format_ (x.Format_, f, this),
    OnlineResource_ (x.OnlineResource_, f, this)
  {
  }

  StyleURL::
  StyleURL (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Format_ (f, this),
    OnlineResource_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void StyleURL::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Format
      //
      if (n.name () == "Format" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< Format_type > r (
          Format_traits::create (i, f, this));

        if (!Format_.present ())
        {
          this->Format_.set (r);
          continue;
        }
      }

      // OnlineResource
      //
      if (n.name () == "OnlineResource" && n.namespace_ () == "http://www.opengis.net/wms")
      {
        ::std::auto_ptr< OnlineResource_type > r (
          OnlineResource_traits::create (i, f, this));

        if (!OnlineResource_.present ())
        {
          this->OnlineResource_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Format_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Format",
        "http://www.opengis.net/wms");
    }

    if (!OnlineResource_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OnlineResource",
        "http://www.opengis.net/wms");
    }
  }

  StyleURL* StyleURL::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class StyleURL (*this, f, c);
  }

  StyleURL::
  ~StyleURL ()
  {
  }

  // Name
  //

  Name::
  Name (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_Name_convert ();
  }

  Name::
  Name (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_Name_convert ();
  }

  Name::
  Name (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_Name_convert ();
  }

  Name* Name::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Name (*this, f, c);
  }

  Name::value Name::
  _xsd_Name_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Name_literals_);
    const value* i (::std::lower_bound (
                      _xsd_Name_indexes_,
                      _xsd_Name_indexes_ + 1,
                      *this,
                      c));

    if (i == _xsd_Name_indexes_ + 1 || _xsd_Name_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const Name::
  _xsd_Name_literals_[1] =
  {
    "WMS"
  };

  const Name::value Name::
  _xsd_Name_indexes_[1] =
  {
    ::wms::Name::WMS
  };
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace wms
{
  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::WMS_Capabilities > r (
      ::wms::WMS_Capabilities_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::WMS_Capabilities > r (
      ::wms::WMS_Capabilities_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::WMS_Capabilities > r (
      ::wms::WMS_Capabilities_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::WMS_Capabilities_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::WMS_Capabilities_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::WMS_Capabilities_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::WMS_Capabilities_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::WMS_Capabilities_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::WMS_Capabilities_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::WMS_Capabilities > r (
      ::wms::WMS_Capabilities_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::WMS_Capabilities > r (
      ::wms::WMS_Capabilities_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::WMS_Capabilities > r (
      ::wms::WMS_Capabilities_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::WMS_Capabilities > r (
        ::wms::WMS_Capabilities_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "WMS_Capabilities" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::WMS_Capabilities > r (
        ::xsd::cxx::tree::traits< ::wms::WMS_Capabilities, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "WMS_Capabilities",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "WMS_Capabilities" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::WMS_Capabilities > r (
        ::xsd::cxx::tree::traits< ::wms::WMS_Capabilities, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "WMS_Capabilities",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Name_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Name_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Name_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Name_ (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Name_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Name_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Name_ (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Name_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Name_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Name_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Name_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Name_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::Name_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Name" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Name",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Name" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Name",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Title (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Title (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Title (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Title (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Title (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Title (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Title (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Title (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Title (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Title (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Title (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Title (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::Title (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Title" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Title",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Title (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Title" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Title",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Abstract (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Abstract (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Abstract (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Abstract (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Abstract (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Abstract (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Abstract (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Abstract (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Abstract (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Abstract (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Abstract (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Abstract (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::Abstract (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Abstract" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Abstract",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Abstract" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Abstract",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::KeywordList > r (
      ::wms::KeywordList_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::KeywordList > r (
      ::wms::KeywordList_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::KeywordList > r (
      ::wms::KeywordList_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::KeywordList_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::KeywordList_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::KeywordList_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::KeywordList_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::KeywordList_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::KeywordList_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::KeywordList > r (
      ::wms::KeywordList_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::KeywordList > r (
      ::wms::KeywordList_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::KeywordList > r (
      ::wms::KeywordList_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::KeywordList > r (
        ::wms::KeywordList_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "KeywordList" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::KeywordList > r (
        ::xsd::cxx::tree::traits< ::wms::KeywordList, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "KeywordList",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "KeywordList" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::KeywordList > r (
        ::xsd::cxx::tree::traits< ::wms::KeywordList, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "KeywordList",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Keyword > r (
      ::wms::Keyword_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Keyword > r (
      ::wms::Keyword_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Keyword > r (
      ::wms::Keyword_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Keyword_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Keyword_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Keyword_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Keyword_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Keyword_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Keyword_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Keyword > r (
      ::wms::Keyword_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Keyword > r (
      ::wms::Keyword_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Keyword > r (
      ::wms::Keyword_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::Keyword > r (
        ::wms::Keyword_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Keyword" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Keyword > r (
        ::xsd::cxx::tree::traits< ::wms::Keyword, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Keyword",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Keyword" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Keyword > r (
        ::xsd::cxx::tree::traits< ::wms::Keyword, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Keyword",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::OnlineResource > r (
      ::wms::OnlineResource_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OnlineResource > r (
      ::wms::OnlineResource_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OnlineResource > r (
      ::wms::OnlineResource_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::OnlineResource_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::OnlineResource_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::OnlineResource_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::OnlineResource_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::OnlineResource_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::OnlineResource_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::OnlineResource > r (
      ::wms::OnlineResource_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OnlineResource > r (
      ::wms::OnlineResource_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OnlineResource > r (
      ::wms::OnlineResource_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::OnlineResource > r (
        ::wms::OnlineResource_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OnlineResource" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::OnlineResource > r (
        ::xsd::cxx::tree::traits< ::wms::OnlineResource, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OnlineResource",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OnlineResource" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::OnlineResource > r (
        ::xsd::cxx::tree::traits< ::wms::OnlineResource, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OnlineResource",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Format (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Format (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Format (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Format (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Format (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Format (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Format (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Format (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Format (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Format (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Format (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Format (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::Format (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Format" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Format",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Format (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Format" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Format",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Service > r (
      ::wms::Service_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Service > r (
      ::wms::Service_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Service > r (
      ::wms::Service_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Service_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Service_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Service_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Service_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Service_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Service_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Service > r (
      ::wms::Service_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Service > r (
      ::wms::Service_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Service > r (
      ::wms::Service_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::Service > r (
        ::wms::Service_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Service" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Service > r (
        ::xsd::cxx::tree::traits< ::wms::Service, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Service",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Service >
  Service_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Service" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Service > r (
        ::xsd::cxx::tree::traits< ::wms::Service, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Service",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::ContactInformation > r (
      ::wms::ContactInformation_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::ContactInformation > r (
      ::wms::ContactInformation_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::ContactInformation > r (
      ::wms::ContactInformation_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactInformation_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactInformation_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactInformation_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactInformation_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactInformation_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactInformation_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::ContactInformation > r (
      ::wms::ContactInformation_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::ContactInformation > r (
      ::wms::ContactInformation_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::ContactInformation > r (
      ::wms::ContactInformation_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::ContactInformation > r (
        ::wms::ContactInformation_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ContactInformation" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::ContactInformation > r (
        ::xsd::cxx::tree::traits< ::wms::ContactInformation, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactInformation",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ContactInformation" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::ContactInformation > r (
        ::xsd::cxx::tree::traits< ::wms::ContactInformation, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactInformation",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::ContactPersonPrimary > r (
      ::wms::ContactPersonPrimary_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::ContactPersonPrimary > r (
      ::wms::ContactPersonPrimary_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::ContactPersonPrimary > r (
      ::wms::ContactPersonPrimary_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactPersonPrimary_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactPersonPrimary_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactPersonPrimary_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactPersonPrimary_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactPersonPrimary_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactPersonPrimary_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::ContactPersonPrimary > r (
      ::wms::ContactPersonPrimary_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::ContactPersonPrimary > r (
      ::wms::ContactPersonPrimary_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::ContactPersonPrimary > r (
      ::wms::ContactPersonPrimary_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::ContactPersonPrimary > r (
        ::wms::ContactPersonPrimary_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ContactPersonPrimary" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::ContactPersonPrimary > r (
        ::xsd::cxx::tree::traits< ::wms::ContactPersonPrimary, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactPersonPrimary",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ContactPersonPrimary" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::ContactPersonPrimary > r (
        ::xsd::cxx::tree::traits< ::wms::ContactPersonPrimary, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactPersonPrimary",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactPerson (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactPerson (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactPerson (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactPerson (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactPerson (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactPerson (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactPerson (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactPerson (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactPerson (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactPerson (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactPerson (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactPerson (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::ContactPerson (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ContactPerson" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactPerson",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ContactPerson" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactPerson",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactOrganization (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactOrganization (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactOrganization (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactOrganization (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactOrganization (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactOrganization (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactOrganization (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactOrganization (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactOrganization (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactOrganization (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactOrganization (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactOrganization (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::ContactOrganization (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ContactOrganization" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactOrganization",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ContactOrganization" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactOrganization",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactPosition (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactPosition (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactPosition (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactPosition (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactPosition (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactPosition (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactPosition (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactPosition (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactPosition (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactPosition (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactPosition (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactPosition (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::ContactPosition (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ContactPosition" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactPosition",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ContactPosition" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactPosition",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::ContactAddress > r (
      ::wms::ContactAddress_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::ContactAddress > r (
      ::wms::ContactAddress_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::ContactAddress > r (
      ::wms::ContactAddress_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactAddress_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactAddress_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactAddress_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactAddress_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactAddress_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactAddress_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::ContactAddress > r (
      ::wms::ContactAddress_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::ContactAddress > r (
      ::wms::ContactAddress_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::ContactAddress > r (
      ::wms::ContactAddress_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::ContactAddress > r (
        ::wms::ContactAddress_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ContactAddress" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::ContactAddress > r (
        ::xsd::cxx::tree::traits< ::wms::ContactAddress, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactAddress",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ContactAddress" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::ContactAddress > r (
        ::xsd::cxx::tree::traits< ::wms::ContactAddress, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactAddress",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::AddressType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::AddressType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::AddressType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::AddressType (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::AddressType (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::AddressType (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::AddressType (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::AddressType (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::AddressType (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::AddressType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::AddressType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::AddressType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::AddressType (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "AddressType" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "AddressType",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "AddressType" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "AddressType",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Address (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Address (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Address (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Address (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Address (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Address (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Address (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Address (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Address (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Address (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Address (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Address (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::Address (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Address" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Address",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Address (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Address" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Address",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::City (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::City (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::City (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::City (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::City (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::City (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::City (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::City (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::City (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::City (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::City (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::City (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::City (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "City" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "City",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  City (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "City" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "City",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::StateOrProvince (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::StateOrProvince (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::StateOrProvince (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::StateOrProvince (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::StateOrProvince (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::StateOrProvince (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::StateOrProvince (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::StateOrProvince (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::StateOrProvince (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::StateOrProvince (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::StateOrProvince (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::StateOrProvince (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::StateOrProvince (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "StateOrProvince" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "StateOrProvince",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "StateOrProvince" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "StateOrProvince",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::PostCode (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::PostCode (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::PostCode (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::PostCode (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::PostCode (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::PostCode (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::PostCode (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::PostCode (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::PostCode (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::PostCode (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::PostCode (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::PostCode (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::PostCode (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PostCode" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PostCode",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "PostCode" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PostCode",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Country (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Country (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Country (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Country (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Country (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Country (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Country (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Country (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Country (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Country (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Country (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Country (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::Country (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Country" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Country",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Country (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Country" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Country",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactVoiceTelephone (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactVoiceTelephone (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactVoiceTelephone (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactVoiceTelephone (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactVoiceTelephone (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactVoiceTelephone (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactVoiceTelephone (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactVoiceTelephone (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactVoiceTelephone (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactVoiceTelephone (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactVoiceTelephone (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactVoiceTelephone (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::ContactVoiceTelephone (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ContactVoiceTelephone" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactVoiceTelephone",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ContactVoiceTelephone" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactVoiceTelephone",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactFacsimileTelephone (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactFacsimileTelephone (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactFacsimileTelephone (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactFacsimileTelephone (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactFacsimileTelephone (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactFacsimileTelephone (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactFacsimileTelephone (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactFacsimileTelephone (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactFacsimileTelephone (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactFacsimileTelephone (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactFacsimileTelephone (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactFacsimileTelephone (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::ContactFacsimileTelephone (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ContactFacsimileTelephone" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactFacsimileTelephone",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ContactFacsimileTelephone" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactFacsimileTelephone",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactElectronicMailAddress (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactElectronicMailAddress (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactElectronicMailAddress (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactElectronicMailAddress (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactElectronicMailAddress (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::ContactElectronicMailAddress (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactElectronicMailAddress (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactElectronicMailAddress (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::ContactElectronicMailAddress (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactElectronicMailAddress (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactElectronicMailAddress (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::ContactElectronicMailAddress (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::ContactElectronicMailAddress (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ContactElectronicMailAddress" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactElectronicMailAddress",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ContactElectronicMailAddress" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ContactElectronicMailAddress",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Fees (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Fees (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Fees (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Fees (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Fees (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Fees (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Fees (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Fees (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Fees (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Fees (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Fees (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::Fees (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::Fees (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Fees" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Fees",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Fees" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Fees",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::AccessConstraints (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::AccessConstraints (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::AccessConstraints (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::AccessConstraints (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::AccessConstraints (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::AccessConstraints (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::AccessConstraints (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::AccessConstraints (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::AccessConstraints (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::AccessConstraints (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::AccessConstraints (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::AccessConstraints (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::AccessConstraints (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "AccessConstraints" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "AccessConstraints",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "AccessConstraints" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "AccessConstraints",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::LayerLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::LayerLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::LayerLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::LayerLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::LayerLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::LayerLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::LayerLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::LayerLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::LayerLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::LayerLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::LayerLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::LayerLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::positive_integer > r (
        ::wms::LayerLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "LayerLimit" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::positive_integer > r (
        new ::xml_schema::positive_integer (
          ::xsd::cxx::tree::traits< ::xml_schema::positive_integer, char >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "LayerLimit",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "LayerLimit" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::positive_integer > r (
        new ::xml_schema::positive_integer (
          ::xsd::cxx::tree::traits< ::xml_schema::positive_integer, char >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "LayerLimit",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::MaxWidth (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::MaxWidth (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::MaxWidth (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MaxWidth (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MaxWidth (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MaxWidth (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MaxWidth (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MaxWidth (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MaxWidth (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::MaxWidth (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::MaxWidth (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::MaxWidth (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::positive_integer > r (
        ::wms::MaxWidth (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MaxWidth" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::positive_integer > r (
        new ::xml_schema::positive_integer (
          ::xsd::cxx::tree::traits< ::xml_schema::positive_integer, char >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MaxWidth",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "MaxWidth" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::positive_integer > r (
        new ::xml_schema::positive_integer (
          ::xsd::cxx::tree::traits< ::xml_schema::positive_integer, char >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MaxWidth",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::MaxHeight (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::MaxHeight (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::MaxHeight (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MaxHeight (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MaxHeight (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MaxHeight (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MaxHeight (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MaxHeight (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MaxHeight (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::MaxHeight (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::MaxHeight (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::positive_integer > r (
      ::wms::MaxHeight (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::positive_integer > r (
        ::wms::MaxHeight (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MaxHeight" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::positive_integer > r (
        new ::xml_schema::positive_integer (
          ::xsd::cxx::tree::traits< ::xml_schema::positive_integer, char >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MaxHeight",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "MaxHeight" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::positive_integer > r (
        new ::xml_schema::positive_integer (
          ::xsd::cxx::tree::traits< ::xml_schema::positive_integer, char >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MaxHeight",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Capability > r (
      ::wms::Capability_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Capability > r (
      ::wms::Capability_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Capability > r (
      ::wms::Capability_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Capability_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Capability_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Capability_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Capability_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Capability_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Capability_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Capability > r (
      ::wms::Capability_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Capability > r (
      ::wms::Capability_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Capability > r (
      ::wms::Capability_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::Capability > r (
        ::wms::Capability_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Capability" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Capability > r (
        ::xsd::cxx::tree::traits< ::wms::Capability, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Capability",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Capability" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Capability > r (
        ::xsd::cxx::tree::traits< ::wms::Capability, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Capability",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Request > r (
      ::wms::Request_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Request > r (
      ::wms::Request_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Request > r (
      ::wms::Request_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Request_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Request_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Request_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Request_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Request_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Request_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Request > r (
      ::wms::Request_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Request > r (
      ::wms::Request_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Request > r (
      ::wms::Request_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::Request > r (
        ::wms::Request_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Request" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Request > r (
        ::xsd::cxx::tree::traits< ::wms::Request, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Request",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Request >
  Request_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Request" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Request > r (
        ::xsd::cxx::tree::traits< ::wms::Request, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Request",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetCapabilities (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetCapabilities (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetCapabilities (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::GetCapabilities (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::GetCapabilities (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::GetCapabilities (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::GetCapabilities (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::GetCapabilities (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::GetCapabilities (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetCapabilities (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetCapabilities (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetCapabilities (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::OperationType > r (
        ::wms::GetCapabilities (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetCapabilities" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::OperationType > r (
        ::xsd::cxx::tree::traits< ::wms::OperationType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetCapabilities",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetCapabilities" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::OperationType > r (
        ::xsd::cxx::tree::traits< ::wms::OperationType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetCapabilities",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetMap (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetMap (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetMap (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::GetMap (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::GetMap (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::GetMap (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::GetMap (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::GetMap (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::GetMap (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetMap (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetMap (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetMap (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::OperationType > r (
        ::wms::GetMap (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMap" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::OperationType > r (
        ::xsd::cxx::tree::traits< ::wms::OperationType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMap",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetMap" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::OperationType > r (
        ::xsd::cxx::tree::traits< ::wms::OperationType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMap",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetFeatureInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetFeatureInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetFeatureInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::GetFeatureInfo (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::GetFeatureInfo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::GetFeatureInfo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::GetFeatureInfo (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::GetFeatureInfo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::GetFeatureInfo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetFeatureInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetFeatureInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::GetFeatureInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::OperationType > r (
        ::wms::GetFeatureInfo (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetFeatureInfo" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::OperationType > r (
        ::xsd::cxx::tree::traits< ::wms::OperationType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetFeatureInfo",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetFeatureInfo" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::OperationType > r (
        ::xsd::cxx::tree::traits< ::wms::OperationType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetFeatureInfo",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::_ExtendedOperation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::_ExtendedOperation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::_ExtendedOperation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::_ExtendedOperation (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::_ExtendedOperation (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::_ExtendedOperation (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::_ExtendedOperation (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::_ExtendedOperation (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::_ExtendedOperation (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::_ExtendedOperation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::_ExtendedOperation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::OperationType > r (
      ::wms::_ExtendedOperation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::OperationType > r (
        ::wms::_ExtendedOperation (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "_ExtendedOperation" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::OperationType > r (
        ::xsd::cxx::tree::traits< ::wms::OperationType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "_ExtendedOperation",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "_ExtendedOperation" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::OperationType > r (
        ::xsd::cxx::tree::traits< ::wms::OperationType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "_ExtendedOperation",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::DCPType > r (
      ::wms::DCPType_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::DCPType > r (
      ::wms::DCPType_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::DCPType > r (
      ::wms::DCPType_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::DCPType_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::DCPType_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::DCPType_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::DCPType_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::DCPType_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::DCPType_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::DCPType > r (
      ::wms::DCPType_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::DCPType > r (
      ::wms::DCPType_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::DCPType > r (
      ::wms::DCPType_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::DCPType > r (
        ::wms::DCPType_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DCPType" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::DCPType > r (
        ::xsd::cxx::tree::traits< ::wms::DCPType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DCPType",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "DCPType" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::DCPType > r (
        ::xsd::cxx::tree::traits< ::wms::DCPType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DCPType",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::HTTP > r (
      ::wms::HTTP_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::HTTP > r (
      ::wms::HTTP_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::HTTP > r (
      ::wms::HTTP_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::HTTP_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::HTTP_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::HTTP_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::HTTP_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::HTTP_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::HTTP_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::HTTP > r (
      ::wms::HTTP_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::HTTP > r (
      ::wms::HTTP_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::HTTP > r (
      ::wms::HTTP_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::HTTP > r (
        ::wms::HTTP_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "HTTP" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::HTTP > r (
        ::xsd::cxx::tree::traits< ::wms::HTTP, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "HTTP",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "HTTP" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::HTTP > r (
        ::xsd::cxx::tree::traits< ::wms::HTTP, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "HTTP",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Get > r (
      ::wms::Get_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Get > r (
      ::wms::Get_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Get > r (
      ::wms::Get_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Get_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Get_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Get_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Get_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Get_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Get_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Get > r (
      ::wms::Get_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Get > r (
      ::wms::Get_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Get > r (
      ::wms::Get_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::Get > r (
        ::wms::Get_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Get" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Get > r (
        ::xsd::cxx::tree::traits< ::wms::Get, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Get",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Get >
  Get_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Get" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Get > r (
        ::xsd::cxx::tree::traits< ::wms::Get, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Get",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Post > r (
      ::wms::Post_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Post > r (
      ::wms::Post_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Post > r (
      ::wms::Post_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Post_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Post_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Post_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Post_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Post_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Post_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Post > r (
      ::wms::Post_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Post > r (
      ::wms::Post_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Post > r (
      ::wms::Post_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::Post > r (
        ::wms::Post_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Post" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Post > r (
        ::xsd::cxx::tree::traits< ::wms::Post, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Post",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Post >
  Post_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Post" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Post > r (
        ::xsd::cxx::tree::traits< ::wms::Post, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Post",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Exception > r (
      ::wms::Exception_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Exception > r (
      ::wms::Exception_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Exception > r (
      ::wms::Exception_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Exception_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Exception_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Exception_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Exception_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Exception_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Exception_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Exception > r (
      ::wms::Exception_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Exception > r (
      ::wms::Exception_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Exception > r (
      ::wms::Exception_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::Exception > r (
        ::wms::Exception_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Exception" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Exception > r (
        ::xsd::cxx::tree::traits< ::wms::Exception, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Exception",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Exception" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Exception > r (
        ::xsd::cxx::tree::traits< ::wms::Exception, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Exception",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::type > r (
      ::wms::_ExtendedCapabilities (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::type > r (
      ::wms::_ExtendedCapabilities (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::type > r (
      ::wms::_ExtendedCapabilities (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::_ExtendedCapabilities (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::_ExtendedCapabilities (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::_ExtendedCapabilities (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::_ExtendedCapabilities (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::_ExtendedCapabilities (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::_ExtendedCapabilities (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::type > r (
      ::wms::_ExtendedCapabilities (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::type > r (
      ::wms::_ExtendedCapabilities (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::type > r (
      ::wms::_ExtendedCapabilities (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::type > r (
        ::wms::_ExtendedCapabilities (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "_ExtendedCapabilities" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::type > r (
        ::xsd::cxx::tree::traits< ::xml_schema::type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "_ExtendedCapabilities",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "_ExtendedCapabilities" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::type > r (
        ::xsd::cxx::tree::traits< ::xml_schema::type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "_ExtendedCapabilities",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Layer > r (
      ::wms::Layer_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Layer > r (
      ::wms::Layer_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Layer > r (
      ::wms::Layer_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Layer_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Layer_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Layer_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Layer_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Layer_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Layer_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Layer > r (
      ::wms::Layer_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Layer > r (
      ::wms::Layer_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Layer > r (
      ::wms::Layer_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::Layer > r (
        ::wms::Layer_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Layer" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Layer > r (
        ::xsd::cxx::tree::traits< ::wms::Layer, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Layer",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Layer" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Layer > r (
        ::xsd::cxx::tree::traits< ::wms::Layer, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Layer",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::CRS (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::CRS (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::CRS (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::CRS (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::CRS (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::CRS (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::CRS (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::CRS (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::CRS (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::CRS (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::CRS (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::wms::CRS (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::wms::CRS (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CRS" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CRS",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "CRS" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CRS",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::EX_GeographicBoundingBox > r (
      ::wms::EX_GeographicBoundingBox_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::EX_GeographicBoundingBox > r (
      ::wms::EX_GeographicBoundingBox_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::EX_GeographicBoundingBox > r (
      ::wms::EX_GeographicBoundingBox_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::EX_GeographicBoundingBox_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::EX_GeographicBoundingBox_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::EX_GeographicBoundingBox_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::EX_GeographicBoundingBox_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::EX_GeographicBoundingBox_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::EX_GeographicBoundingBox_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::EX_GeographicBoundingBox > r (
      ::wms::EX_GeographicBoundingBox_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::EX_GeographicBoundingBox > r (
      ::wms::EX_GeographicBoundingBox_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::EX_GeographicBoundingBox > r (
      ::wms::EX_GeographicBoundingBox_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::EX_GeographicBoundingBox > r (
        ::wms::EX_GeographicBoundingBox_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "EX_GeographicBoundingBox" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::EX_GeographicBoundingBox > r (
        ::xsd::cxx::tree::traits< ::wms::EX_GeographicBoundingBox, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "EX_GeographicBoundingBox",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "EX_GeographicBoundingBox" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::EX_GeographicBoundingBox > r (
        ::xsd::cxx::tree::traits< ::wms::EX_GeographicBoundingBox, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "EX_GeographicBoundingBox",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::BoundingBox > r (
      ::wms::BoundingBox_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::BoundingBox > r (
      ::wms::BoundingBox_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::BoundingBox > r (
      ::wms::BoundingBox_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::BoundingBox_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::BoundingBox_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::BoundingBox_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::BoundingBox_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::BoundingBox_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::BoundingBox_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::BoundingBox > r (
      ::wms::BoundingBox_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::BoundingBox > r (
      ::wms::BoundingBox_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::BoundingBox > r (
      ::wms::BoundingBox_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::BoundingBox > r (
        ::wms::BoundingBox_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "BoundingBox" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::BoundingBox > r (
        ::xsd::cxx::tree::traits< ::wms::BoundingBox, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "BoundingBox",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "BoundingBox" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::BoundingBox > r (
        ::xsd::cxx::tree::traits< ::wms::BoundingBox, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "BoundingBox",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Dimension > r (
      ::wms::Dimension_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Dimension > r (
      ::wms::Dimension_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Dimension > r (
      ::wms::Dimension_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Dimension_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Dimension_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Dimension_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Dimension_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Dimension_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Dimension_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Dimension > r (
      ::wms::Dimension_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Dimension > r (
      ::wms::Dimension_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Dimension > r (
      ::wms::Dimension_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::Dimension > r (
        ::wms::Dimension_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Dimension" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Dimension > r (
        ::xsd::cxx::tree::traits< ::wms::Dimension, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Dimension",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Dimension" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Dimension > r (
        ::xsd::cxx::tree::traits< ::wms::Dimension, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Dimension",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Attribution > r (
      ::wms::Attribution_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Attribution > r (
      ::wms::Attribution_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Attribution > r (
      ::wms::Attribution_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Attribution_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Attribution_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Attribution_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Attribution_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Attribution_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Attribution_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Attribution > r (
      ::wms::Attribution_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Attribution > r (
      ::wms::Attribution_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Attribution > r (
      ::wms::Attribution_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::Attribution > r (
        ::wms::Attribution_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Attribution" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Attribution > r (
        ::xsd::cxx::tree::traits< ::wms::Attribution, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Attribution",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Attribution" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Attribution > r (
        ::xsd::cxx::tree::traits< ::wms::Attribution, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Attribution",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::LogoURL > r (
      ::wms::LogoURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::LogoURL > r (
      ::wms::LogoURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::LogoURL > r (
      ::wms::LogoURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::LogoURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::LogoURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::LogoURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::LogoURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::LogoURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::LogoURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::LogoURL > r (
      ::wms::LogoURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::LogoURL > r (
      ::wms::LogoURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::LogoURL > r (
      ::wms::LogoURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::LogoURL > r (
        ::wms::LogoURL_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "LogoURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::LogoURL > r (
        ::xsd::cxx::tree::traits< ::wms::LogoURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "LogoURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "LogoURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::LogoURL > r (
        ::xsd::cxx::tree::traits< ::wms::LogoURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "LogoURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::MetadataURL > r (
      ::wms::MetadataURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::MetadataURL > r (
      ::wms::MetadataURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::MetadataURL > r (
      ::wms::MetadataURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MetadataURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MetadataURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MetadataURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MetadataURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MetadataURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MetadataURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::MetadataURL > r (
      ::wms::MetadataURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::MetadataURL > r (
      ::wms::MetadataURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::MetadataURL > r (
      ::wms::MetadataURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::MetadataURL > r (
        ::wms::MetadataURL_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MetadataURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::MetadataURL > r (
        ::xsd::cxx::tree::traits< ::wms::MetadataURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MetadataURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "MetadataURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::MetadataURL > r (
        ::xsd::cxx::tree::traits< ::wms::MetadataURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MetadataURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::AuthorityURL > r (
      ::wms::AuthorityURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::AuthorityURL > r (
      ::wms::AuthorityURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::AuthorityURL > r (
      ::wms::AuthorityURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::AuthorityURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::AuthorityURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::AuthorityURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::AuthorityURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::AuthorityURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::AuthorityURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::AuthorityURL > r (
      ::wms::AuthorityURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::AuthorityURL > r (
      ::wms::AuthorityURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::AuthorityURL > r (
      ::wms::AuthorityURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::AuthorityURL > r (
        ::wms::AuthorityURL_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "AuthorityURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::AuthorityURL > r (
        ::xsd::cxx::tree::traits< ::wms::AuthorityURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "AuthorityURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "AuthorityURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::AuthorityURL > r (
        ::xsd::cxx::tree::traits< ::wms::AuthorityURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "AuthorityURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Identifier > r (
      ::wms::Identifier_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Identifier > r (
      ::wms::Identifier_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Identifier > r (
      ::wms::Identifier_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Identifier_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Identifier_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Identifier_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Identifier_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Identifier_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Identifier_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Identifier > r (
      ::wms::Identifier_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Identifier > r (
      ::wms::Identifier_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Identifier > r (
      ::wms::Identifier_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::Identifier > r (
        ::wms::Identifier_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Identifier" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Identifier > r (
        ::xsd::cxx::tree::traits< ::wms::Identifier, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Identifier",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Identifier" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Identifier > r (
        ::xsd::cxx::tree::traits< ::wms::Identifier, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Identifier",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::DataURL > r (
      ::wms::DataURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::DataURL > r (
      ::wms::DataURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::DataURL > r (
      ::wms::DataURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::DataURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::DataURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::DataURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::DataURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::DataURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::DataURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::DataURL > r (
      ::wms::DataURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::DataURL > r (
      ::wms::DataURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::DataURL > r (
      ::wms::DataURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::DataURL > r (
        ::wms::DataURL_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DataURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::DataURL > r (
        ::xsd::cxx::tree::traits< ::wms::DataURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DataURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "DataURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::DataURL > r (
        ::xsd::cxx::tree::traits< ::wms::DataURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DataURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::FeatureListURL > r (
      ::wms::FeatureListURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::FeatureListURL > r (
      ::wms::FeatureListURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::FeatureListURL > r (
      ::wms::FeatureListURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::FeatureListURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::FeatureListURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::FeatureListURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::FeatureListURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::FeatureListURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::FeatureListURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::FeatureListURL > r (
      ::wms::FeatureListURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::FeatureListURL > r (
      ::wms::FeatureListURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::FeatureListURL > r (
      ::wms::FeatureListURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::FeatureListURL > r (
        ::wms::FeatureListURL_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "FeatureListURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::FeatureListURL > r (
        ::xsd::cxx::tree::traits< ::wms::FeatureListURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FeatureListURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "FeatureListURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::FeatureListURL > r (
        ::xsd::cxx::tree::traits< ::wms::FeatureListURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FeatureListURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Style > r (
      ::wms::Style_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Style > r (
      ::wms::Style_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Style > r (
      ::wms::Style_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Style_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Style_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::Style_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Style_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Style_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::Style_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::Style > r (
      ::wms::Style_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Style > r (
      ::wms::Style_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::Style > r (
      ::wms::Style_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::Style > r (
        ::wms::Style_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Style" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Style > r (
        ::xsd::cxx::tree::traits< ::wms::Style, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Style",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::Style >
  Style_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Style" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::Style > r (
        ::xsd::cxx::tree::traits< ::wms::Style, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Style",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::LegendURL > r (
      ::wms::LegendURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::LegendURL > r (
      ::wms::LegendURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::LegendURL > r (
      ::wms::LegendURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::LegendURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::LegendURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::LegendURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::LegendURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::LegendURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::LegendURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::LegendURL > r (
      ::wms::LegendURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::LegendURL > r (
      ::wms::LegendURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::LegendURL > r (
      ::wms::LegendURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::LegendURL > r (
        ::wms::LegendURL_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "LegendURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::LegendURL > r (
        ::xsd::cxx::tree::traits< ::wms::LegendURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "LegendURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "LegendURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::LegendURL > r (
        ::xsd::cxx::tree::traits< ::wms::LegendURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "LegendURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::StyleSheetURL > r (
      ::wms::StyleSheetURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::StyleSheetURL > r (
      ::wms::StyleSheetURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::StyleSheetURL > r (
      ::wms::StyleSheetURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::StyleSheetURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::StyleSheetURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::StyleSheetURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::StyleSheetURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::StyleSheetURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::StyleSheetURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::StyleSheetURL > r (
      ::wms::StyleSheetURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::StyleSheetURL > r (
      ::wms::StyleSheetURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::StyleSheetURL > r (
      ::wms::StyleSheetURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::StyleSheetURL > r (
        ::wms::StyleSheetURL_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "StyleSheetURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::StyleSheetURL > r (
        ::xsd::cxx::tree::traits< ::wms::StyleSheetURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "StyleSheetURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "StyleSheetURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::StyleSheetURL > r (
        ::xsd::cxx::tree::traits< ::wms::StyleSheetURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "StyleSheetURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::StyleURL > r (
      ::wms::StyleURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::StyleURL > r (
      ::wms::StyleURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::StyleURL > r (
      ::wms::StyleURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::StyleURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::StyleURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::StyleURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::StyleURL_ (isrc, f, p);
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::StyleURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::StyleURL_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::wms::StyleURL > r (
      ::wms::StyleURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::StyleURL > r (
      ::wms::StyleURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::wms::StyleURL > r (
      ::wms::StyleURL_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::wms::StyleURL > r (
        ::wms::StyleURL_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "StyleURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::StyleURL > r (
        ::xsd::cxx::tree::traits< ::wms::StyleURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "StyleURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "StyleURL" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::wms::StyleURL > r (
        ::xsd::cxx::tree::traits< ::wms::StyleURL, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "StyleURL",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::wms::MinScaleDenominator (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::wms::MinScaleDenominator (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::wms::MinScaleDenominator (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MinScaleDenominator (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MinScaleDenominator (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MinScaleDenominator (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MinScaleDenominator (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MinScaleDenominator (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MinScaleDenominator (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::wms::MinScaleDenominator (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::wms::MinScaleDenominator (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::wms::MinScaleDenominator (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::double_ > r (
        ::wms::MinScaleDenominator (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MinScaleDenominator" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::double_ > r (
        new ::xml_schema::double_ (
          ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MinScaleDenominator",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "MinScaleDenominator" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::double_ > r (
        new ::xml_schema::double_ (
          ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MinScaleDenominator",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::wms::MaxScaleDenominator (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::wms::MaxScaleDenominator (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::wms::MaxScaleDenominator (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MaxScaleDenominator (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MaxScaleDenominator (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::wms::MaxScaleDenominator (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MaxScaleDenominator (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MaxScaleDenominator (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::wms::MaxScaleDenominator (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::wms::MaxScaleDenominator (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::wms::MaxScaleDenominator (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::double_ > r (
      ::wms::MaxScaleDenominator (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::double_ > r (
        ::wms::MaxScaleDenominator (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MaxScaleDenominator" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::double_ > r (
        new ::xml_schema::double_ (
          ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MaxScaleDenominator",
      "http://www.opengis.net/wms");
  }

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "MaxScaleDenominator" &&
        n.namespace_ () == "http://www.opengis.net/wms")
    {
      ::std::auto_ptr< ::xml_schema::double_ > r (
        new ::xml_schema::double_ (
          ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MaxScaleDenominator",
      "http://www.opengis.net/wms");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

