// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CAPABILITIES_1_3_0_HXX
#define CAPABILITIES_1_3_0_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace wms
{
  class OperationType;
  class longitudeType;
  class latitudeType;
  class WMS_Capabilities;
  class KeywordList;
  class Keyword;
  class OnlineResource;
  class Service;
  class ContactInformation;
  class ContactPersonPrimary;
  class ContactAddress;
  class Capability;
  class Request;
  class DCPType;
  class HTTP;
  class Get;
  class Post;
  class Exception;
  class Layer;
  class EX_GeographicBoundingBox;
  class BoundingBox;
  class Dimension;
  class Attribution;
  class LogoURL;
  class MetadataURL;
  class AuthorityURL;
  class Identifier;
  class DataURL;
  class FeatureListURL;
  class Style;
  class LegendURL;
  class StyleSheetURL;
  class StyleURL;
  class Name;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "xlinks.hxx"

namespace wms
{
  class OperationType: public ::xml_schema::type
  {
    public:
    // Format
    // 
    typedef ::xml_schema::string Format_type;
    typedef ::xsd::cxx::tree::sequence< Format_type > Format_sequence;
    typedef Format_sequence::iterator Format_iterator;
    typedef Format_sequence::const_iterator Format_const_iterator;
    typedef ::xsd::cxx::tree::traits< Format_type, char > Format_traits;

    const Format_sequence&
    Format () const;

    Format_sequence&
    Format ();

    void
    Format (const Format_sequence& s);

    // DCPType
    // 
    typedef ::wms::DCPType DCPType_type;
    typedef ::xsd::cxx::tree::sequence< DCPType_type > DCPType_sequence;
    typedef DCPType_sequence::iterator DCPType_iterator;
    typedef DCPType_sequence::const_iterator DCPType_const_iterator;
    typedef ::xsd::cxx::tree::traits< DCPType_type, char > DCPType_traits;

    const DCPType_sequence&
    DCPType () const;

    DCPType_sequence&
    DCPType ();

    void
    DCPType (const DCPType_sequence& s);

    // Constructors.
    //
    OperationType ();

    OperationType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    OperationType (const OperationType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual OperationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~OperationType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Format_sequence Format_;
    DCPType_sequence DCPType_;
  };

  class longitudeType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    // Constructors.
    //
    longitudeType (const ::xml_schema::double_&);

    longitudeType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    longitudeType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    longitudeType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    longitudeType (const longitudeType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual longitudeType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~longitudeType ();
  };

  class latitudeType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    // Constructors.
    //
    latitudeType (const ::xml_schema::double_&);

    latitudeType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    latitudeType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    latitudeType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    latitudeType (const latitudeType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual latitudeType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~latitudeType ();
  };

  class WMS_Capabilities: public ::xml_schema::type
  {
    public:
    // Service
    // 
    typedef ::wms::Service Service_type;
    typedef ::xsd::cxx::tree::traits< Service_type, char > Service_traits;

    const Service_type&
    Service () const;

    Service_type&
    Service ();

    void
    Service (const Service_type& x);

    void
    Service (::std::auto_ptr< Service_type > p);

    // Capability
    // 
    typedef ::wms::Capability Capability_type;
    typedef ::xsd::cxx::tree::traits< Capability_type, char > Capability_traits;

    const Capability_type&
    Capability () const;

    Capability_type&
    Capability ();

    void
    Capability (const Capability_type& x);

    void
    Capability (::std::auto_ptr< Capability_type > p);

    // version
    // 
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    static const version_type&
    version_default_value ();

    // updateSequence
    // 
    typedef ::xml_schema::string updateSequence_type;
    typedef ::xsd::cxx::tree::optional< updateSequence_type > updateSequence_optional;
    typedef ::xsd::cxx::tree::traits< updateSequence_type, char > updateSequence_traits;

    const updateSequence_optional&
    updateSequence () const;

    updateSequence_optional&
    updateSequence ();

    void
    updateSequence (const updateSequence_type& x);

    void
    updateSequence (const updateSequence_optional& x);

    void
    updateSequence (::std::auto_ptr< updateSequence_type > p);

    // Constructors.
    //
    WMS_Capabilities (const Service_type&,
                      const Capability_type&);

    WMS_Capabilities (::std::auto_ptr< Service_type >&,
                      ::std::auto_ptr< Capability_type >&);

    WMS_Capabilities (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    WMS_Capabilities (const WMS_Capabilities& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual WMS_Capabilities*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~WMS_Capabilities ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Service_type > Service_;
    ::xsd::cxx::tree::one< Capability_type > Capability_;
    ::xsd::cxx::tree::one< version_type > version_;
    static const version_type version_default_value_;
    updateSequence_optional updateSequence_;
  };

  class KeywordList: public ::xml_schema::type
  {
    public:
    // Keyword
    // 
    typedef ::wms::Keyword Keyword_type;
    typedef ::xsd::cxx::tree::sequence< Keyword_type > Keyword_sequence;
    typedef Keyword_sequence::iterator Keyword_iterator;
    typedef Keyword_sequence::const_iterator Keyword_const_iterator;
    typedef ::xsd::cxx::tree::traits< Keyword_type, char > Keyword_traits;

    const Keyword_sequence&
    Keyword () const;

    Keyword_sequence&
    Keyword ();

    void
    Keyword (const Keyword_sequence& s);

    // Constructors.
    //
    KeywordList ();

    KeywordList (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    KeywordList (const KeywordList& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual KeywordList*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~KeywordList ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Keyword_sequence Keyword_;
  };

  class Keyword: public ::xml_schema::string
  {
    public:
    // vocabulary
    // 
    typedef ::xml_schema::string vocabulary_type;
    typedef ::xsd::cxx::tree::optional< vocabulary_type > vocabulary_optional;
    typedef ::xsd::cxx::tree::traits< vocabulary_type, char > vocabulary_traits;

    const vocabulary_optional&
    vocabulary () const;

    vocabulary_optional&
    vocabulary ();

    void
    vocabulary (const vocabulary_type& x);

    void
    vocabulary (const vocabulary_optional& x);

    void
    vocabulary (::std::auto_ptr< vocabulary_type > p);

    // Constructors.
    //
    Keyword ();

    Keyword (const char*);

    Keyword (const ::std::string&);

    Keyword (const ::xml_schema::string&);

    Keyword (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Keyword (const Keyword& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Keyword*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Keyword ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    vocabulary_optional vocabulary_;
  };

  class OnlineResource: public ::xml_schema::type
  {
    public:
    // type
    // 
    typedef ::xml_schema::string type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    static const type_type&
    type_default_value ();

    // href
    // 
    typedef ::xml_schema::uri href_type;
    typedef ::xsd::cxx::tree::optional< href_type > href_optional;
    typedef ::xsd::cxx::tree::traits< href_type, char > href_traits;

    const href_optional&
    href () const;

    href_optional&
    href ();

    void
    href (const href_type& x);

    void
    href (const href_optional& x);

    void
    href (::std::auto_ptr< href_type > p);

    // role
    // 
    typedef ::xml_schema::uri role_type;
    typedef ::xsd::cxx::tree::optional< role_type > role_optional;
    typedef ::xsd::cxx::tree::traits< role_type, char > role_traits;

    const role_optional&
    role () const;

    role_optional&
    role ();

    void
    role (const role_type& x);

    void
    role (const role_optional& x);

    void
    role (::std::auto_ptr< role_type > p);

    // arcrole
    // 
    typedef ::xml_schema::uri arcrole_type;
    typedef ::xsd::cxx::tree::optional< arcrole_type > arcrole_optional;
    typedef ::xsd::cxx::tree::traits< arcrole_type, char > arcrole_traits;

    const arcrole_optional&
    arcrole () const;

    arcrole_optional&
    arcrole ();

    void
    arcrole (const arcrole_type& x);

    void
    arcrole (const arcrole_optional& x);

    void
    arcrole (::std::auto_ptr< arcrole_type > p);

    // title
    // 
    typedef ::xml_schema::string title_type;
    typedef ::xsd::cxx::tree::optional< title_type > title_optional;
    typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

    const title_optional&
    title () const;

    title_optional&
    title ();

    void
    title (const title_type& x);

    void
    title (const title_optional& x);

    void
    title (::std::auto_ptr< title_type > p);

    // show
    // 
    typedef ::xlink::show show_type;
    typedef ::xsd::cxx::tree::optional< show_type > show_optional;
    typedef ::xsd::cxx::tree::traits< show_type, char > show_traits;

    const show_optional&
    show () const;

    show_optional&
    show ();

    void
    show (const show_type& x);

    void
    show (const show_optional& x);

    void
    show (::std::auto_ptr< show_type > p);

    // actuate
    // 
    typedef ::xlink::actuate actuate_type;
    typedef ::xsd::cxx::tree::optional< actuate_type > actuate_optional;
    typedef ::xsd::cxx::tree::traits< actuate_type, char > actuate_traits;

    const actuate_optional&
    actuate () const;

    actuate_optional&
    actuate ();

    void
    actuate (const actuate_type& x);

    void
    actuate (const actuate_optional& x);

    void
    actuate (::std::auto_ptr< actuate_type > p);

    // Constructors.
    //
    OnlineResource ();

    OnlineResource (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    OnlineResource (const OnlineResource& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual OnlineResource*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~OnlineResource ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    static const type_type type_default_value_;
    href_optional href_;
    role_optional role_;
    arcrole_optional arcrole_;
    title_optional title_;
    show_optional show_;
    actuate_optional actuate_;
  };

  class Service: public ::xml_schema::type
  {
    public:
    // Name
    // 
    typedef ::wms::Name Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::auto_ptr< Name_type > p);

    // Title
    // 
    typedef ::xml_schema::string Title_type;
    typedef ::xsd::cxx::tree::traits< Title_type, char > Title_traits;

    const Title_type&
    Title () const;

    Title_type&
    Title ();

    void
    Title (const Title_type& x);

    void
    Title (::std::auto_ptr< Title_type > p);

    // Abstract
    // 
    typedef ::xml_schema::string Abstract_type;
    typedef ::xsd::cxx::tree::optional< Abstract_type > Abstract_optional;
    typedef ::xsd::cxx::tree::traits< Abstract_type, char > Abstract_traits;

    const Abstract_optional&
    Abstract () const;

    Abstract_optional&
    Abstract ();

    void
    Abstract (const Abstract_type& x);

    void
    Abstract (const Abstract_optional& x);

    void
    Abstract (::std::auto_ptr< Abstract_type > p);

    // KeywordList
    // 
    typedef ::wms::KeywordList KeywordList_type;
    typedef ::xsd::cxx::tree::optional< KeywordList_type > KeywordList_optional;
    typedef ::xsd::cxx::tree::traits< KeywordList_type, char > KeywordList_traits;

    const KeywordList_optional&
    KeywordList () const;

    KeywordList_optional&
    KeywordList ();

    void
    KeywordList (const KeywordList_type& x);

    void
    KeywordList (const KeywordList_optional& x);

    void
    KeywordList (::std::auto_ptr< KeywordList_type > p);

    // OnlineResource
    // 
    typedef ::wms::OnlineResource OnlineResource_type;
    typedef ::xsd::cxx::tree::traits< OnlineResource_type, char > OnlineResource_traits;

    const OnlineResource_type&
    OnlineResource () const;

    OnlineResource_type&
    OnlineResource ();

    void
    OnlineResource (const OnlineResource_type& x);

    void
    OnlineResource (::std::auto_ptr< OnlineResource_type > p);

    // ContactInformation
    // 
    typedef ::wms::ContactInformation ContactInformation_type;
    typedef ::xsd::cxx::tree::optional< ContactInformation_type > ContactInformation_optional;
    typedef ::xsd::cxx::tree::traits< ContactInformation_type, char > ContactInformation_traits;

    const ContactInformation_optional&
    ContactInformation () const;

    ContactInformation_optional&
    ContactInformation ();

    void
    ContactInformation (const ContactInformation_type& x);

    void
    ContactInformation (const ContactInformation_optional& x);

    void
    ContactInformation (::std::auto_ptr< ContactInformation_type > p);

    // Fees
    // 
    typedef ::xml_schema::string Fees_type;
    typedef ::xsd::cxx::tree::optional< Fees_type > Fees_optional;
    typedef ::xsd::cxx::tree::traits< Fees_type, char > Fees_traits;

    const Fees_optional&
    Fees () const;

    Fees_optional&
    Fees ();

    void
    Fees (const Fees_type& x);

    void
    Fees (const Fees_optional& x);

    void
    Fees (::std::auto_ptr< Fees_type > p);

    // AccessConstraints
    // 
    typedef ::xml_schema::string AccessConstraints_type;
    typedef ::xsd::cxx::tree::optional< AccessConstraints_type > AccessConstraints_optional;
    typedef ::xsd::cxx::tree::traits< AccessConstraints_type, char > AccessConstraints_traits;

    const AccessConstraints_optional&
    AccessConstraints () const;

    AccessConstraints_optional&
    AccessConstraints ();

    void
    AccessConstraints (const AccessConstraints_type& x);

    void
    AccessConstraints (const AccessConstraints_optional& x);

    void
    AccessConstraints (::std::auto_ptr< AccessConstraints_type > p);

    // LayerLimit
    // 
    typedef ::xml_schema::positive_integer LayerLimit_type;
    typedef ::xsd::cxx::tree::optional< LayerLimit_type > LayerLimit_optional;
    typedef ::xsd::cxx::tree::traits< LayerLimit_type, char > LayerLimit_traits;

    const LayerLimit_optional&
    LayerLimit () const;

    LayerLimit_optional&
    LayerLimit ();

    void
    LayerLimit (const LayerLimit_type& x);

    void
    LayerLimit (const LayerLimit_optional& x);

    // MaxWidth
    // 
    typedef ::xml_schema::positive_integer MaxWidth_type;
    typedef ::xsd::cxx::tree::optional< MaxWidth_type > MaxWidth_optional;
    typedef ::xsd::cxx::tree::traits< MaxWidth_type, char > MaxWidth_traits;

    const MaxWidth_optional&
    MaxWidth () const;

    MaxWidth_optional&
    MaxWidth ();

    void
    MaxWidth (const MaxWidth_type& x);

    void
    MaxWidth (const MaxWidth_optional& x);

    // MaxHeight
    // 
    typedef ::xml_schema::positive_integer MaxHeight_type;
    typedef ::xsd::cxx::tree::optional< MaxHeight_type > MaxHeight_optional;
    typedef ::xsd::cxx::tree::traits< MaxHeight_type, char > MaxHeight_traits;

    const MaxHeight_optional&
    MaxHeight () const;

    MaxHeight_optional&
    MaxHeight ();

    void
    MaxHeight (const MaxHeight_type& x);

    void
    MaxHeight (const MaxHeight_optional& x);

    // Constructors.
    //
    Service (const Name_type&,
             const Title_type&,
             const OnlineResource_type&);

    Service (const Name_type&,
             const Title_type&,
             ::std::auto_ptr< OnlineResource_type >&);

    Service (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Service (const Service& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Service*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Service ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Name_type > Name_;
    ::xsd::cxx::tree::one< Title_type > Title_;
    Abstract_optional Abstract_;
    KeywordList_optional KeywordList_;
    ::xsd::cxx::tree::one< OnlineResource_type > OnlineResource_;
    ContactInformation_optional ContactInformation_;
    Fees_optional Fees_;
    AccessConstraints_optional AccessConstraints_;
    LayerLimit_optional LayerLimit_;
    MaxWidth_optional MaxWidth_;
    MaxHeight_optional MaxHeight_;
  };

  class ContactInformation: public ::xml_schema::type
  {
    public:
    // ContactPersonPrimary
    // 
    typedef ::wms::ContactPersonPrimary ContactPersonPrimary_type;
    typedef ::xsd::cxx::tree::optional< ContactPersonPrimary_type > ContactPersonPrimary_optional;
    typedef ::xsd::cxx::tree::traits< ContactPersonPrimary_type, char > ContactPersonPrimary_traits;

    const ContactPersonPrimary_optional&
    ContactPersonPrimary () const;

    ContactPersonPrimary_optional&
    ContactPersonPrimary ();

    void
    ContactPersonPrimary (const ContactPersonPrimary_type& x);

    void
    ContactPersonPrimary (const ContactPersonPrimary_optional& x);

    void
    ContactPersonPrimary (::std::auto_ptr< ContactPersonPrimary_type > p);

    // ContactPosition
    // 
    typedef ::xml_schema::string ContactPosition_type;
    typedef ::xsd::cxx::tree::optional< ContactPosition_type > ContactPosition_optional;
    typedef ::xsd::cxx::tree::traits< ContactPosition_type, char > ContactPosition_traits;

    const ContactPosition_optional&
    ContactPosition () const;

    ContactPosition_optional&
    ContactPosition ();

    void
    ContactPosition (const ContactPosition_type& x);

    void
    ContactPosition (const ContactPosition_optional& x);

    void
    ContactPosition (::std::auto_ptr< ContactPosition_type > p);

    // ContactAddress
    // 
    typedef ::wms::ContactAddress ContactAddress_type;
    typedef ::xsd::cxx::tree::optional< ContactAddress_type > ContactAddress_optional;
    typedef ::xsd::cxx::tree::traits< ContactAddress_type, char > ContactAddress_traits;

    const ContactAddress_optional&
    ContactAddress () const;

    ContactAddress_optional&
    ContactAddress ();

    void
    ContactAddress (const ContactAddress_type& x);

    void
    ContactAddress (const ContactAddress_optional& x);

    void
    ContactAddress (::std::auto_ptr< ContactAddress_type > p);

    // ContactVoiceTelephone
    // 
    typedef ::xml_schema::string ContactVoiceTelephone_type;
    typedef ::xsd::cxx::tree::optional< ContactVoiceTelephone_type > ContactVoiceTelephone_optional;
    typedef ::xsd::cxx::tree::traits< ContactVoiceTelephone_type, char > ContactVoiceTelephone_traits;

    const ContactVoiceTelephone_optional&
    ContactVoiceTelephone () const;

    ContactVoiceTelephone_optional&
    ContactVoiceTelephone ();

    void
    ContactVoiceTelephone (const ContactVoiceTelephone_type& x);

    void
    ContactVoiceTelephone (const ContactVoiceTelephone_optional& x);

    void
    ContactVoiceTelephone (::std::auto_ptr< ContactVoiceTelephone_type > p);

    // ContactFacsimileTelephone
    // 
    typedef ::xml_schema::string ContactFacsimileTelephone_type;
    typedef ::xsd::cxx::tree::optional< ContactFacsimileTelephone_type > ContactFacsimileTelephone_optional;
    typedef ::xsd::cxx::tree::traits< ContactFacsimileTelephone_type, char > ContactFacsimileTelephone_traits;

    const ContactFacsimileTelephone_optional&
    ContactFacsimileTelephone () const;

    ContactFacsimileTelephone_optional&
    ContactFacsimileTelephone ();

    void
    ContactFacsimileTelephone (const ContactFacsimileTelephone_type& x);

    void
    ContactFacsimileTelephone (const ContactFacsimileTelephone_optional& x);

    void
    ContactFacsimileTelephone (::std::auto_ptr< ContactFacsimileTelephone_type > p);

    // ContactElectronicMailAddress
    // 
    typedef ::xml_schema::string ContactElectronicMailAddress_type;
    typedef ::xsd::cxx::tree::optional< ContactElectronicMailAddress_type > ContactElectronicMailAddress_optional;
    typedef ::xsd::cxx::tree::traits< ContactElectronicMailAddress_type, char > ContactElectronicMailAddress_traits;

    const ContactElectronicMailAddress_optional&
    ContactElectronicMailAddress () const;

    ContactElectronicMailAddress_optional&
    ContactElectronicMailAddress ();

    void
    ContactElectronicMailAddress (const ContactElectronicMailAddress_type& x);

    void
    ContactElectronicMailAddress (const ContactElectronicMailAddress_optional& x);

    void
    ContactElectronicMailAddress (::std::auto_ptr< ContactElectronicMailAddress_type > p);

    // Constructors.
    //
    ContactInformation ();

    ContactInformation (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    ContactInformation (const ContactInformation& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual ContactInformation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ContactInformation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ContactPersonPrimary_optional ContactPersonPrimary_;
    ContactPosition_optional ContactPosition_;
    ContactAddress_optional ContactAddress_;
    ContactVoiceTelephone_optional ContactVoiceTelephone_;
    ContactFacsimileTelephone_optional ContactFacsimileTelephone_;
    ContactElectronicMailAddress_optional ContactElectronicMailAddress_;
  };

  class ContactPersonPrimary: public ::xml_schema::type
  {
    public:
    // ContactPerson
    // 
    typedef ::xml_schema::string ContactPerson_type;
    typedef ::xsd::cxx::tree::traits< ContactPerson_type, char > ContactPerson_traits;

    const ContactPerson_type&
    ContactPerson () const;

    ContactPerson_type&
    ContactPerson ();

    void
    ContactPerson (const ContactPerson_type& x);

    void
    ContactPerson (::std::auto_ptr< ContactPerson_type > p);

    // ContactOrganization
    // 
    typedef ::xml_schema::string ContactOrganization_type;
    typedef ::xsd::cxx::tree::traits< ContactOrganization_type, char > ContactOrganization_traits;

    const ContactOrganization_type&
    ContactOrganization () const;

    ContactOrganization_type&
    ContactOrganization ();

    void
    ContactOrganization (const ContactOrganization_type& x);

    void
    ContactOrganization (::std::auto_ptr< ContactOrganization_type > p);

    // Constructors.
    //
    ContactPersonPrimary (const ContactPerson_type&,
                          const ContactOrganization_type&);

    ContactPersonPrimary (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    ContactPersonPrimary (const ContactPersonPrimary& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual ContactPersonPrimary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ContactPersonPrimary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< ContactPerson_type > ContactPerson_;
    ::xsd::cxx::tree::one< ContactOrganization_type > ContactOrganization_;
  };

  class ContactAddress: public ::xml_schema::type
  {
    public:
    // AddressType
    // 
    typedef ::xml_schema::string AddressType_type;
    typedef ::xsd::cxx::tree::traits< AddressType_type, char > AddressType_traits;

    const AddressType_type&
    AddressType () const;

    AddressType_type&
    AddressType ();

    void
    AddressType (const AddressType_type& x);

    void
    AddressType (::std::auto_ptr< AddressType_type > p);

    // Address
    // 
    typedef ::xml_schema::string Address_type;
    typedef ::xsd::cxx::tree::traits< Address_type, char > Address_traits;

    const Address_type&
    Address () const;

    Address_type&
    Address ();

    void
    Address (const Address_type& x);

    void
    Address (::std::auto_ptr< Address_type > p);

    // City
    // 
    typedef ::xml_schema::string City_type;
    typedef ::xsd::cxx::tree::traits< City_type, char > City_traits;

    const City_type&
    City () const;

    City_type&
    City ();

    void
    City (const City_type& x);

    void
    City (::std::auto_ptr< City_type > p);

    // StateOrProvince
    // 
    typedef ::xml_schema::string StateOrProvince_type;
    typedef ::xsd::cxx::tree::traits< StateOrProvince_type, char > StateOrProvince_traits;

    const StateOrProvince_type&
    StateOrProvince () const;

    StateOrProvince_type&
    StateOrProvince ();

    void
    StateOrProvince (const StateOrProvince_type& x);

    void
    StateOrProvince (::std::auto_ptr< StateOrProvince_type > p);

    // PostCode
    // 
    typedef ::xml_schema::string PostCode_type;
    typedef ::xsd::cxx::tree::traits< PostCode_type, char > PostCode_traits;

    const PostCode_type&
    PostCode () const;

    PostCode_type&
    PostCode ();

    void
    PostCode (const PostCode_type& x);

    void
    PostCode (::std::auto_ptr< PostCode_type > p);

    // Country
    // 
    typedef ::xml_schema::string Country_type;
    typedef ::xsd::cxx::tree::traits< Country_type, char > Country_traits;

    const Country_type&
    Country () const;

    Country_type&
    Country ();

    void
    Country (const Country_type& x);

    void
    Country (::std::auto_ptr< Country_type > p);

    // Constructors.
    //
    ContactAddress (const AddressType_type&,
                    const Address_type&,
                    const City_type&,
                    const StateOrProvince_type&,
                    const PostCode_type&,
                    const Country_type&);

    ContactAddress (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    ContactAddress (const ContactAddress& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual ContactAddress*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ContactAddress ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< AddressType_type > AddressType_;
    ::xsd::cxx::tree::one< Address_type > Address_;
    ::xsd::cxx::tree::one< City_type > City_;
    ::xsd::cxx::tree::one< StateOrProvince_type > StateOrProvince_;
    ::xsd::cxx::tree::one< PostCode_type > PostCode_;
    ::xsd::cxx::tree::one< Country_type > Country_;
  };

  class Capability: public ::xml_schema::type
  {
    public:
    // Request
    // 
    typedef ::wms::Request Request_type;
    typedef ::xsd::cxx::tree::traits< Request_type, char > Request_traits;

    const Request_type&
    Request () const;

    Request_type&
    Request ();

    void
    Request (const Request_type& x);

    void
    Request (::std::auto_ptr< Request_type > p);

    // Exception
    // 
    typedef ::wms::Exception Exception_type;
    typedef ::xsd::cxx::tree::traits< Exception_type, char > Exception_traits;

    const Exception_type&
    Exception () const;

    Exception_type&
    Exception ();

    void
    Exception (const Exception_type& x);

    void
    Exception (::std::auto_ptr< Exception_type > p);

    // _ExtendedCapabilities
    // 
    typedef ::xml_schema::type _ExtendedCapabilities_type;
    typedef ::xsd::cxx::tree::sequence< _ExtendedCapabilities_type > _ExtendedCapabilities_sequence;
    typedef _ExtendedCapabilities_sequence::iterator _ExtendedCapabilities_iterator;
    typedef _ExtendedCapabilities_sequence::const_iterator _ExtendedCapabilities_const_iterator;
    typedef ::xsd::cxx::tree::traits< _ExtendedCapabilities_type, char > _ExtendedCapabilities_traits;

    const _ExtendedCapabilities_sequence&
    _ExtendedCapabilities () const;

    _ExtendedCapabilities_sequence&
    _ExtendedCapabilities ();

    void
    _ExtendedCapabilities (const _ExtendedCapabilities_sequence& s);

    // Layer
    // 
    typedef ::wms::Layer Layer_type;
    typedef ::xsd::cxx::tree::optional< Layer_type > Layer_optional;
    typedef ::xsd::cxx::tree::traits< Layer_type, char > Layer_traits;

    const Layer_optional&
    Layer () const;

    Layer_optional&
    Layer ();

    void
    Layer (const Layer_type& x);

    void
    Layer (const Layer_optional& x);

    void
    Layer (::std::auto_ptr< Layer_type > p);

    // Constructors.
    //
    Capability (const Request_type&,
                const Exception_type&);

    Capability (::std::auto_ptr< Request_type >&,
                ::std::auto_ptr< Exception_type >&);

    Capability (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Capability (const Capability& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Capability*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Capability ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Request_type > Request_;
    ::xsd::cxx::tree::one< Exception_type > Exception_;
    _ExtendedCapabilities_sequence _ExtendedCapabilities_;
    Layer_optional Layer_;
  };

  class Request: public ::xml_schema::type
  {
    public:
    // GetCapabilities
    // 
    typedef ::wms::OperationType GetCapabilities_type;
    typedef ::xsd::cxx::tree::traits< GetCapabilities_type, char > GetCapabilities_traits;

    const GetCapabilities_type&
    GetCapabilities () const;

    GetCapabilities_type&
    GetCapabilities ();

    void
    GetCapabilities (const GetCapabilities_type& x);

    void
    GetCapabilities (::std::auto_ptr< GetCapabilities_type > p);

    // GetMap
    // 
    typedef ::wms::OperationType GetMap_type;
    typedef ::xsd::cxx::tree::traits< GetMap_type, char > GetMap_traits;

    const GetMap_type&
    GetMap () const;

    GetMap_type&
    GetMap ();

    void
    GetMap (const GetMap_type& x);

    void
    GetMap (::std::auto_ptr< GetMap_type > p);

    // GetFeatureInfo
    // 
    typedef ::wms::OperationType GetFeatureInfo_type;
    typedef ::xsd::cxx::tree::optional< GetFeatureInfo_type > GetFeatureInfo_optional;
    typedef ::xsd::cxx::tree::traits< GetFeatureInfo_type, char > GetFeatureInfo_traits;

    const GetFeatureInfo_optional&
    GetFeatureInfo () const;

    GetFeatureInfo_optional&
    GetFeatureInfo ();

    void
    GetFeatureInfo (const GetFeatureInfo_type& x);

    void
    GetFeatureInfo (const GetFeatureInfo_optional& x);

    void
    GetFeatureInfo (::std::auto_ptr< GetFeatureInfo_type > p);

    // _ExtendedOperation
    // 
    typedef ::wms::OperationType _ExtendedOperation_type;
    typedef ::xsd::cxx::tree::sequence< _ExtendedOperation_type > _ExtendedOperation_sequence;
    typedef _ExtendedOperation_sequence::iterator _ExtendedOperation_iterator;
    typedef _ExtendedOperation_sequence::const_iterator _ExtendedOperation_const_iterator;
    typedef ::xsd::cxx::tree::traits< _ExtendedOperation_type, char > _ExtendedOperation_traits;

    const _ExtendedOperation_sequence&
    _ExtendedOperation () const;

    _ExtendedOperation_sequence&
    _ExtendedOperation ();

    void
    _ExtendedOperation (const _ExtendedOperation_sequence& s);

    // Constructors.
    //
    Request (const GetCapabilities_type&,
             const GetMap_type&);

    Request (::std::auto_ptr< GetCapabilities_type >&,
             ::std::auto_ptr< GetMap_type >&);

    Request (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Request (const Request& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Request*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< GetCapabilities_type > GetCapabilities_;
    ::xsd::cxx::tree::one< GetMap_type > GetMap_;
    GetFeatureInfo_optional GetFeatureInfo_;
    _ExtendedOperation_sequence _ExtendedOperation_;
  };

  class DCPType: public ::xml_schema::type
  {
    public:
    // HTTP
    // 
    typedef ::wms::HTTP HTTP_type;
    typedef ::xsd::cxx::tree::traits< HTTP_type, char > HTTP_traits;

    const HTTP_type&
    HTTP () const;

    HTTP_type&
    HTTP ();

    void
    HTTP (const HTTP_type& x);

    void
    HTTP (::std::auto_ptr< HTTP_type > p);

    // Constructors.
    //
    DCPType (const HTTP_type&);

    DCPType (::std::auto_ptr< HTTP_type >&);

    DCPType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    DCPType (const DCPType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual DCPType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DCPType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< HTTP_type > HTTP_;
  };

  class HTTP: public ::xml_schema::type
  {
    public:
    // Get
    // 
    typedef ::wms::Get Get_type;
    typedef ::xsd::cxx::tree::traits< Get_type, char > Get_traits;

    const Get_type&
    Get () const;

    Get_type&
    Get ();

    void
    Get (const Get_type& x);

    void
    Get (::std::auto_ptr< Get_type > p);

    // Post
    // 
    typedef ::wms::Post Post_type;
    typedef ::xsd::cxx::tree::optional< Post_type > Post_optional;
    typedef ::xsd::cxx::tree::traits< Post_type, char > Post_traits;

    const Post_optional&
    Post () const;

    Post_optional&
    Post ();

    void
    Post (const Post_type& x);

    void
    Post (const Post_optional& x);

    void
    Post (::std::auto_ptr< Post_type > p);

    // Constructors.
    //
    HTTP (const Get_type&);

    HTTP (::std::auto_ptr< Get_type >&);

    HTTP (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    HTTP (const HTTP& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual HTTP*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~HTTP ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Get_type > Get_;
    Post_optional Post_;
  };

  class Get: public ::xml_schema::type
  {
    public:
    // OnlineResource
    // 
    typedef ::wms::OnlineResource OnlineResource_type;
    typedef ::xsd::cxx::tree::traits< OnlineResource_type, char > OnlineResource_traits;

    const OnlineResource_type&
    OnlineResource () const;

    OnlineResource_type&
    OnlineResource ();

    void
    OnlineResource (const OnlineResource_type& x);

    void
    OnlineResource (::std::auto_ptr< OnlineResource_type > p);

    // Constructors.
    //
    Get (const OnlineResource_type&);

    Get (::std::auto_ptr< OnlineResource_type >&);

    Get (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    Get (const Get& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual Get*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Get ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< OnlineResource_type > OnlineResource_;
  };

  class Post: public ::xml_schema::type
  {
    public:
    // OnlineResource
    // 
    typedef ::wms::OnlineResource OnlineResource_type;
    typedef ::xsd::cxx::tree::traits< OnlineResource_type, char > OnlineResource_traits;

    const OnlineResource_type&
    OnlineResource () const;

    OnlineResource_type&
    OnlineResource ();

    void
    OnlineResource (const OnlineResource_type& x);

    void
    OnlineResource (::std::auto_ptr< OnlineResource_type > p);

    // Constructors.
    //
    Post (const OnlineResource_type&);

    Post (::std::auto_ptr< OnlineResource_type >&);

    Post (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Post (const Post& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Post*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Post ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< OnlineResource_type > OnlineResource_;
  };

  class Exception: public ::xml_schema::type
  {
    public:
    // Format
    // 
    typedef ::xml_schema::string Format_type;
    typedef ::xsd::cxx::tree::sequence< Format_type > Format_sequence;
    typedef Format_sequence::iterator Format_iterator;
    typedef Format_sequence::const_iterator Format_const_iterator;
    typedef ::xsd::cxx::tree::traits< Format_type, char > Format_traits;

    const Format_sequence&
    Format () const;

    Format_sequence&
    Format ();

    void
    Format (const Format_sequence& s);

    // Constructors.
    //
    Exception ();

    Exception (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Exception (const Exception& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Exception*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Exception ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Format_sequence Format_;
  };

  class Layer: public ::xml_schema::type
  {
    public:
    // Name
    // 
    typedef ::xml_schema::string Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::auto_ptr< Name_type > p);

    // Title
    // 
    typedef ::xml_schema::string Title_type;
    typedef ::xsd::cxx::tree::traits< Title_type, char > Title_traits;

    const Title_type&
    Title () const;

    Title_type&
    Title ();

    void
    Title (const Title_type& x);

    void
    Title (::std::auto_ptr< Title_type > p);

    // Abstract
    // 
    typedef ::xml_schema::string Abstract_type;
    typedef ::xsd::cxx::tree::optional< Abstract_type > Abstract_optional;
    typedef ::xsd::cxx::tree::traits< Abstract_type, char > Abstract_traits;

    const Abstract_optional&
    Abstract () const;

    Abstract_optional&
    Abstract ();

    void
    Abstract (const Abstract_type& x);

    void
    Abstract (const Abstract_optional& x);

    void
    Abstract (::std::auto_ptr< Abstract_type > p);

    // KeywordList
    // 
    typedef ::wms::KeywordList KeywordList_type;
    typedef ::xsd::cxx::tree::optional< KeywordList_type > KeywordList_optional;
    typedef ::xsd::cxx::tree::traits< KeywordList_type, char > KeywordList_traits;

    const KeywordList_optional&
    KeywordList () const;

    KeywordList_optional&
    KeywordList ();

    void
    KeywordList (const KeywordList_type& x);

    void
    KeywordList (const KeywordList_optional& x);

    void
    KeywordList (::std::auto_ptr< KeywordList_type > p);

    // CRS
    // 
    typedef ::xml_schema::string CRS_type;
    typedef ::xsd::cxx::tree::sequence< CRS_type > CRS_sequence;
    typedef CRS_sequence::iterator CRS_iterator;
    typedef CRS_sequence::const_iterator CRS_const_iterator;
    typedef ::xsd::cxx::tree::traits< CRS_type, char > CRS_traits;

    const CRS_sequence&
    CRS () const;

    CRS_sequence&
    CRS ();

    void
    CRS (const CRS_sequence& s);

    // EX_GeographicBoundingBox
    // 
    typedef ::wms::EX_GeographicBoundingBox EX_GeographicBoundingBox_type;
    typedef ::xsd::cxx::tree::optional< EX_GeographicBoundingBox_type > EX_GeographicBoundingBox_optional;
    typedef ::xsd::cxx::tree::traits< EX_GeographicBoundingBox_type, char > EX_GeographicBoundingBox_traits;

    const EX_GeographicBoundingBox_optional&
    EX_GeographicBoundingBox () const;

    EX_GeographicBoundingBox_optional&
    EX_GeographicBoundingBox ();

    void
    EX_GeographicBoundingBox (const EX_GeographicBoundingBox_type& x);

    void
    EX_GeographicBoundingBox (const EX_GeographicBoundingBox_optional& x);

    void
    EX_GeographicBoundingBox (::std::auto_ptr< EX_GeographicBoundingBox_type > p);

    // BoundingBox
    // 
    typedef ::wms::BoundingBox BoundingBox_type;
    typedef ::xsd::cxx::tree::sequence< BoundingBox_type > BoundingBox_sequence;
    typedef BoundingBox_sequence::iterator BoundingBox_iterator;
    typedef BoundingBox_sequence::const_iterator BoundingBox_const_iterator;
    typedef ::xsd::cxx::tree::traits< BoundingBox_type, char > BoundingBox_traits;

    const BoundingBox_sequence&
    BoundingBox () const;

    BoundingBox_sequence&
    BoundingBox ();

    void
    BoundingBox (const BoundingBox_sequence& s);

    // Dimension
    // 
    typedef ::wms::Dimension Dimension_type;
    typedef ::xsd::cxx::tree::sequence< Dimension_type > Dimension_sequence;
    typedef Dimension_sequence::iterator Dimension_iterator;
    typedef Dimension_sequence::const_iterator Dimension_const_iterator;
    typedef ::xsd::cxx::tree::traits< Dimension_type, char > Dimension_traits;

    const Dimension_sequence&
    Dimension () const;

    Dimension_sequence&
    Dimension ();

    void
    Dimension (const Dimension_sequence& s);

    // Attribution
    // 
    typedef ::wms::Attribution Attribution_type;
    typedef ::xsd::cxx::tree::optional< Attribution_type > Attribution_optional;
    typedef ::xsd::cxx::tree::traits< Attribution_type, char > Attribution_traits;

    const Attribution_optional&
    Attribution () const;

    Attribution_optional&
    Attribution ();

    void
    Attribution (const Attribution_type& x);

    void
    Attribution (const Attribution_optional& x);

    void
    Attribution (::std::auto_ptr< Attribution_type > p);

    // AuthorityURL
    // 
    typedef ::wms::AuthorityURL AuthorityURL_type;
    typedef ::xsd::cxx::tree::sequence< AuthorityURL_type > AuthorityURL_sequence;
    typedef AuthorityURL_sequence::iterator AuthorityURL_iterator;
    typedef AuthorityURL_sequence::const_iterator AuthorityURL_const_iterator;
    typedef ::xsd::cxx::tree::traits< AuthorityURL_type, char > AuthorityURL_traits;

    const AuthorityURL_sequence&
    AuthorityURL () const;

    AuthorityURL_sequence&
    AuthorityURL ();

    void
    AuthorityURL (const AuthorityURL_sequence& s);

    // Identifier
    // 
    typedef ::wms::Identifier Identifier_type;
    typedef ::xsd::cxx::tree::sequence< Identifier_type > Identifier_sequence;
    typedef Identifier_sequence::iterator Identifier_iterator;
    typedef Identifier_sequence::const_iterator Identifier_const_iterator;
    typedef ::xsd::cxx::tree::traits< Identifier_type, char > Identifier_traits;

    const Identifier_sequence&
    Identifier () const;

    Identifier_sequence&
    Identifier ();

    void
    Identifier (const Identifier_sequence& s);

    // MetadataURL
    // 
    typedef ::wms::MetadataURL MetadataURL_type;
    typedef ::xsd::cxx::tree::sequence< MetadataURL_type > MetadataURL_sequence;
    typedef MetadataURL_sequence::iterator MetadataURL_iterator;
    typedef MetadataURL_sequence::const_iterator MetadataURL_const_iterator;
    typedef ::xsd::cxx::tree::traits< MetadataURL_type, char > MetadataURL_traits;

    const MetadataURL_sequence&
    MetadataURL () const;

    MetadataURL_sequence&
    MetadataURL ();

    void
    MetadataURL (const MetadataURL_sequence& s);

    // DataURL
    // 
    typedef ::wms::DataURL DataURL_type;
    typedef ::xsd::cxx::tree::sequence< DataURL_type > DataURL_sequence;
    typedef DataURL_sequence::iterator DataURL_iterator;
    typedef DataURL_sequence::const_iterator DataURL_const_iterator;
    typedef ::xsd::cxx::tree::traits< DataURL_type, char > DataURL_traits;

    const DataURL_sequence&
    DataURL () const;

    DataURL_sequence&
    DataURL ();

    void
    DataURL (const DataURL_sequence& s);

    // FeatureListURL
    // 
    typedef ::wms::FeatureListURL FeatureListURL_type;
    typedef ::xsd::cxx::tree::sequence< FeatureListURL_type > FeatureListURL_sequence;
    typedef FeatureListURL_sequence::iterator FeatureListURL_iterator;
    typedef FeatureListURL_sequence::const_iterator FeatureListURL_const_iterator;
    typedef ::xsd::cxx::tree::traits< FeatureListURL_type, char > FeatureListURL_traits;

    const FeatureListURL_sequence&
    FeatureListURL () const;

    FeatureListURL_sequence&
    FeatureListURL ();

    void
    FeatureListURL (const FeatureListURL_sequence& s);

    // Style
    // 
    typedef ::wms::Style Style_type;
    typedef ::xsd::cxx::tree::sequence< Style_type > Style_sequence;
    typedef Style_sequence::iterator Style_iterator;
    typedef Style_sequence::const_iterator Style_const_iterator;
    typedef ::xsd::cxx::tree::traits< Style_type, char > Style_traits;

    const Style_sequence&
    Style () const;

    Style_sequence&
    Style ();

    void
    Style (const Style_sequence& s);

    // MinScaleDenominator
    // 
    typedef ::xml_schema::double_ MinScaleDenominator_type;
    typedef ::xsd::cxx::tree::optional< MinScaleDenominator_type > MinScaleDenominator_optional;
    typedef ::xsd::cxx::tree::traits< MinScaleDenominator_type, char, ::xsd::cxx::tree::schema_type::double_ > MinScaleDenominator_traits;

    const MinScaleDenominator_optional&
    MinScaleDenominator () const;

    MinScaleDenominator_optional&
    MinScaleDenominator ();

    void
    MinScaleDenominator (const MinScaleDenominator_type& x);

    void
    MinScaleDenominator (const MinScaleDenominator_optional& x);

    // MaxScaleDenominator
    // 
    typedef ::xml_schema::double_ MaxScaleDenominator_type;
    typedef ::xsd::cxx::tree::optional< MaxScaleDenominator_type > MaxScaleDenominator_optional;
    typedef ::xsd::cxx::tree::traits< MaxScaleDenominator_type, char, ::xsd::cxx::tree::schema_type::double_ > MaxScaleDenominator_traits;

    const MaxScaleDenominator_optional&
    MaxScaleDenominator () const;

    MaxScaleDenominator_optional&
    MaxScaleDenominator ();

    void
    MaxScaleDenominator (const MaxScaleDenominator_type& x);

    void
    MaxScaleDenominator (const MaxScaleDenominator_optional& x);

    // Layer
    // 
    typedef ::wms::Layer Layer1_type;
    typedef ::xsd::cxx::tree::sequence< Layer1_type > Layer1_sequence;
    typedef Layer1_sequence::iterator Layer1_iterator;
    typedef Layer1_sequence::const_iterator Layer1_const_iterator;
    typedef ::xsd::cxx::tree::traits< Layer1_type, char > Layer1_traits;

    const Layer1_sequence&
    Layer1 () const;

    Layer1_sequence&
    Layer1 ();

    void
    Layer1 (const Layer1_sequence& s);

    // queryable
    // 
    typedef ::xml_schema::boolean queryable_type;
    typedef ::xsd::cxx::tree::traits< queryable_type, char > queryable_traits;

    const queryable_type&
    queryable () const;

    queryable_type&
    queryable ();

    void
    queryable (const queryable_type& x);

    static const queryable_type&
    queryable_default_value ();

    // cascaded
    // 
    typedef ::xml_schema::non_negative_integer cascaded_type;
    typedef ::xsd::cxx::tree::optional< cascaded_type > cascaded_optional;
    typedef ::xsd::cxx::tree::traits< cascaded_type, char > cascaded_traits;

    const cascaded_optional&
    cascaded () const;

    cascaded_optional&
    cascaded ();

    void
    cascaded (const cascaded_type& x);

    void
    cascaded (const cascaded_optional& x);

    // opaque
    // 
    typedef ::xml_schema::boolean opaque_type;
    typedef ::xsd::cxx::tree::traits< opaque_type, char > opaque_traits;

    const opaque_type&
    opaque () const;

    opaque_type&
    opaque ();

    void
    opaque (const opaque_type& x);

    static const opaque_type&
    opaque_default_value ();

    // noSubsets
    // 
    typedef ::xml_schema::boolean noSubsets_type;
    typedef ::xsd::cxx::tree::traits< noSubsets_type, char > noSubsets_traits;

    const noSubsets_type&
    noSubsets () const;

    noSubsets_type&
    noSubsets ();

    void
    noSubsets (const noSubsets_type& x);

    static const noSubsets_type&
    noSubsets_default_value ();

    // fixedWidth
    // 
    typedef ::xml_schema::non_negative_integer fixedWidth_type;
    typedef ::xsd::cxx::tree::optional< fixedWidth_type > fixedWidth_optional;
    typedef ::xsd::cxx::tree::traits< fixedWidth_type, char > fixedWidth_traits;

    const fixedWidth_optional&
    fixedWidth () const;

    fixedWidth_optional&
    fixedWidth ();

    void
    fixedWidth (const fixedWidth_type& x);

    void
    fixedWidth (const fixedWidth_optional& x);

    // fixedHeight
    // 
    typedef ::xml_schema::non_negative_integer fixedHeight_type;
    typedef ::xsd::cxx::tree::optional< fixedHeight_type > fixedHeight_optional;
    typedef ::xsd::cxx::tree::traits< fixedHeight_type, char > fixedHeight_traits;

    const fixedHeight_optional&
    fixedHeight () const;

    fixedHeight_optional&
    fixedHeight ();

    void
    fixedHeight (const fixedHeight_type& x);

    void
    fixedHeight (const fixedHeight_optional& x);

    // Constructors.
    //
    Layer (const Title_type&);

    Layer (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Layer (const Layer& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Layer*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Layer ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Name_optional Name_;
    ::xsd::cxx::tree::one< Title_type > Title_;
    Abstract_optional Abstract_;
    KeywordList_optional KeywordList_;
    CRS_sequence CRS_;
    EX_GeographicBoundingBox_optional EX_GeographicBoundingBox_;
    BoundingBox_sequence BoundingBox_;
    Dimension_sequence Dimension_;
    Attribution_optional Attribution_;
    AuthorityURL_sequence AuthorityURL_;
    Identifier_sequence Identifier_;
    MetadataURL_sequence MetadataURL_;
    DataURL_sequence DataURL_;
    FeatureListURL_sequence FeatureListURL_;
    Style_sequence Style_;
    MinScaleDenominator_optional MinScaleDenominator_;
    MaxScaleDenominator_optional MaxScaleDenominator_;
    Layer1_sequence Layer1_;
    ::xsd::cxx::tree::one< queryable_type > queryable_;
    static const queryable_type queryable_default_value_;
    cascaded_optional cascaded_;
    ::xsd::cxx::tree::one< opaque_type > opaque_;
    static const opaque_type opaque_default_value_;
    ::xsd::cxx::tree::one< noSubsets_type > noSubsets_;
    static const noSubsets_type noSubsets_default_value_;
    fixedWidth_optional fixedWidth_;
    fixedHeight_optional fixedHeight_;
  };

  class EX_GeographicBoundingBox: public ::xml_schema::type
  {
    public:
    // westBoundLongitude
    // 
    typedef ::wms::longitudeType westBoundLongitude_type;
    typedef ::xsd::cxx::tree::traits< westBoundLongitude_type, char > westBoundLongitude_traits;

    const westBoundLongitude_type&
    westBoundLongitude () const;

    westBoundLongitude_type&
    westBoundLongitude ();

    void
    westBoundLongitude (const westBoundLongitude_type& x);

    void
    westBoundLongitude (::std::auto_ptr< westBoundLongitude_type > p);

    // eastBoundLongitude
    // 
    typedef ::wms::longitudeType eastBoundLongitude_type;
    typedef ::xsd::cxx::tree::traits< eastBoundLongitude_type, char > eastBoundLongitude_traits;

    const eastBoundLongitude_type&
    eastBoundLongitude () const;

    eastBoundLongitude_type&
    eastBoundLongitude ();

    void
    eastBoundLongitude (const eastBoundLongitude_type& x);

    void
    eastBoundLongitude (::std::auto_ptr< eastBoundLongitude_type > p);

    // southBoundLatitude
    // 
    typedef ::wms::latitudeType southBoundLatitude_type;
    typedef ::xsd::cxx::tree::traits< southBoundLatitude_type, char > southBoundLatitude_traits;

    const southBoundLatitude_type&
    southBoundLatitude () const;

    southBoundLatitude_type&
    southBoundLatitude ();

    void
    southBoundLatitude (const southBoundLatitude_type& x);

    void
    southBoundLatitude (::std::auto_ptr< southBoundLatitude_type > p);

    // northBoundLatitude
    // 
    typedef ::wms::latitudeType northBoundLatitude_type;
    typedef ::xsd::cxx::tree::traits< northBoundLatitude_type, char > northBoundLatitude_traits;

    const northBoundLatitude_type&
    northBoundLatitude () const;

    northBoundLatitude_type&
    northBoundLatitude ();

    void
    northBoundLatitude (const northBoundLatitude_type& x);

    void
    northBoundLatitude (::std::auto_ptr< northBoundLatitude_type > p);

    // Constructors.
    //
    EX_GeographicBoundingBox (const westBoundLongitude_type&,
                              const eastBoundLongitude_type&,
                              const southBoundLatitude_type&,
                              const northBoundLatitude_type&);

    EX_GeographicBoundingBox (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    EX_GeographicBoundingBox (const EX_GeographicBoundingBox& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    virtual EX_GeographicBoundingBox*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~EX_GeographicBoundingBox ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< westBoundLongitude_type > westBoundLongitude_;
    ::xsd::cxx::tree::one< eastBoundLongitude_type > eastBoundLongitude_;
    ::xsd::cxx::tree::one< southBoundLatitude_type > southBoundLatitude_;
    ::xsd::cxx::tree::one< northBoundLatitude_type > northBoundLatitude_;
  };

  class BoundingBox: public ::xml_schema::type
  {
    public:
    // CRS
    // 
    typedef ::xml_schema::string CRS_type;
    typedef ::xsd::cxx::tree::traits< CRS_type, char > CRS_traits;

    const CRS_type&
    CRS () const;

    CRS_type&
    CRS ();

    void
    CRS (const CRS_type& x);

    void
    CRS (::std::auto_ptr< CRS_type > p);

    // minx
    // 
    typedef ::xml_schema::double_ minx_type;
    typedef ::xsd::cxx::tree::traits< minx_type, char, ::xsd::cxx::tree::schema_type::double_ > minx_traits;

    const minx_type&
    minx () const;

    minx_type&
    minx ();

    void
    minx (const minx_type& x);

    // miny
    // 
    typedef ::xml_schema::double_ miny_type;
    typedef ::xsd::cxx::tree::traits< miny_type, char, ::xsd::cxx::tree::schema_type::double_ > miny_traits;

    const miny_type&
    miny () const;

    miny_type&
    miny ();

    void
    miny (const miny_type& x);

    // maxx
    // 
    typedef ::xml_schema::double_ maxx_type;
    typedef ::xsd::cxx::tree::traits< maxx_type, char, ::xsd::cxx::tree::schema_type::double_ > maxx_traits;

    const maxx_type&
    maxx () const;

    maxx_type&
    maxx ();

    void
    maxx (const maxx_type& x);

    // maxy
    // 
    typedef ::xml_schema::double_ maxy_type;
    typedef ::xsd::cxx::tree::traits< maxy_type, char, ::xsd::cxx::tree::schema_type::double_ > maxy_traits;

    const maxy_type&
    maxy () const;

    maxy_type&
    maxy ();

    void
    maxy (const maxy_type& x);

    // resx
    // 
    typedef ::xml_schema::double_ resx_type;
    typedef ::xsd::cxx::tree::optional< resx_type > resx_optional;
    typedef ::xsd::cxx::tree::traits< resx_type, char, ::xsd::cxx::tree::schema_type::double_ > resx_traits;

    const resx_optional&
    resx () const;

    resx_optional&
    resx ();

    void
    resx (const resx_type& x);

    void
    resx (const resx_optional& x);

    // resy
    // 
    typedef ::xml_schema::double_ resy_type;
    typedef ::xsd::cxx::tree::optional< resy_type > resy_optional;
    typedef ::xsd::cxx::tree::traits< resy_type, char, ::xsd::cxx::tree::schema_type::double_ > resy_traits;

    const resy_optional&
    resy () const;

    resy_optional&
    resy ();

    void
    resy (const resy_type& x);

    void
    resy (const resy_optional& x);

    // Constructors.
    //
    BoundingBox (const CRS_type&,
                 const minx_type&,
                 const miny_type&,
                 const maxx_type&,
                 const maxy_type&);

    BoundingBox (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    BoundingBox (const BoundingBox& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual BoundingBox*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~BoundingBox ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< CRS_type > CRS_;
    ::xsd::cxx::tree::one< minx_type > minx_;
    ::xsd::cxx::tree::one< miny_type > miny_;
    ::xsd::cxx::tree::one< maxx_type > maxx_;
    ::xsd::cxx::tree::one< maxy_type > maxy_;
    resx_optional resx_;
    resy_optional resy_;
  };

  class Dimension: public ::xml_schema::string
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // units
    // 
    typedef ::xml_schema::string units_type;
    typedef ::xsd::cxx::tree::traits< units_type, char > units_traits;

    const units_type&
    units () const;

    units_type&
    units ();

    void
    units (const units_type& x);

    void
    units (::std::auto_ptr< units_type > p);

    // unitSymbol
    // 
    typedef ::xml_schema::string unitSymbol_type;
    typedef ::xsd::cxx::tree::optional< unitSymbol_type > unitSymbol_optional;
    typedef ::xsd::cxx::tree::traits< unitSymbol_type, char > unitSymbol_traits;

    const unitSymbol_optional&
    unitSymbol () const;

    unitSymbol_optional&
    unitSymbol ();

    void
    unitSymbol (const unitSymbol_type& x);

    void
    unitSymbol (const unitSymbol_optional& x);

    void
    unitSymbol (::std::auto_ptr< unitSymbol_type > p);

    // default
    // 
    typedef ::xml_schema::string default_type;
    typedef ::xsd::cxx::tree::optional< default_type > default_optional;
    typedef ::xsd::cxx::tree::traits< default_type, char > default_traits;

    const default_optional&
    default_ () const;

    default_optional&
    default_ ();

    void
    default_ (const default_type& x);

    void
    default_ (const default_optional& x);

    void
    default_ (::std::auto_ptr< default_type > p);

    // multipleValues
    // 
    typedef ::xml_schema::boolean multipleValues_type;
    typedef ::xsd::cxx::tree::optional< multipleValues_type > multipleValues_optional;
    typedef ::xsd::cxx::tree::traits< multipleValues_type, char > multipleValues_traits;

    const multipleValues_optional&
    multipleValues () const;

    multipleValues_optional&
    multipleValues ();

    void
    multipleValues (const multipleValues_type& x);

    void
    multipleValues (const multipleValues_optional& x);

    // nearestValue
    // 
    typedef ::xml_schema::boolean nearestValue_type;
    typedef ::xsd::cxx::tree::optional< nearestValue_type > nearestValue_optional;
    typedef ::xsd::cxx::tree::traits< nearestValue_type, char > nearestValue_traits;

    const nearestValue_optional&
    nearestValue () const;

    nearestValue_optional&
    nearestValue ();

    void
    nearestValue (const nearestValue_type& x);

    void
    nearestValue (const nearestValue_optional& x);

    // current
    // 
    typedef ::xml_schema::boolean current_type;
    typedef ::xsd::cxx::tree::optional< current_type > current_optional;
    typedef ::xsd::cxx::tree::traits< current_type, char > current_traits;

    const current_optional&
    current () const;

    current_optional&
    current ();

    void
    current (const current_type& x);

    void
    current (const current_optional& x);

    // Constructors.
    //
    Dimension (const name_type&,
               const units_type&);

    Dimension (const char*,
               const name_type&,
               const units_type&);

    Dimension (const ::std::string&,
               const name_type&,
               const units_type&);

    Dimension (const ::xml_schema::string&,
               const name_type&,
               const units_type&);

    Dimension (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Dimension (const Dimension& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Dimension*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Dimension ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< units_type > units_;
    unitSymbol_optional unitSymbol_;
    default_optional default__;
    multipleValues_optional multipleValues_;
    nearestValue_optional nearestValue_;
    current_optional current_;
  };

  class Attribution: public ::xml_schema::type
  {
    public:
    // Title
    // 
    typedef ::xml_schema::string Title_type;
    typedef ::xsd::cxx::tree::optional< Title_type > Title_optional;
    typedef ::xsd::cxx::tree::traits< Title_type, char > Title_traits;

    const Title_optional&
    Title () const;

    Title_optional&
    Title ();

    void
    Title (const Title_type& x);

    void
    Title (const Title_optional& x);

    void
    Title (::std::auto_ptr< Title_type > p);

    // OnlineResource
    // 
    typedef ::wms::OnlineResource OnlineResource_type;
    typedef ::xsd::cxx::tree::optional< OnlineResource_type > OnlineResource_optional;
    typedef ::xsd::cxx::tree::traits< OnlineResource_type, char > OnlineResource_traits;

    const OnlineResource_optional&
    OnlineResource () const;

    OnlineResource_optional&
    OnlineResource ();

    void
    OnlineResource (const OnlineResource_type& x);

    void
    OnlineResource (const OnlineResource_optional& x);

    void
    OnlineResource (::std::auto_ptr< OnlineResource_type > p);

    // LogoURL
    // 
    typedef ::wms::LogoURL LogoURL_type;
    typedef ::xsd::cxx::tree::optional< LogoURL_type > LogoURL_optional;
    typedef ::xsd::cxx::tree::traits< LogoURL_type, char > LogoURL_traits;

    const LogoURL_optional&
    LogoURL () const;

    LogoURL_optional&
    LogoURL ();

    void
    LogoURL (const LogoURL_type& x);

    void
    LogoURL (const LogoURL_optional& x);

    void
    LogoURL (::std::auto_ptr< LogoURL_type > p);

    // Constructors.
    //
    Attribution ();

    Attribution (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Attribution (const Attribution& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual Attribution*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Attribution ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Title_optional Title_;
    OnlineResource_optional OnlineResource_;
    LogoURL_optional LogoURL_;
  };

  class LogoURL: public ::xml_schema::type
  {
    public:
    // Format
    // 
    typedef ::xml_schema::string Format_type;
    typedef ::xsd::cxx::tree::traits< Format_type, char > Format_traits;

    const Format_type&
    Format () const;

    Format_type&
    Format ();

    void
    Format (const Format_type& x);

    void
    Format (::std::auto_ptr< Format_type > p);

    // OnlineResource
    // 
    typedef ::wms::OnlineResource OnlineResource_type;
    typedef ::xsd::cxx::tree::traits< OnlineResource_type, char > OnlineResource_traits;

    const OnlineResource_type&
    OnlineResource () const;

    OnlineResource_type&
    OnlineResource ();

    void
    OnlineResource (const OnlineResource_type& x);

    void
    OnlineResource (::std::auto_ptr< OnlineResource_type > p);

    // width
    // 
    typedef ::xml_schema::positive_integer width_type;
    typedef ::xsd::cxx::tree::optional< width_type > width_optional;
    typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

    const width_optional&
    width () const;

    width_optional&
    width ();

    void
    width (const width_type& x);

    void
    width (const width_optional& x);

    // height
    // 
    typedef ::xml_schema::positive_integer height_type;
    typedef ::xsd::cxx::tree::optional< height_type > height_optional;
    typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

    const height_optional&
    height () const;

    height_optional&
    height ();

    void
    height (const height_type& x);

    void
    height (const height_optional& x);

    // Constructors.
    //
    LogoURL (const Format_type&,
             const OnlineResource_type&);

    LogoURL (const Format_type&,
             ::std::auto_ptr< OnlineResource_type >&);

    LogoURL (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    LogoURL (const LogoURL& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual LogoURL*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~LogoURL ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Format_type > Format_;
    ::xsd::cxx::tree::one< OnlineResource_type > OnlineResource_;
    width_optional width_;
    height_optional height_;
  };

  class MetadataURL: public ::xml_schema::type
  {
    public:
    // Format
    // 
    typedef ::xml_schema::string Format_type;
    typedef ::xsd::cxx::tree::traits< Format_type, char > Format_traits;

    const Format_type&
    Format () const;

    Format_type&
    Format ();

    void
    Format (const Format_type& x);

    void
    Format (::std::auto_ptr< Format_type > p);

    // OnlineResource
    // 
    typedef ::wms::OnlineResource OnlineResource_type;
    typedef ::xsd::cxx::tree::traits< OnlineResource_type, char > OnlineResource_traits;

    const OnlineResource_type&
    OnlineResource () const;

    OnlineResource_type&
    OnlineResource ();

    void
    OnlineResource (const OnlineResource_type& x);

    void
    OnlineResource (::std::auto_ptr< OnlineResource_type > p);

    // type
    // 
    typedef ::xml_schema::nmtoken type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // Constructors.
    //
    MetadataURL (const Format_type&,
                 const OnlineResource_type&,
                 const type_type&);

    MetadataURL (const Format_type&,
                 ::std::auto_ptr< OnlineResource_type >&,
                 const type_type&);

    MetadataURL (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    MetadataURL (const MetadataURL& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual MetadataURL*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~MetadataURL ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Format_type > Format_;
    ::xsd::cxx::tree::one< OnlineResource_type > OnlineResource_;
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class AuthorityURL: public ::xml_schema::type
  {
    public:
    // OnlineResource
    // 
    typedef ::wms::OnlineResource OnlineResource_type;
    typedef ::xsd::cxx::tree::traits< OnlineResource_type, char > OnlineResource_traits;

    const OnlineResource_type&
    OnlineResource () const;

    OnlineResource_type&
    OnlineResource ();

    void
    OnlineResource (const OnlineResource_type& x);

    void
    OnlineResource (::std::auto_ptr< OnlineResource_type > p);

    // name
    // 
    typedef ::xml_schema::nmtoken name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // Constructors.
    //
    AuthorityURL (const OnlineResource_type&,
                  const name_type&);

    AuthorityURL (::std::auto_ptr< OnlineResource_type >&,
                  const name_type&);

    AuthorityURL (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    AuthorityURL (const AuthorityURL& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual AuthorityURL*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~AuthorityURL ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< OnlineResource_type > OnlineResource_;
    ::xsd::cxx::tree::one< name_type > name_;
  };

  class Identifier: public ::xml_schema::string
  {
    public:
    // authority
    // 
    typedef ::xml_schema::string authority_type;
    typedef ::xsd::cxx::tree::traits< authority_type, char > authority_traits;

    const authority_type&
    authority () const;

    authority_type&
    authority ();

    void
    authority (const authority_type& x);

    void
    authority (::std::auto_ptr< authority_type > p);

    // Constructors.
    //
    Identifier (const authority_type&);

    Identifier (const char*,
                const authority_type&);

    Identifier (const ::std::string&,
                const authority_type&);

    Identifier (const ::xml_schema::string&,
                const authority_type&);

    Identifier (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Identifier (const Identifier& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Identifier*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Identifier ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< authority_type > authority_;
  };

  class DataURL: public ::xml_schema::type
  {
    public:
    // Format
    // 
    typedef ::xml_schema::string Format_type;
    typedef ::xsd::cxx::tree::traits< Format_type, char > Format_traits;

    const Format_type&
    Format () const;

    Format_type&
    Format ();

    void
    Format (const Format_type& x);

    void
    Format (::std::auto_ptr< Format_type > p);

    // OnlineResource
    // 
    typedef ::wms::OnlineResource OnlineResource_type;
    typedef ::xsd::cxx::tree::traits< OnlineResource_type, char > OnlineResource_traits;

    const OnlineResource_type&
    OnlineResource () const;

    OnlineResource_type&
    OnlineResource ();

    void
    OnlineResource (const OnlineResource_type& x);

    void
    OnlineResource (::std::auto_ptr< OnlineResource_type > p);

    // Constructors.
    //
    DataURL (const Format_type&,
             const OnlineResource_type&);

    DataURL (const Format_type&,
             ::std::auto_ptr< OnlineResource_type >&);

    DataURL (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    DataURL (const DataURL& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual DataURL*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DataURL ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Format_type > Format_;
    ::xsd::cxx::tree::one< OnlineResource_type > OnlineResource_;
  };

  class FeatureListURL: public ::xml_schema::type
  {
    public:
    // Format
    // 
    typedef ::xml_schema::string Format_type;
    typedef ::xsd::cxx::tree::traits< Format_type, char > Format_traits;

    const Format_type&
    Format () const;

    Format_type&
    Format ();

    void
    Format (const Format_type& x);

    void
    Format (::std::auto_ptr< Format_type > p);

    // OnlineResource
    // 
    typedef ::wms::OnlineResource OnlineResource_type;
    typedef ::xsd::cxx::tree::traits< OnlineResource_type, char > OnlineResource_traits;

    const OnlineResource_type&
    OnlineResource () const;

    OnlineResource_type&
    OnlineResource ();

    void
    OnlineResource (const OnlineResource_type& x);

    void
    OnlineResource (::std::auto_ptr< OnlineResource_type > p);

    // Constructors.
    //
    FeatureListURL (const Format_type&,
                    const OnlineResource_type&);

    FeatureListURL (const Format_type&,
                    ::std::auto_ptr< OnlineResource_type >&);

    FeatureListURL (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    FeatureListURL (const FeatureListURL& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual FeatureListURL*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~FeatureListURL ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Format_type > Format_;
    ::xsd::cxx::tree::one< OnlineResource_type > OnlineResource_;
  };

  class Style: public ::xml_schema::type
  {
    public:
    // Name
    // 
    typedef ::xml_schema::string Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::auto_ptr< Name_type > p);

    // Title
    // 
    typedef ::xml_schema::string Title_type;
    typedef ::xsd::cxx::tree::traits< Title_type, char > Title_traits;

    const Title_type&
    Title () const;

    Title_type&
    Title ();

    void
    Title (const Title_type& x);

    void
    Title (::std::auto_ptr< Title_type > p);

    // Abstract
    // 
    typedef ::xml_schema::string Abstract_type;
    typedef ::xsd::cxx::tree::optional< Abstract_type > Abstract_optional;
    typedef ::xsd::cxx::tree::traits< Abstract_type, char > Abstract_traits;

    const Abstract_optional&
    Abstract () const;

    Abstract_optional&
    Abstract ();

    void
    Abstract (const Abstract_type& x);

    void
    Abstract (const Abstract_optional& x);

    void
    Abstract (::std::auto_ptr< Abstract_type > p);

    // LegendURL
    // 
    typedef ::wms::LegendURL LegendURL_type;
    typedef ::xsd::cxx::tree::sequence< LegendURL_type > LegendURL_sequence;
    typedef LegendURL_sequence::iterator LegendURL_iterator;
    typedef LegendURL_sequence::const_iterator LegendURL_const_iterator;
    typedef ::xsd::cxx::tree::traits< LegendURL_type, char > LegendURL_traits;

    const LegendURL_sequence&
    LegendURL () const;

    LegendURL_sequence&
    LegendURL ();

    void
    LegendURL (const LegendURL_sequence& s);

    // StyleSheetURL
    // 
    typedef ::wms::StyleSheetURL StyleSheetURL_type;
    typedef ::xsd::cxx::tree::optional< StyleSheetURL_type > StyleSheetURL_optional;
    typedef ::xsd::cxx::tree::traits< StyleSheetURL_type, char > StyleSheetURL_traits;

    const StyleSheetURL_optional&
    StyleSheetURL () const;

    StyleSheetURL_optional&
    StyleSheetURL ();

    void
    StyleSheetURL (const StyleSheetURL_type& x);

    void
    StyleSheetURL (const StyleSheetURL_optional& x);

    void
    StyleSheetURL (::std::auto_ptr< StyleSheetURL_type > p);

    // StyleURL
    // 
    typedef ::wms::StyleURL StyleURL_type;
    typedef ::xsd::cxx::tree::optional< StyleURL_type > StyleURL_optional;
    typedef ::xsd::cxx::tree::traits< StyleURL_type, char > StyleURL_traits;

    const StyleURL_optional&
    StyleURL () const;

    StyleURL_optional&
    StyleURL ();

    void
    StyleURL (const StyleURL_type& x);

    void
    StyleURL (const StyleURL_optional& x);

    void
    StyleURL (::std::auto_ptr< StyleURL_type > p);

    // Constructors.
    //
    Style (const Name_type&,
           const Title_type&);

    Style (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Style (const Style& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Style*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Style ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Name_type > Name_;
    ::xsd::cxx::tree::one< Title_type > Title_;
    Abstract_optional Abstract_;
    LegendURL_sequence LegendURL_;
    StyleSheetURL_optional StyleSheetURL_;
    StyleURL_optional StyleURL_;
  };

  class LegendURL: public ::xml_schema::type
  {
    public:
    // Format
    // 
    typedef ::xml_schema::string Format_type;
    typedef ::xsd::cxx::tree::traits< Format_type, char > Format_traits;

    const Format_type&
    Format () const;

    Format_type&
    Format ();

    void
    Format (const Format_type& x);

    void
    Format (::std::auto_ptr< Format_type > p);

    // OnlineResource
    // 
    typedef ::wms::OnlineResource OnlineResource_type;
    typedef ::xsd::cxx::tree::traits< OnlineResource_type, char > OnlineResource_traits;

    const OnlineResource_type&
    OnlineResource () const;

    OnlineResource_type&
    OnlineResource ();

    void
    OnlineResource (const OnlineResource_type& x);

    void
    OnlineResource (::std::auto_ptr< OnlineResource_type > p);

    // width
    // 
    typedef ::xml_schema::positive_integer width_type;
    typedef ::xsd::cxx::tree::optional< width_type > width_optional;
    typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

    const width_optional&
    width () const;

    width_optional&
    width ();

    void
    width (const width_type& x);

    void
    width (const width_optional& x);

    // height
    // 
    typedef ::xml_schema::positive_integer height_type;
    typedef ::xsd::cxx::tree::optional< height_type > height_optional;
    typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

    const height_optional&
    height () const;

    height_optional&
    height ();

    void
    height (const height_type& x);

    void
    height (const height_optional& x);

    // Constructors.
    //
    LegendURL (const Format_type&,
               const OnlineResource_type&);

    LegendURL (const Format_type&,
               ::std::auto_ptr< OnlineResource_type >&);

    LegendURL (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    LegendURL (const LegendURL& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual LegendURL*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~LegendURL ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Format_type > Format_;
    ::xsd::cxx::tree::one< OnlineResource_type > OnlineResource_;
    width_optional width_;
    height_optional height_;
  };

  class StyleSheetURL: public ::xml_schema::type
  {
    public:
    // Format
    // 
    typedef ::xml_schema::string Format_type;
    typedef ::xsd::cxx::tree::traits< Format_type, char > Format_traits;

    const Format_type&
    Format () const;

    Format_type&
    Format ();

    void
    Format (const Format_type& x);

    void
    Format (::std::auto_ptr< Format_type > p);

    // OnlineResource
    // 
    typedef ::wms::OnlineResource OnlineResource_type;
    typedef ::xsd::cxx::tree::traits< OnlineResource_type, char > OnlineResource_traits;

    const OnlineResource_type&
    OnlineResource () const;

    OnlineResource_type&
    OnlineResource ();

    void
    OnlineResource (const OnlineResource_type& x);

    void
    OnlineResource (::std::auto_ptr< OnlineResource_type > p);

    // Constructors.
    //
    StyleSheetURL (const Format_type&,
                   const OnlineResource_type&);

    StyleSheetURL (const Format_type&,
                   ::std::auto_ptr< OnlineResource_type >&);

    StyleSheetURL (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    StyleSheetURL (const StyleSheetURL& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual StyleSheetURL*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~StyleSheetURL ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Format_type > Format_;
    ::xsd::cxx::tree::one< OnlineResource_type > OnlineResource_;
  };

  class StyleURL: public ::xml_schema::type
  {
    public:
    // Format
    // 
    typedef ::xml_schema::string Format_type;
    typedef ::xsd::cxx::tree::traits< Format_type, char > Format_traits;

    const Format_type&
    Format () const;

    Format_type&
    Format ();

    void
    Format (const Format_type& x);

    void
    Format (::std::auto_ptr< Format_type > p);

    // OnlineResource
    // 
    typedef ::wms::OnlineResource OnlineResource_type;
    typedef ::xsd::cxx::tree::traits< OnlineResource_type, char > OnlineResource_traits;

    const OnlineResource_type&
    OnlineResource () const;

    OnlineResource_type&
    OnlineResource ();

    void
    OnlineResource (const OnlineResource_type& x);

    void
    OnlineResource (::std::auto_ptr< OnlineResource_type > p);

    // Constructors.
    //
    StyleURL (const Format_type&,
              const OnlineResource_type&);

    StyleURL (const Format_type&,
              ::std::auto_ptr< OnlineResource_type >&);

    StyleURL (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    StyleURL (const StyleURL& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual StyleURL*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~StyleURL ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Format_type > Format_;
    ::xsd::cxx::tree::one< OnlineResource_type > OnlineResource_;
  };

  class Name: public ::xml_schema::string
  {
    public:
    enum value
    {
      WMS
    };

    Name (value v);

    Name (const char* v);

    Name (const ::std::string& v);

    Name (const ::xml_schema::string& v);

    Name (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Name (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Name (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Name (const Name& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Name*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Name&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_Name_convert ();
    }

    protected:
    value
    _xsd_Name_convert () const;

    public:
    static const char* const _xsd_Name_literals_[1];
    static const value _xsd_Name_indexes_[1];
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace wms
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::WMS_Capabilities >
  WMS_Capabilities_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Title (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Title (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Title (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Title (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Title (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Title (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Title (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Title (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Title (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Title (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Title (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Title (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Title (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Title (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Abstract (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::KeywordList >
  KeywordList_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Keyword >
  Keyword_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OnlineResource >
  OnlineResource_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Format (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Format (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Format (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Format (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Format (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Format (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Format (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Format (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Format (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Format (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Format (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Format (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Format (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Format (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::Service >
  Service_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Service >
  Service_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Service >
  Service_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::Service >
  Service_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Service >
  Service_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Service >
  Service_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Service >
  Service_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Service >
  Service_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Service >
  Service_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::Service >
  Service_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Service >
  Service_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Service >
  Service_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::Service >
  Service_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Service >
  Service_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactInformation >
  ContactInformation_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactPersonPrimary >
  ContactPersonPrimary_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPerson (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactOrganization (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactPosition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::ContactAddress >
  ContactAddress_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AddressType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Address (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Address (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Address (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Address (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Address (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Address (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Address (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Address (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Address (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Address (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Address (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Address (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Address (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Address (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  City (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  City (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  City (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  City (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  City (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  City (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  City (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  City (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  City (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  City (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  City (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  City (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  City (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  City (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  StateOrProvince (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  PostCode (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Country (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Country (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Country (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Country (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Country (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Country (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Country (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Country (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Country (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Country (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Country (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Country (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Country (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Country (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactVoiceTelephone (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactFacsimileTelephone (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ContactElectronicMailAddress (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Fees (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Fees (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Fees (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Fees (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Fees (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  AccessConstraints (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  LayerLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxWidth (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::positive_integer >
  MaxHeight (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Capability >
  Capability_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::Request >
  Request_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Request >
  Request_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Request >
  Request_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::Request >
  Request_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Request >
  Request_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Request >
  Request_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Request >
  Request_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Request >
  Request_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Request >
  Request_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::Request >
  Request_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Request >
  Request_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Request >
  Request_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::Request >
  Request_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Request >
  Request_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetCapabilities (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetMap (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  GetFeatureInfo (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::OperationType >
  _ExtendedOperation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DCPType >
  DCPType_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::HTTP >
  HTTP_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::Get >
  Get_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Get >
  Get_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Get >
  Get_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::Get >
  Get_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Get >
  Get_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Get >
  Get_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Get >
  Get_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Get >
  Get_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Get >
  Get_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::Get >
  Get_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Get >
  Get_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Get >
  Get_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::Get >
  Get_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Get >
  Get_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::Post >
  Post_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Post >
  Post_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Post >
  Post_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::Post >
  Post_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Post >
  Post_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Post >
  Post_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Post >
  Post_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Post >
  Post_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Post >
  Post_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::Post >
  Post_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Post >
  Post_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Post >
  Post_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::Post >
  Post_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Post >
  Post_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Exception >
  Exception_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  _ExtendedCapabilities (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Layer >
  Layer_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  CRS (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CRS (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CRS (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  CRS (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CRS (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::EX_GeographicBoundingBox >
  EX_GeographicBoundingBox_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::BoundingBox >
  BoundingBox_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Dimension >
  Dimension_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Attribution >
  Attribution_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LogoURL >
  LogoURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::MetadataURL >
  MetadataURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::AuthorityURL >
  AuthorityURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Identifier >
  Identifier_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::DataURL >
  DataURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::FeatureListURL >
  FeatureListURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::Style >
  Style_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Style >
  Style_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Style >
  Style_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::Style >
  Style_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Style >
  Style_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Style >
  Style_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Style >
  Style_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Style >
  Style_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Style >
  Style_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::Style >
  Style_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Style >
  Style_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Style >
  Style_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::Style >
  Style_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::Style >
  Style_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::LegendURL >
  LegendURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleSheetURL >
  StyleSheetURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::wms::StyleURL >
  StyleURL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MinScaleDenominator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::double_ >
  MaxScaleDenominator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CAPABILITIES_1_3_0_HXX
